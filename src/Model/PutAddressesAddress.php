<?php
/**
 * PutAddressesAddress
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * PutAddressesAddress Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PutAddressesAddress implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'putAddresses_address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'addressTypeId' => 'string',
        'name' => 'string',
        'isMainAddress' => 'bool',
        'addressLine1' => 'string',
        'addressLine2' => 'string',
        'city' => 'string',
        'postalCode' => 'string',
        'countryId' => 'string',
        'bankAccountId' => 'string',
        'contactId' => 'string',
        'region' => 'string',
        'countryGroupId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'addressTypeId' => null,
        'name' => null,
        'isMainAddress' => null,
        'addressLine1' => null,
        'addressLine2' => null,
        'city' => null,
        'postalCode' => null,
        'countryId' => null,
        'bankAccountId' => null,
        'contactId' => null,
        'region' => null,
        'countryGroupId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'addressTypeId' => false,
        'name' => false,
        'isMainAddress' => false,
        'addressLine1' => false,
        'addressLine2' => false,
        'city' => false,
        'postalCode' => false,
        'countryId' => false,
        'bankAccountId' => false,
        'contactId' => false,
        'region' => false,
        'countryGroupId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'addressTypeId' => 'address_type_id',
        'name' => 'name',
        'isMainAddress' => 'is_main_address',
        'addressLine1' => 'address_line_1',
        'addressLine2' => 'address_line_2',
        'city' => 'city',
        'postalCode' => 'postal_code',
        'countryId' => 'country_id',
        'bankAccountId' => 'bank_account_id',
        'contactId' => 'contact_id',
        'region' => 'region',
        'countryGroupId' => 'country_group_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'addressTypeId' => 'setAddressTypeId',
        'name' => 'setName',
        'isMainAddress' => 'setIsMainAddress',
        'addressLine1' => 'setAddressLine1',
        'addressLine2' => 'setAddressLine2',
        'city' => 'setCity',
        'postalCode' => 'setPostalCode',
        'countryId' => 'setCountryId',
        'bankAccountId' => 'setBankAccountId',
        'contactId' => 'setContactId',
        'region' => 'setRegion',
        'countryGroupId' => 'setCountryGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'addressTypeId' => 'getAddressTypeId',
        'name' => 'getName',
        'isMainAddress' => 'getIsMainAddress',
        'addressLine1' => 'getAddressLine1',
        'addressLine2' => 'getAddressLine2',
        'city' => 'getCity',
        'postalCode' => 'getPostalCode',
        'countryId' => 'getCountryId',
        'bankAccountId' => 'getBankAccountId',
        'contactId' => 'getContactId',
        'region' => 'getRegion',
        'countryGroupId' => 'getCountryGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('addressTypeId', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('isMainAddress', $data ?? [], null);
        $this->setIfExists('addressLine1', $data ?? [], null);
        $this->setIfExists('addressLine2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('postalCode', $data ?? [], null);
        $this->setIfExists('countryId', $data ?? [], null);
        $this->setIfExists('bankAccountId', $data ?? [], null);
        $this->setIfExists('contactId', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('countryGroupId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addressTypeId
     *
     * @return string|null
     */
    public function getAddressTypeId(): ?string
    {
        return $this->container['addressTypeId'];
    }

    /**
     * Sets addressTypeId
     *
     * @param string|null $addressTypeId Defines the nature of the address (Shipping, Billing, Head Office etc.).<br>Start defaults to \"Sales\" for Customers and \"Purchasing\" for Vendors
     *
     * @return $this
     */
    public function setAddressTypeId(?string $addressTypeId): static
    {
        if (is_null($addressTypeId)) {
            throw new InvalidArgumentException('non-nullable addressTypeId cannot be null');
        }
        $this->container['addressTypeId'] = $addressTypeId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The custom name of the address
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets isMainAddress
     *
     * @return bool|null
     */
    public function getIsMainAddress(): ?bool
    {
        return $this->container['isMainAddress'];
    }

    /**
     * Sets isMainAddress
     *
     * @param bool|null $isMainAddress Specifies the address as the contact's main address. Only a single address can exist for a contact in Start so this is always true when returned by the API but cannot be seen in the UI
     *
     * @return $this
     */
    public function setIsMainAddress(?bool $isMainAddress): static
    {
        if (is_null($isMainAddress)) {
            throw new InvalidArgumentException('non-nullable isMainAddress cannot be null');
        }
        $this->container['isMainAddress'] = $isMainAddress;

        return $this;
    }

    /**
     * Gets addressLine1
     *
     * @return string|null
     */
    public function getAddressLine1(): ?string
    {
        return $this->container['addressLine1'];
    }

    /**
     * Sets addressLine1
     *
     * @param string|null $addressLine1 The first line of the address
     *
     * @return $this
     */
    public function setAddressLine1(?string $addressLine1): static
    {
        if (is_null($addressLine1)) {
            throw new InvalidArgumentException('non-nullable addressLine1 cannot be null');
        }
        $this->container['addressLine1'] = $addressLine1;

        return $this;
    }

    /**
     * Gets addressLine2
     *
     * @return string|null
     */
    public function getAddressLine2(): ?string
    {
        return $this->container['addressLine2'];
    }

    /**
     * Sets addressLine2
     *
     * @param string|null $addressLine2 The second line of the address
     *
     * @return $this
     */
    public function setAddressLine2(?string $addressLine2): static
    {
        if (is_null($addressLine2)) {
            throw new InvalidArgumentException('non-nullable addressLine2 cannot be null');
        }
        $this->container['addressLine2'] = $addressLine2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity(): ?string
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The address town/city
     *
     * @return $this
     */
    public function setCity(?string $city): static
    {
        if (is_null($city)) {
            throw new InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
     */
    public function getPostalCode(): ?string
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode The address postal code/zipcode
     *
     * @return $this
     */
    public function setPostalCode(?string $postalCode): static
    {
        if (is_null($postalCode)) {
            throw new InvalidArgumentException('non-nullable postalCode cannot be null');
        }
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets countryId
     *
     * @return string|null
     */
    public function getCountryId(): ?string
    {
        return $this->container['countryId'];
    }

    /**
     * Sets countryId
     *
     * @param string|null $countryId The ID of the Country.
     *
     * @return $this
     */
    public function setCountryId(?string $countryId): static
    {
        if (is_null($countryId)) {
            throw new InvalidArgumentException('non-nullable countryId cannot be null');
        }
        $this->container['countryId'] = $countryId;

        return $this;
    }

    /**
     * Gets bankAccountId
     *
     * @return string|null
     */
    public function getBankAccountId(): ?string
    {
        return $this->container['bankAccountId'];
    }

    /**
     * Sets bankAccountId
     *
     * @param string|null $bankAccountId The related bank account of the address, if the address belongs to a bank account.
     *
     * @return $this
     */
    public function setBankAccountId(?string $bankAccountId): static
    {
        if (is_null($bankAccountId)) {
            throw new InvalidArgumentException('non-nullable bankAccountId cannot be null');
        }
        $this->container['bankAccountId'] = $bankAccountId;

        return $this;
    }

    /**
     * Gets contactId
     *
     * @return string|null
     */
    public function getContactId(): ?string
    {
        return $this->container['contactId'];
    }

    /**
     * Sets contactId
     *
     * @param string|null $contactId The related contact of the address, if the address belongs to a contact.
     *
     * @return $this
     */
    public function setContactId(?string $contactId): static
    {
        if (is_null($contactId)) {
            throw new InvalidArgumentException('non-nullable contactId cannot be null');
        }
        $this->container['contactId'] = $contactId;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion(): ?string
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region The address state/province/region
     *
     * @return $this
     */
    public function setRegion(?string $region): static
    {
        if (is_null($region)) {
            throw new InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets countryGroupId
     *
     * @return string|null
     */
    public function getCountryGroupId(): ?string
    {
        return $this->container['countryGroupId'];
    }

    /**
     * Sets countryGroupId
     *
     * @param string|null $countryGroupId The ID of the Country Group.
     *
     * @return $this
     */
    public function setCountryGroupId(?string $countryGroupId): static
    {
        if (is_null($countryGroupId)) {
            throw new InvalidArgumentException('non-nullable countryGroupId cannot be null');
        }
        $this->container['countryGroupId'] = $countryGroupId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


