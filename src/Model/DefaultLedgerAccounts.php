<?php
/**
 * DefaultLedgerAccounts
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage Business Cloud Accounting - Accounts
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 3.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * DefaultLedgerAccounts Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class DefaultLedgerAccounts implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'DefaultLedgerAccounts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'bankChargesLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'bankInterestReceivedLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'bankInterestChargesPaidLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'exchangeRateGainsLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'exchangeRateLossesLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'salesLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'salesDiscountLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'purchaseLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'purchaseDiscountLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'productSalesLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'productPurchaseLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'serviceSalesLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'servicePurchaseLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'stockPurchaseLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'otherReceiptLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'otherPaymentLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'customerReceiptDiscountLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'vendorPaymentDiscountLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'carriageLedgerAccount' => '\SynergiTech\Sage\Model\Base'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'bankChargesLedgerAccount' => null,
        'bankInterestReceivedLedgerAccount' => null,
        'bankInterestChargesPaidLedgerAccount' => null,
        'exchangeRateGainsLedgerAccount' => null,
        'exchangeRateLossesLedgerAccount' => null,
        'salesLedgerAccount' => null,
        'salesDiscountLedgerAccount' => null,
        'purchaseLedgerAccount' => null,
        'purchaseDiscountLedgerAccount' => null,
        'productSalesLedgerAccount' => null,
        'productPurchaseLedgerAccount' => null,
        'serviceSalesLedgerAccount' => null,
        'servicePurchaseLedgerAccount' => null,
        'stockPurchaseLedgerAccount' => null,
        'otherReceiptLedgerAccount' => null,
        'otherPaymentLedgerAccount' => null,
        'customerReceiptDiscountLedgerAccount' => null,
        'vendorPaymentDiscountLedgerAccount' => null,
        'carriageLedgerAccount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'bankChargesLedgerAccount' => false,
        'bankInterestReceivedLedgerAccount' => false,
        'bankInterestChargesPaidLedgerAccount' => false,
        'exchangeRateGainsLedgerAccount' => false,
        'exchangeRateLossesLedgerAccount' => false,
        'salesLedgerAccount' => false,
        'salesDiscountLedgerAccount' => false,
        'purchaseLedgerAccount' => false,
        'purchaseDiscountLedgerAccount' => false,
        'productSalesLedgerAccount' => false,
        'productPurchaseLedgerAccount' => false,
        'serviceSalesLedgerAccount' => false,
        'servicePurchaseLedgerAccount' => false,
        'stockPurchaseLedgerAccount' => false,
        'otherReceiptLedgerAccount' => false,
        'otherPaymentLedgerAccount' => false,
        'customerReceiptDiscountLedgerAccount' => false,
        'vendorPaymentDiscountLedgerAccount' => false,
        'carriageLedgerAccount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'bankChargesLedgerAccount' => 'bank_charges_ledger_account',
        'bankInterestReceivedLedgerAccount' => 'bank_interest_received_ledger_account',
        'bankInterestChargesPaidLedgerAccount' => 'bank_interest_charges_paid_ledger_account',
        'exchangeRateGainsLedgerAccount' => 'exchange_rate_gains_ledger_account',
        'exchangeRateLossesLedgerAccount' => 'exchange_rate_losses_ledger_account',
        'salesLedgerAccount' => 'sales_ledger_account',
        'salesDiscountLedgerAccount' => 'sales_discount_ledger_account',
        'purchaseLedgerAccount' => 'purchase_ledger_account',
        'purchaseDiscountLedgerAccount' => 'purchase_discount_ledger_account',
        'productSalesLedgerAccount' => 'product_sales_ledger_account',
        'productPurchaseLedgerAccount' => 'product_purchase_ledger_account',
        'serviceSalesLedgerAccount' => 'service_sales_ledger_account',
        'servicePurchaseLedgerAccount' => 'service_purchase_ledger_account',
        'stockPurchaseLedgerAccount' => 'stock_purchase_ledger_account',
        'otherReceiptLedgerAccount' => 'other_receipt_ledger_account',
        'otherPaymentLedgerAccount' => 'other_payment_ledger_account',
        'customerReceiptDiscountLedgerAccount' => 'customer_receipt_discount_ledger_account',
        'vendorPaymentDiscountLedgerAccount' => 'vendor_payment_discount_ledger_account',
        'carriageLedgerAccount' => 'carriage_ledger_account'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'bankChargesLedgerAccount' => 'setBankChargesLedgerAccount',
        'bankInterestReceivedLedgerAccount' => 'setBankInterestReceivedLedgerAccount',
        'bankInterestChargesPaidLedgerAccount' => 'setBankInterestChargesPaidLedgerAccount',
        'exchangeRateGainsLedgerAccount' => 'setExchangeRateGainsLedgerAccount',
        'exchangeRateLossesLedgerAccount' => 'setExchangeRateLossesLedgerAccount',
        'salesLedgerAccount' => 'setSalesLedgerAccount',
        'salesDiscountLedgerAccount' => 'setSalesDiscountLedgerAccount',
        'purchaseLedgerAccount' => 'setPurchaseLedgerAccount',
        'purchaseDiscountLedgerAccount' => 'setPurchaseDiscountLedgerAccount',
        'productSalesLedgerAccount' => 'setProductSalesLedgerAccount',
        'productPurchaseLedgerAccount' => 'setProductPurchaseLedgerAccount',
        'serviceSalesLedgerAccount' => 'setServiceSalesLedgerAccount',
        'servicePurchaseLedgerAccount' => 'setServicePurchaseLedgerAccount',
        'stockPurchaseLedgerAccount' => 'setStockPurchaseLedgerAccount',
        'otherReceiptLedgerAccount' => 'setOtherReceiptLedgerAccount',
        'otherPaymentLedgerAccount' => 'setOtherPaymentLedgerAccount',
        'customerReceiptDiscountLedgerAccount' => 'setCustomerReceiptDiscountLedgerAccount',
        'vendorPaymentDiscountLedgerAccount' => 'setVendorPaymentDiscountLedgerAccount',
        'carriageLedgerAccount' => 'setCarriageLedgerAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'bankChargesLedgerAccount' => 'getBankChargesLedgerAccount',
        'bankInterestReceivedLedgerAccount' => 'getBankInterestReceivedLedgerAccount',
        'bankInterestChargesPaidLedgerAccount' => 'getBankInterestChargesPaidLedgerAccount',
        'exchangeRateGainsLedgerAccount' => 'getExchangeRateGainsLedgerAccount',
        'exchangeRateLossesLedgerAccount' => 'getExchangeRateLossesLedgerAccount',
        'salesLedgerAccount' => 'getSalesLedgerAccount',
        'salesDiscountLedgerAccount' => 'getSalesDiscountLedgerAccount',
        'purchaseLedgerAccount' => 'getPurchaseLedgerAccount',
        'purchaseDiscountLedgerAccount' => 'getPurchaseDiscountLedgerAccount',
        'productSalesLedgerAccount' => 'getProductSalesLedgerAccount',
        'productPurchaseLedgerAccount' => 'getProductPurchaseLedgerAccount',
        'serviceSalesLedgerAccount' => 'getServiceSalesLedgerAccount',
        'servicePurchaseLedgerAccount' => 'getServicePurchaseLedgerAccount',
        'stockPurchaseLedgerAccount' => 'getStockPurchaseLedgerAccount',
        'otherReceiptLedgerAccount' => 'getOtherReceiptLedgerAccount',
        'otherPaymentLedgerAccount' => 'getOtherPaymentLedgerAccount',
        'customerReceiptDiscountLedgerAccount' => 'getCustomerReceiptDiscountLedgerAccount',
        'vendorPaymentDiscountLedgerAccount' => 'getVendorPaymentDiscountLedgerAccount',
        'carriageLedgerAccount' => 'getCarriageLedgerAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bankChargesLedgerAccount', $data ?? [], null);
        $this->setIfExists('bankInterestReceivedLedgerAccount', $data ?? [], null);
        $this->setIfExists('bankInterestChargesPaidLedgerAccount', $data ?? [], null);
        $this->setIfExists('exchangeRateGainsLedgerAccount', $data ?? [], null);
        $this->setIfExists('exchangeRateLossesLedgerAccount', $data ?? [], null);
        $this->setIfExists('salesLedgerAccount', $data ?? [], null);
        $this->setIfExists('salesDiscountLedgerAccount', $data ?? [], null);
        $this->setIfExists('purchaseLedgerAccount', $data ?? [], null);
        $this->setIfExists('purchaseDiscountLedgerAccount', $data ?? [], null);
        $this->setIfExists('productSalesLedgerAccount', $data ?? [], null);
        $this->setIfExists('productPurchaseLedgerAccount', $data ?? [], null);
        $this->setIfExists('serviceSalesLedgerAccount', $data ?? [], null);
        $this->setIfExists('servicePurchaseLedgerAccount', $data ?? [], null);
        $this->setIfExists('stockPurchaseLedgerAccount', $data ?? [], null);
        $this->setIfExists('otherReceiptLedgerAccount', $data ?? [], null);
        $this->setIfExists('otherPaymentLedgerAccount', $data ?? [], null);
        $this->setIfExists('customerReceiptDiscountLedgerAccount', $data ?? [], null);
        $this->setIfExists('vendorPaymentDiscountLedgerAccount', $data ?? [], null);
        $this->setIfExists('carriageLedgerAccount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bankChargesLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getBankChargesLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['bankChargesLedgerAccount'];
    }

    /**
     * Sets bankChargesLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $bankChargesLedgerAccount bankChargesLedgerAccount
     *
     * @return $this
     */
    public function setBankChargesLedgerAccount(?\SynergiTech\Sage\Model\Base $bankChargesLedgerAccount): static
    {
        if (is_null($bankChargesLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable bankChargesLedgerAccount cannot be null');
        }
        $this->container['bankChargesLedgerAccount'] = $bankChargesLedgerAccount;

        return $this;
    }

    /**
     * Gets bankInterestReceivedLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getBankInterestReceivedLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['bankInterestReceivedLedgerAccount'];
    }

    /**
     * Sets bankInterestReceivedLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $bankInterestReceivedLedgerAccount bankInterestReceivedLedgerAccount
     *
     * @return $this
     */
    public function setBankInterestReceivedLedgerAccount(?\SynergiTech\Sage\Model\Base $bankInterestReceivedLedgerAccount): static
    {
        if (is_null($bankInterestReceivedLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable bankInterestReceivedLedgerAccount cannot be null');
        }
        $this->container['bankInterestReceivedLedgerAccount'] = $bankInterestReceivedLedgerAccount;

        return $this;
    }

    /**
     * Gets bankInterestChargesPaidLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getBankInterestChargesPaidLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['bankInterestChargesPaidLedgerAccount'];
    }

    /**
     * Sets bankInterestChargesPaidLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $bankInterestChargesPaidLedgerAccount bankInterestChargesPaidLedgerAccount
     *
     * @return $this
     */
    public function setBankInterestChargesPaidLedgerAccount(?\SynergiTech\Sage\Model\Base $bankInterestChargesPaidLedgerAccount): static
    {
        if (is_null($bankInterestChargesPaidLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable bankInterestChargesPaidLedgerAccount cannot be null');
        }
        $this->container['bankInterestChargesPaidLedgerAccount'] = $bankInterestChargesPaidLedgerAccount;

        return $this;
    }

    /**
     * Gets exchangeRateGainsLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getExchangeRateGainsLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['exchangeRateGainsLedgerAccount'];
    }

    /**
     * Sets exchangeRateGainsLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $exchangeRateGainsLedgerAccount exchangeRateGainsLedgerAccount
     *
     * @return $this
     */
    public function setExchangeRateGainsLedgerAccount(?\SynergiTech\Sage\Model\Base $exchangeRateGainsLedgerAccount): static
    {
        if (is_null($exchangeRateGainsLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable exchangeRateGainsLedgerAccount cannot be null');
        }
        $this->container['exchangeRateGainsLedgerAccount'] = $exchangeRateGainsLedgerAccount;

        return $this;
    }

    /**
     * Gets exchangeRateLossesLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getExchangeRateLossesLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['exchangeRateLossesLedgerAccount'];
    }

    /**
     * Sets exchangeRateLossesLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $exchangeRateLossesLedgerAccount exchangeRateLossesLedgerAccount
     *
     * @return $this
     */
    public function setExchangeRateLossesLedgerAccount(?\SynergiTech\Sage\Model\Base $exchangeRateLossesLedgerAccount): static
    {
        if (is_null($exchangeRateLossesLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable exchangeRateLossesLedgerAccount cannot be null');
        }
        $this->container['exchangeRateLossesLedgerAccount'] = $exchangeRateLossesLedgerAccount;

        return $this;
    }

    /**
     * Gets salesLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getSalesLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['salesLedgerAccount'];
    }

    /**
     * Sets salesLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $salesLedgerAccount salesLedgerAccount
     *
     * @return $this
     */
    public function setSalesLedgerAccount(?\SynergiTech\Sage\Model\Base $salesLedgerAccount): static
    {
        if (is_null($salesLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable salesLedgerAccount cannot be null');
        }
        $this->container['salesLedgerAccount'] = $salesLedgerAccount;

        return $this;
    }

    /**
     * Gets salesDiscountLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getSalesDiscountLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['salesDiscountLedgerAccount'];
    }

    /**
     * Sets salesDiscountLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $salesDiscountLedgerAccount salesDiscountLedgerAccount
     *
     * @return $this
     */
    public function setSalesDiscountLedgerAccount(?\SynergiTech\Sage\Model\Base $salesDiscountLedgerAccount): static
    {
        if (is_null($salesDiscountLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable salesDiscountLedgerAccount cannot be null');
        }
        $this->container['salesDiscountLedgerAccount'] = $salesDiscountLedgerAccount;

        return $this;
    }

    /**
     * Gets purchaseLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getPurchaseLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['purchaseLedgerAccount'];
    }

    /**
     * Sets purchaseLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $purchaseLedgerAccount purchaseLedgerAccount
     *
     * @return $this
     */
    public function setPurchaseLedgerAccount(?\SynergiTech\Sage\Model\Base $purchaseLedgerAccount): static
    {
        if (is_null($purchaseLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable purchaseLedgerAccount cannot be null');
        }
        $this->container['purchaseLedgerAccount'] = $purchaseLedgerAccount;

        return $this;
    }

    /**
     * Gets purchaseDiscountLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getPurchaseDiscountLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['purchaseDiscountLedgerAccount'];
    }

    /**
     * Sets purchaseDiscountLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $purchaseDiscountLedgerAccount purchaseDiscountLedgerAccount
     *
     * @return $this
     */
    public function setPurchaseDiscountLedgerAccount(?\SynergiTech\Sage\Model\Base $purchaseDiscountLedgerAccount): static
    {
        if (is_null($purchaseDiscountLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable purchaseDiscountLedgerAccount cannot be null');
        }
        $this->container['purchaseDiscountLedgerAccount'] = $purchaseDiscountLedgerAccount;

        return $this;
    }

    /**
     * Gets productSalesLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getProductSalesLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['productSalesLedgerAccount'];
    }

    /**
     * Sets productSalesLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $productSalesLedgerAccount productSalesLedgerAccount
     *
     * @return $this
     */
    public function setProductSalesLedgerAccount(?\SynergiTech\Sage\Model\Base $productSalesLedgerAccount): static
    {
        if (is_null($productSalesLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable productSalesLedgerAccount cannot be null');
        }
        $this->container['productSalesLedgerAccount'] = $productSalesLedgerAccount;

        return $this;
    }

    /**
     * Gets productPurchaseLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getProductPurchaseLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['productPurchaseLedgerAccount'];
    }

    /**
     * Sets productPurchaseLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $productPurchaseLedgerAccount productPurchaseLedgerAccount
     *
     * @return $this
     */
    public function setProductPurchaseLedgerAccount(?\SynergiTech\Sage\Model\Base $productPurchaseLedgerAccount): static
    {
        if (is_null($productPurchaseLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable productPurchaseLedgerAccount cannot be null');
        }
        $this->container['productPurchaseLedgerAccount'] = $productPurchaseLedgerAccount;

        return $this;
    }

    /**
     * Gets serviceSalesLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getServiceSalesLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['serviceSalesLedgerAccount'];
    }

    /**
     * Sets serviceSalesLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $serviceSalesLedgerAccount serviceSalesLedgerAccount
     *
     * @return $this
     */
    public function setServiceSalesLedgerAccount(?\SynergiTech\Sage\Model\Base $serviceSalesLedgerAccount): static
    {
        if (is_null($serviceSalesLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable serviceSalesLedgerAccount cannot be null');
        }
        $this->container['serviceSalesLedgerAccount'] = $serviceSalesLedgerAccount;

        return $this;
    }

    /**
     * Gets servicePurchaseLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getServicePurchaseLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['servicePurchaseLedgerAccount'];
    }

    /**
     * Sets servicePurchaseLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $servicePurchaseLedgerAccount servicePurchaseLedgerAccount
     *
     * @return $this
     */
    public function setServicePurchaseLedgerAccount(?\SynergiTech\Sage\Model\Base $servicePurchaseLedgerAccount): static
    {
        if (is_null($servicePurchaseLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable servicePurchaseLedgerAccount cannot be null');
        }
        $this->container['servicePurchaseLedgerAccount'] = $servicePurchaseLedgerAccount;

        return $this;
    }

    /**
     * Gets stockPurchaseLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getStockPurchaseLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['stockPurchaseLedgerAccount'];
    }

    /**
     * Sets stockPurchaseLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $stockPurchaseLedgerAccount stockPurchaseLedgerAccount
     *
     * @return $this
     */
    public function setStockPurchaseLedgerAccount(?\SynergiTech\Sage\Model\Base $stockPurchaseLedgerAccount): static
    {
        if (is_null($stockPurchaseLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable stockPurchaseLedgerAccount cannot be null');
        }
        $this->container['stockPurchaseLedgerAccount'] = $stockPurchaseLedgerAccount;

        return $this;
    }

    /**
     * Gets otherReceiptLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getOtherReceiptLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['otherReceiptLedgerAccount'];
    }

    /**
     * Sets otherReceiptLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $otherReceiptLedgerAccount otherReceiptLedgerAccount
     *
     * @return $this
     */
    public function setOtherReceiptLedgerAccount(?\SynergiTech\Sage\Model\Base $otherReceiptLedgerAccount): static
    {
        if (is_null($otherReceiptLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable otherReceiptLedgerAccount cannot be null');
        }
        $this->container['otherReceiptLedgerAccount'] = $otherReceiptLedgerAccount;

        return $this;
    }

    /**
     * Gets otherPaymentLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getOtherPaymentLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['otherPaymentLedgerAccount'];
    }

    /**
     * Sets otherPaymentLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $otherPaymentLedgerAccount otherPaymentLedgerAccount
     *
     * @return $this
     */
    public function setOtherPaymentLedgerAccount(?\SynergiTech\Sage\Model\Base $otherPaymentLedgerAccount): static
    {
        if (is_null($otherPaymentLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable otherPaymentLedgerAccount cannot be null');
        }
        $this->container['otherPaymentLedgerAccount'] = $otherPaymentLedgerAccount;

        return $this;
    }

    /**
     * Gets customerReceiptDiscountLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getCustomerReceiptDiscountLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['customerReceiptDiscountLedgerAccount'];
    }

    /**
     * Sets customerReceiptDiscountLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $customerReceiptDiscountLedgerAccount customerReceiptDiscountLedgerAccount
     *
     * @return $this
     */
    public function setCustomerReceiptDiscountLedgerAccount(?\SynergiTech\Sage\Model\Base $customerReceiptDiscountLedgerAccount): static
    {
        if (is_null($customerReceiptDiscountLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable customerReceiptDiscountLedgerAccount cannot be null');
        }
        $this->container['customerReceiptDiscountLedgerAccount'] = $customerReceiptDiscountLedgerAccount;

        return $this;
    }

    /**
     * Gets vendorPaymentDiscountLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getVendorPaymentDiscountLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['vendorPaymentDiscountLedgerAccount'];
    }

    /**
     * Sets vendorPaymentDiscountLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $vendorPaymentDiscountLedgerAccount vendorPaymentDiscountLedgerAccount
     *
     * @return $this
     */
    public function setVendorPaymentDiscountLedgerAccount(?\SynergiTech\Sage\Model\Base $vendorPaymentDiscountLedgerAccount): static
    {
        if (is_null($vendorPaymentDiscountLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable vendorPaymentDiscountLedgerAccount cannot be null');
        }
        $this->container['vendorPaymentDiscountLedgerAccount'] = $vendorPaymentDiscountLedgerAccount;

        return $this;
    }

    /**
     * Gets carriageLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getCarriageLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['carriageLedgerAccount'];
    }

    /**
     * Sets carriageLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $carriageLedgerAccount carriageLedgerAccount
     *
     * @return $this
     */
    public function setCarriageLedgerAccount(?\SynergiTech\Sage\Model\Base $carriageLedgerAccount): static
    {
        if (is_null($carriageLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable carriageLedgerAccount cannot be null');
        }
        $this->container['carriageLedgerAccount'] = $carriageLedgerAccount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


