<?php
/**
 * BankAccount
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * BankAccount Class Doc Comment
 *
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Standard: ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª * Accounting Start: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any of the following roles in the area &#x60;Bank&#x60;: Full Access
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class BankAccount implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'BankAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'legacyId' => 'int',
        'id' => 'string',
        'displayedAs' => 'string',
        'path' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'deletedAt' => '\DateTime',
        'bankAccountDetails' => '\SynergiTech\Sage\Model\BankAccountDetails',
        'ledgerAccount' => '\SynergiTech\Sage\Model\Base',
        'bankAccountType' => '\SynergiTech\Sage\Model\Base',
        'balance' => 'float',
        'mainAddress' => '\SynergiTech\Sage\Model\Address',
        'mainContactPerson' => '\SynergiTech\Sage\Model\BankAccountContact',
        'nominalCode' => 'int',
        'editable' => 'bool',
        'deletable' => 'bool',
        'journalCode' => '\SynergiTech\Sage\Model\JournalCode',
        'defaultPaymentMethod' => '\SynergiTech\Sage\Model\Base',
        'gifiCode' => 'int',
        'isActive' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'legacyId' => 'int32',
        'id' => null,
        'displayedAs' => null,
        'path' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'deletedAt' => 'date-time',
        'bankAccountDetails' => null,
        'ledgerAccount' => null,
        'bankAccountType' => null,
        'balance' => 'double',
        'mainAddress' => null,
        'mainContactPerson' => null,
        'nominalCode' => 'int32',
        'editable' => null,
        'deletable' => null,
        'journalCode' => null,
        'defaultPaymentMethod' => null,
        'gifiCode' => 'int32',
        'isActive' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'legacyId' => false,
        'id' => false,
        'displayedAs' => false,
        'path' => false,
        'createdAt' => false,
        'updatedAt' => false,
        'deletedAt' => false,
        'bankAccountDetails' => false,
        'ledgerAccount' => false,
        'bankAccountType' => false,
        'balance' => false,
        'mainAddress' => false,
        'mainContactPerson' => false,
        'nominalCode' => false,
        'editable' => false,
        'deletable' => false,
        'journalCode' => false,
        'defaultPaymentMethod' => false,
        'gifiCode' => false,
        'isActive' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'legacyId' => 'legacy_id',
        'id' => 'id',
        'displayedAs' => 'displayed_as',
        'path' => '$path',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'deletedAt' => 'deleted_at',
        'bankAccountDetails' => 'bank_account_details',
        'ledgerAccount' => 'ledger_account',
        'bankAccountType' => 'bank_account_type',
        'balance' => 'balance',
        'mainAddress' => 'main_address',
        'mainContactPerson' => 'main_contact_person',
        'nominalCode' => 'nominal_code',
        'editable' => 'editable',
        'deletable' => 'deletable',
        'journalCode' => 'journal_code',
        'defaultPaymentMethod' => 'default_payment_method',
        'gifiCode' => 'gifi_code',
        'isActive' => 'is_active'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'legacyId' => 'setLegacyId',
        'id' => 'setId',
        'displayedAs' => 'setDisplayedAs',
        'path' => 'setPath',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'deletedAt' => 'setDeletedAt',
        'bankAccountDetails' => 'setBankAccountDetails',
        'ledgerAccount' => 'setLedgerAccount',
        'bankAccountType' => 'setBankAccountType',
        'balance' => 'setBalance',
        'mainAddress' => 'setMainAddress',
        'mainContactPerson' => 'setMainContactPerson',
        'nominalCode' => 'setNominalCode',
        'editable' => 'setEditable',
        'deletable' => 'setDeletable',
        'journalCode' => 'setJournalCode',
        'defaultPaymentMethod' => 'setDefaultPaymentMethod',
        'gifiCode' => 'setGifiCode',
        'isActive' => 'setIsActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'legacyId' => 'getLegacyId',
        'id' => 'getId',
        'displayedAs' => 'getDisplayedAs',
        'path' => 'getPath',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'deletedAt' => 'getDeletedAt',
        'bankAccountDetails' => 'getBankAccountDetails',
        'ledgerAccount' => 'getLedgerAccount',
        'bankAccountType' => 'getBankAccountType',
        'balance' => 'getBalance',
        'mainAddress' => 'getMainAddress',
        'mainContactPerson' => 'getMainContactPerson',
        'nominalCode' => 'getNominalCode',
        'editable' => 'getEditable',
        'deletable' => 'getDeletable',
        'journalCode' => 'getJournalCode',
        'defaultPaymentMethod' => 'getDefaultPaymentMethod',
        'gifiCode' => 'getGifiCode',
        'isActive' => 'getIsActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('legacyId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('displayedAs', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('deletedAt', $data ?? [], null);
        $this->setIfExists('bankAccountDetails', $data ?? [], null);
        $this->setIfExists('ledgerAccount', $data ?? [], null);
        $this->setIfExists('bankAccountType', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('mainAddress', $data ?? [], null);
        $this->setIfExists('mainContactPerson', $data ?? [], null);
        $this->setIfExists('nominalCode', $data ?? [], null);
        $this->setIfExists('editable', $data ?? [], null);
        $this->setIfExists('deletable', $data ?? [], null);
        $this->setIfExists('journalCode', $data ?? [], null);
        $this->setIfExists('defaultPaymentMethod', $data ?? [], null);
        $this->setIfExists('gifiCode', $data ?? [], null);
        $this->setIfExists('isActive', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacyId
     *
     * @return int|null
     */
    public function getLegacyId(): ?int
    {
        return $this->container['legacyId'];
    }

    /**
     * Sets legacyId
     *
     * @param int|null $legacyId The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId(?int $legacyId): static
    {
        if (is_null($legacyId)) {
            throw new InvalidArgumentException('non-nullable legacyId cannot be null');
        }
        $this->container['legacyId'] = $legacyId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayedAs
     *
     * @return string|null
     */
    public function getDisplayedAs(): ?string
    {
        return $this->container['displayedAs'];
    }

    /**
     * Sets displayedAs
     *
     * @param string|null $displayedAs The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs(?string $displayedAs): static
    {
        if (is_null($displayedAs)) {
            throw new InvalidArgumentException('non-nullable displayedAs cannot be null');
        }
        $this->container['displayedAs'] = $displayedAs;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath(): ?string
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The API path for the resource
     *
     * @return $this
     */
    public function setPath(?string $path): static
    {
        if (is_null($path)) {
            throw new InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt The datetime when the item was created
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return \DateTime|null
     */
    public function getDeletedAt(): ?\DateTime
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param \DateTime|null $deletedAt The datetime when the item was deleted
     *
     * @return $this
     */
    public function setDeletedAt(?\DateTime $deletedAt): static
    {
        if (is_null($deletedAt)) {
            throw new InvalidArgumentException('non-nullable deletedAt cannot be null');
        }
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }

    /**
     * Gets bankAccountDetails
     *
     * @return \SynergiTech\Sage\Model\BankAccountDetails|null
     */
    public function getBankAccountDetails(): ?\SynergiTech\Sage\Model\BankAccountDetails
    {
        return $this->container['bankAccountDetails'];
    }

    /**
     * Sets bankAccountDetails
     *
     * @param \SynergiTech\Sage\Model\BankAccountDetails|null $bankAccountDetails bankAccountDetails
     *
     * @return $this
     */
    public function setBankAccountDetails(?\SynergiTech\Sage\Model\BankAccountDetails $bankAccountDetails): static
    {
        if (is_null($bankAccountDetails)) {
            throw new InvalidArgumentException('non-nullable bankAccountDetails cannot be null');
        }
        $this->container['bankAccountDetails'] = $bankAccountDetails;

        return $this;
    }

    /**
     * Gets ledgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['ledgerAccount'];
    }

    /**
     * Sets ledgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $ledgerAccount ledgerAccount
     *
     * @return $this
     */
    public function setLedgerAccount(?\SynergiTech\Sage\Model\Base $ledgerAccount): static
    {
        if (is_null($ledgerAccount)) {
            throw new InvalidArgumentException('non-nullable ledgerAccount cannot be null');
        }
        $this->container['ledgerAccount'] = $ledgerAccount;

        return $this;
    }

    /**
     * Gets bankAccountType
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getBankAccountType(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['bankAccountType'];
    }

    /**
     * Sets bankAccountType
     *
     * @param \SynergiTech\Sage\Model\Base|null $bankAccountType bankAccountType
     *
     * @return $this
     */
    public function setBankAccountType(?\SynergiTech\Sage\Model\Base $bankAccountType): static
    {
        if (is_null($bankAccountType)) {
            throw new InvalidArgumentException('non-nullable bankAccountType cannot be null');
        }
        $this->container['bankAccountType'] = $bankAccountType;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance(): ?float
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance The bank account balance
     *
     * @return $this
     */
    public function setBalance(?float $balance): static
    {
        if (is_null($balance)) {
            throw new InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets mainAddress
     *
     * @return \SynergiTech\Sage\Model\Address|null
     */
    public function getMainAddress(): ?\SynergiTech\Sage\Model\Address
    {
        return $this->container['mainAddress'];
    }

    /**
     * Sets mainAddress
     *
     * @param \SynergiTech\Sage\Model\Address|null $mainAddress mainAddress
     *
     * @return $this
     */
    public function setMainAddress(?\SynergiTech\Sage\Model\Address $mainAddress): static
    {
        if (is_null($mainAddress)) {
            throw new InvalidArgumentException('non-nullable mainAddress cannot be null');
        }
        $this->container['mainAddress'] = $mainAddress;

        return $this;
    }

    /**
     * Gets mainContactPerson
     *
     * @return \SynergiTech\Sage\Model\BankAccountContact|null
     */
    public function getMainContactPerson(): ?\SynergiTech\Sage\Model\BankAccountContact
    {
        return $this->container['mainContactPerson'];
    }

    /**
     * Sets mainContactPerson
     *
     * @param \SynergiTech\Sage\Model\BankAccountContact|null $mainContactPerson mainContactPerson
     *
     * @return $this
     */
    public function setMainContactPerson(?\SynergiTech\Sage\Model\BankAccountContact $mainContactPerson): static
    {
        if (is_null($mainContactPerson)) {
            throw new InvalidArgumentException('non-nullable mainContactPerson cannot be null');
        }
        $this->container['mainContactPerson'] = $mainContactPerson;

        return $this;
    }

    /**
     * Gets nominalCode
     *
     * @return int|null
     */
    public function getNominalCode(): ?int
    {
        return $this->container['nominalCode'];
    }

    /**
     * Sets nominalCode
     *
     * @param int|null $nominalCode The nominal code of the bank account
     *
     * @return $this
     */
    public function setNominalCode(?int $nominalCode): static
    {
        if (is_null($nominalCode)) {
            throw new InvalidArgumentException('non-nullable nominalCode cannot be null');
        }
        $this->container['nominalCode'] = $nominalCode;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool|null
     */
    public function getEditable(): ?bool
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool|null $editable Indicates whether or not the bank account can be edited
     *
     * @return $this
     */
    public function setEditable(?bool $editable): static
    {
        if (is_null($editable)) {
            throw new InvalidArgumentException('non-nullable editable cannot be null');
        }
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets deletable
     *
     * @return bool|null
     */
    public function getDeletable(): ?bool
    {
        return $this->container['deletable'];
    }

    /**
     * Sets deletable
     *
     * @param bool|null $deletable Indicates whether or not the bank account can be deleted
     *
     * @return $this
     */
    public function setDeletable(?bool $deletable): static
    {
        if (is_null($deletable)) {
            throw new InvalidArgumentException('non-nullable deletable cannot be null');
        }
        $this->container['deletable'] = $deletable;

        return $this;
    }

    /**
     * Gets journalCode
     *
     * @return \SynergiTech\Sage\Model\JournalCode|null
     */
    public function getJournalCode(): ?\SynergiTech\Sage\Model\JournalCode
    {
        return $this->container['journalCode'];
    }

    /**
     * Sets journalCode
     *
     * @param \SynergiTech\Sage\Model\JournalCode|null $journalCode journalCode
     *
     * @return $this
     */
    public function setJournalCode(?\SynergiTech\Sage\Model\JournalCode $journalCode): static
    {
        if (is_null($journalCode)) {
            throw new InvalidArgumentException('non-nullable journalCode cannot be null');
        }
        $this->container['journalCode'] = $journalCode;

        return $this;
    }

    /**
     * Gets defaultPaymentMethod
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getDefaultPaymentMethod(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['defaultPaymentMethod'];
    }

    /**
     * Sets defaultPaymentMethod
     *
     * @param \SynergiTech\Sage\Model\Base|null $defaultPaymentMethod defaultPaymentMethod
     *
     * @return $this
     */
    public function setDefaultPaymentMethod(?\SynergiTech\Sage\Model\Base $defaultPaymentMethod): static
    {
        if (is_null($defaultPaymentMethod)) {
            throw new InvalidArgumentException('non-nullable defaultPaymentMethod cannot be null');
        }
        $this->container['defaultPaymentMethod'] = $defaultPaymentMethod;

        return $this;
    }

    /**
     * Gets gifiCode
     *
     * @return int|null
     */
    public function getGifiCode(): ?int
    {
        return $this->container['gifiCode'];
    }

    /**
     * Sets gifiCode
     *
     * @param int|null $gifiCode The GIFI code of the bank ledger account'  GIFI is short for The General Index of Financial Information and it lets the CRA validate tax information electronically instead of manually. Information from financial statements is categorized under the appropriate 4-digit-long GIFI code and entered on corporate income tax returns. GIFI is needed when filing a T2 income tax return.  _Canada only_
     *
     * @return $this
     */
    public function setGifiCode(?int $gifiCode): static
    {
        if (is_null($gifiCode)) {
            throw new InvalidArgumentException('non-nullable gifiCode cannot be null');
        }
        $this->container['gifiCode'] = $gifiCode;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool|null
     */
    public function getIsActive(): ?bool
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool|null $isActive Indicates whether the Bank account is active or inactive.
     *
     * @return $this
     */
    public function setIsActive(?bool $isActive): static
    {
        if (is_null($isActive)) {
            throw new InvalidArgumentException('non-nullable isActive cannot be null');
        }
        $this->container['isActive'] = $isActive;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


