<?php
/**
 * PostAttachmentsAttachment
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage Business Cloud Accounting - Accounts
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 3.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * PostAttachmentsAttachment Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PostAttachmentsAttachment implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'postAttachments_attachment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'file' => 'string',
        'fileName' => 'string',
        'mimeType' => 'string',
        'description' => 'string',
        'fileExtension' => 'string',
        'transactionId' => 'string',
        'fileSize' => 'int',
        'attachmentContextTypeId' => 'string',
        'attachmentContextId' => 'string',
        'isPublic' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'file' => null,
        'fileName' => null,
        'mimeType' => null,
        'description' => null,
        'fileExtension' => null,
        'transactionId' => null,
        'fileSize' => 'int32',
        'attachmentContextTypeId' => null,
        'attachmentContextId' => null,
        'isPublic' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'file' => false,
        'fileName' => false,
        'mimeType' => false,
        'description' => false,
        'fileExtension' => false,
        'transactionId' => false,
        'fileSize' => false,
        'attachmentContextTypeId' => false,
        'attachmentContextId' => false,
        'isPublic' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'file' => 'file',
        'fileName' => 'file_name',
        'mimeType' => 'mime_type',
        'description' => 'description',
        'fileExtension' => 'file_extension',
        'transactionId' => 'transaction_id',
        'fileSize' => 'file_size',
        'attachmentContextTypeId' => 'attachment_context_type_id',
        'attachmentContextId' => 'attachment_context_id',
        'isPublic' => 'is_public'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'file' => 'setFile',
        'fileName' => 'setFileName',
        'mimeType' => 'setMimeType',
        'description' => 'setDescription',
        'fileExtension' => 'setFileExtension',
        'transactionId' => 'setTransactionId',
        'fileSize' => 'setFileSize',
        'attachmentContextTypeId' => 'setAttachmentContextTypeId',
        'attachmentContextId' => 'setAttachmentContextId',
        'isPublic' => 'setIsPublic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'file' => 'getFile',
        'fileName' => 'getFileName',
        'mimeType' => 'getMimeType',
        'description' => 'getDescription',
        'fileExtension' => 'getFileExtension',
        'transactionId' => 'getTransactionId',
        'fileSize' => 'getFileSize',
        'attachmentContextTypeId' => 'getAttachmentContextTypeId',
        'attachmentContextId' => 'getAttachmentContextId',
        'isPublic' => 'getIsPublic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('file', $data ?? [], null);
        $this->setIfExists('fileName', $data ?? [], null);
        $this->setIfExists('mimeType', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('fileExtension', $data ?? [], null);
        $this->setIfExists('transactionId', $data ?? [], null);
        $this->setIfExists('fileSize', $data ?? [], null);
        $this->setIfExists('attachmentContextTypeId', $data ?? [], null);
        $this->setIfExists('attachmentContextId', $data ?? [], null);
        $this->setIfExists('isPublic', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['file'] === null) {
            $invalidProperties[] = "'file' can't be null";
        }
        if ($this->container['fileName'] === null) {
            $invalidProperties[] = "'fileName' can't be null";
        }
        if ($this->container['mimeType'] === null) {
            $invalidProperties[] = "'mimeType' can't be null";
        }
        if (!is_null($this->container['fileSize']) && ($this->container['fileSize'] > 2621440)) {
            $invalidProperties[] = "invalid value for 'fileSize', must be smaller than or equal to 2621440.";
        }

        if (!is_null($this->container['fileSize']) && ($this->container['fileSize'] < 0)) {
            $invalidProperties[] = "invalid value for 'fileSize', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file
     *
     * @return string
     */
    public function getFile(): string
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string $file The base64 encoded representation of the file
     *
     * @return $this
     */
    public function setFile(string $file): static
    {
        if (is_null($file)) {
            throw new InvalidArgumentException('non-nullable file cannot be null');
        }
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets fileName
     *
     * @return string
     */
    public function getFileName(): string
    {
        return $this->container['fileName'];
    }

    /**
     * Sets fileName
     *
     * @param string $fileName The file name of the attachment
     *
     * @return $this
     */
    public function setFileName(string $fileName): static
    {
        if (is_null($fileName)) {
            throw new InvalidArgumentException('non-nullable fileName cannot be null');
        }
        $this->container['fileName'] = $fileName;

        return $this;
    }

    /**
     * Gets mimeType
     *
     * @return string
     */
    public function getMimeType(): string
    {
        return $this->container['mimeType'];
    }

    /**
     * Sets mimeType
     *
     * @param string $mimeType The mime type of the attachment
     *
     * @return $this
     */
    public function setMimeType(string $mimeType): static
    {
        if (is_null($mimeType)) {
            throw new InvalidArgumentException('non-nullable mimeType cannot be null');
        }
        $this->container['mimeType'] = $mimeType;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the attachment
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets fileExtension
     *
     * @return string|null
     */
    public function getFileExtension(): ?string
    {
        return $this->container['fileExtension'];
    }

    /**
     * Sets fileExtension
     *
     * @param string|null $fileExtension The file extension of the attachment
     *
     * @return $this
     */
    public function setFileExtension(?string $fileExtension): static
    {
        if (is_null($fileExtension)) {
            throw new InvalidArgumentException('non-nullable fileExtension cannot be null');
        }
        $this->container['fileExtension'] = $fileExtension;

        return $this;
    }

    /**
     * Gets transactionId
     *
     * @return string|null
     */
    public function getTransactionId(): ?string
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     *
     * @param string|null $transactionId The ID of the Transaction.
     *
     * @return $this
     */
    public function setTransactionId(?string $transactionId): static
    {
        if (is_null($transactionId)) {
            throw new InvalidArgumentException('non-nullable transactionId cannot be null');
        }
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets fileSize
     *
     * @return int|null
     */
    public function getFileSize(): ?int
    {
        return $this->container['fileSize'];
    }

    /**
     * Sets fileSize
     *
     * @param int|null $fileSize The file size of the attachment in Bytes
     *
     * @return $this
     */
    public function setFileSize(?int $fileSize): static
    {
        if (is_null($fileSize)) {
            throw new InvalidArgumentException('non-nullable fileSize cannot be null');
        }

        if (($fileSize > 2621440)) {
            throw new InvalidArgumentException('invalid value for $fileSize when calling PostAttachmentsAttachment., must be smaller than or equal to 2621440.');
        }
        if (($fileSize < 0)) {
            throw new InvalidArgumentException('invalid value for $fileSize when calling PostAttachmentsAttachment., must be bigger than or equal to 0.');
        }

        $this->container['fileSize'] = $fileSize;

        return $this;
    }

    /**
     * Gets attachmentContextTypeId
     *
     * @return string|null
     */
    public function getAttachmentContextTypeId(): ?string
    {
        return $this->container['attachmentContextTypeId'];
    }

    /**
     * Sets attachmentContextTypeId
     *
     * @param string|null $attachmentContextTypeId The ID of the Attachment Context Type.
     *
     * @return $this
     */
    public function setAttachmentContextTypeId(?string $attachmentContextTypeId): static
    {
        if (is_null($attachmentContextTypeId)) {
            throw new InvalidArgumentException('non-nullable attachmentContextTypeId cannot be null');
        }
        $this->container['attachmentContextTypeId'] = $attachmentContextTypeId;

        return $this;
    }

    /**
     * Gets attachmentContextId
     *
     * @return string|null
     */
    public function getAttachmentContextId(): ?string
    {
        return $this->container['attachmentContextId'];
    }

    /**
     * Sets attachmentContextId
     *
     * @param string|null $attachmentContextId The ID of the Attachment Context.
     *
     * @return $this
     */
    public function setAttachmentContextId(?string $attachmentContextId): static
    {
        if (is_null($attachmentContextId)) {
            throw new InvalidArgumentException('non-nullable attachmentContextId cannot be null');
        }
        $this->container['attachmentContextId'] = $attachmentContextId;

        return $this;
    }

    /**
     * Gets isPublic
     *
     * @return bool|null
     */
    public function getIsPublic(): ?bool
    {
        return $this->container['isPublic'];
    }

    /**
     * Sets isPublic
     *
     * @param bool|null $isPublic Flag to determine whether the attachment should be visible to customers
     *
     * @return $this
     */
    public function setIsPublic(?bool $isPublic): static
    {
        if (is_null($isPublic)) {
            throw new InvalidArgumentException('non-nullable isPublic cannot be null');
        }
        $this->container['isPublic'] = $isPublic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


