<?php
/**
 * ArtefactDetailedTaxAnalysisBreakdown
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * ArtefactDetailedTaxAnalysisBreakdown Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ArtefactDetailedTaxAnalysisBreakdown implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ArtefactDetailedTaxAnalysisBreakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'taxRate' => '\SynergiTech\Sage\Model\TaxRate',
        'name' => 'string',
        'percentage' => 'float',
        'netAmount' => 'float',
        'taxAmount' => 'float',
        'retailTaxAmount' => 'float',
        'totalAmount' => 'float',
        'goodsAmount' => 'float',
        'servicesAmount' => 'float',
        'baseCurrencyNetAmount' => 'float',
        'baseCurrencyTaxAmount' => 'float',
        'baseCurrencyTotalAmount' => 'float',
        'baseCurrencyGoodsAmount' => 'float',
        'baseCurrencyServicesAmount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'taxRate' => null,
        'name' => null,
        'percentage' => 'double',
        'netAmount' => 'double',
        'taxAmount' => 'double',
        'retailTaxAmount' => 'double',
        'totalAmount' => 'double',
        'goodsAmount' => 'double',
        'servicesAmount' => 'double',
        'baseCurrencyNetAmount' => 'double',
        'baseCurrencyTaxAmount' => 'double',
        'baseCurrencyTotalAmount' => 'double',
        'baseCurrencyGoodsAmount' => 'double',
        'baseCurrencyServicesAmount' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'taxRate' => false,
        'name' => false,
        'percentage' => false,
        'netAmount' => false,
        'taxAmount' => false,
        'retailTaxAmount' => false,
        'totalAmount' => false,
        'goodsAmount' => false,
        'servicesAmount' => false,
        'baseCurrencyNetAmount' => false,
        'baseCurrencyTaxAmount' => false,
        'baseCurrencyTotalAmount' => false,
        'baseCurrencyGoodsAmount' => false,
        'baseCurrencyServicesAmount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'taxRate' => 'tax_rate',
        'name' => 'name',
        'percentage' => 'percentage',
        'netAmount' => 'net_amount',
        'taxAmount' => 'tax_amount',
        'retailTaxAmount' => 'retail_tax_amount',
        'totalAmount' => 'total_amount',
        'goodsAmount' => 'goods_amount',
        'servicesAmount' => 'services_amount',
        'baseCurrencyNetAmount' => 'base_currency_net_amount',
        'baseCurrencyTaxAmount' => 'base_currency_tax_amount',
        'baseCurrencyTotalAmount' => 'base_currency_total_amount',
        'baseCurrencyGoodsAmount' => 'base_currency_goods_amount',
        'baseCurrencyServicesAmount' => 'base_currency_services_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'taxRate' => 'setTaxRate',
        'name' => 'setName',
        'percentage' => 'setPercentage',
        'netAmount' => 'setNetAmount',
        'taxAmount' => 'setTaxAmount',
        'retailTaxAmount' => 'setRetailTaxAmount',
        'totalAmount' => 'setTotalAmount',
        'goodsAmount' => 'setGoodsAmount',
        'servicesAmount' => 'setServicesAmount',
        'baseCurrencyNetAmount' => 'setBaseCurrencyNetAmount',
        'baseCurrencyTaxAmount' => 'setBaseCurrencyTaxAmount',
        'baseCurrencyTotalAmount' => 'setBaseCurrencyTotalAmount',
        'baseCurrencyGoodsAmount' => 'setBaseCurrencyGoodsAmount',
        'baseCurrencyServicesAmount' => 'setBaseCurrencyServicesAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'taxRate' => 'getTaxRate',
        'name' => 'getName',
        'percentage' => 'getPercentage',
        'netAmount' => 'getNetAmount',
        'taxAmount' => 'getTaxAmount',
        'retailTaxAmount' => 'getRetailTaxAmount',
        'totalAmount' => 'getTotalAmount',
        'goodsAmount' => 'getGoodsAmount',
        'servicesAmount' => 'getServicesAmount',
        'baseCurrencyNetAmount' => 'getBaseCurrencyNetAmount',
        'baseCurrencyTaxAmount' => 'getBaseCurrencyTaxAmount',
        'baseCurrencyTotalAmount' => 'getBaseCurrencyTotalAmount',
        'baseCurrencyGoodsAmount' => 'getBaseCurrencyGoodsAmount',
        'baseCurrencyServicesAmount' => 'getBaseCurrencyServicesAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('taxRate', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('percentage', $data ?? [], null);
        $this->setIfExists('netAmount', $data ?? [], null);
        $this->setIfExists('taxAmount', $data ?? [], null);
        $this->setIfExists('retailTaxAmount', $data ?? [], null);
        $this->setIfExists('totalAmount', $data ?? [], null);
        $this->setIfExists('goodsAmount', $data ?? [], null);
        $this->setIfExists('servicesAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyNetAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTaxAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyGoodsAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyServicesAmount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets taxRate
     *
     * @return \SynergiTech\Sage\Model\TaxRate|null
     */
    public function getTaxRate(): ?\SynergiTech\Sage\Model\TaxRate
    {
        return $this->container['taxRate'];
    }

    /**
     * Sets taxRate
     *
     * @param \SynergiTech\Sage\Model\TaxRate|null $taxRate taxRate
     *
     * @return $this
     */
    public function setTaxRate(?\SynergiTech\Sage\Model\TaxRate $taxRate): static
    {
        if (is_null($taxRate)) {
            throw new InvalidArgumentException('non-nullable taxRate cannot be null');
        }
        $this->container['taxRate'] = $taxRate;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The tax rate name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets percentage
     *
     * @return float|null
     */
    public function getPercentage(): ?float
    {
        return $this->container['percentage'];
    }

    /**
     * Sets percentage
     *
     * @param float|null $percentage The tax rate percentage
     *
     * @return $this
     */
    public function setPercentage(?float $percentage): static
    {
        if (is_null($percentage)) {
            throw new InvalidArgumentException('non-nullable percentage cannot be null');
        }
        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets netAmount
     *
     * @return float|null
     */
    public function getNetAmount(): ?float
    {
        return $this->container['netAmount'];
    }

    /**
     * Sets netAmount
     *
     * @param float|null $netAmount The net amount for the tax rate
     *
     * @return $this
     */
    public function setNetAmount(?float $netAmount): static
    {
        if (is_null($netAmount)) {
            throw new InvalidArgumentException('non-nullable netAmount cannot be null');
        }
        $this->container['netAmount'] = $netAmount;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return float|null
     */
    public function getTaxAmount(): ?float
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param float|null $taxAmount The tax amount for the tax rate
     *
     * @return $this
     */
    public function setTaxAmount(?float $taxAmount): static
    {
        if (is_null($taxAmount)) {
            throw new InvalidArgumentException('non-nullable taxAmount cannot be null');
        }
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets retailTaxAmount
     *
     * @return float|null
     */
    public function getRetailTaxAmount(): ?float
    {
        return $this->container['retailTaxAmount'];
    }

    /**
     * Sets retailTaxAmount
     *
     * @param float|null $retailTaxAmount The retailer tax amount for the tax rate
     *
     * @return $this
     */
    public function setRetailTaxAmount(?float $retailTaxAmount): static
    {
        if (is_null($retailTaxAmount)) {
            throw new InvalidArgumentException('non-nullable retailTaxAmount cannot be null');
        }
        $this->container['retailTaxAmount'] = $retailTaxAmount;

        return $this;
    }

    /**
     * Gets totalAmount
     *
     * @return float|null
     */
    public function getTotalAmount(): ?float
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     *
     * @param float|null $totalAmount The total amount for the tax rate
     *
     * @return $this
     */
    public function setTotalAmount(?float $totalAmount): static
    {
        if (is_null($totalAmount)) {
            throw new InvalidArgumentException('non-nullable totalAmount cannot be null');
        }
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets goodsAmount
     *
     * @return float|null
     */
    public function getGoodsAmount(): ?float
    {
        return $this->container['goodsAmount'];
    }

    /**
     * Sets goodsAmount
     *
     * @param float|null $goodsAmount The total amount for the tax rate relating to goods
     *
     * @return $this
     */
    public function setGoodsAmount(?float $goodsAmount): static
    {
        if (is_null($goodsAmount)) {
            throw new InvalidArgumentException('non-nullable goodsAmount cannot be null');
        }
        $this->container['goodsAmount'] = $goodsAmount;

        return $this;
    }

    /**
     * Gets servicesAmount
     *
     * @return float|null
     */
    public function getServicesAmount(): ?float
    {
        return $this->container['servicesAmount'];
    }

    /**
     * Sets servicesAmount
     *
     * @param float|null $servicesAmount The total amount for the tax rate relating to services
     *
     * @return $this
     */
    public function setServicesAmount(?float $servicesAmount): static
    {
        if (is_null($servicesAmount)) {
            throw new InvalidArgumentException('non-nullable servicesAmount cannot be null');
        }
        $this->container['servicesAmount'] = $servicesAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyNetAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyNetAmount(): ?float
    {
        return $this->container['baseCurrencyNetAmount'];
    }

    /**
     * Sets baseCurrencyNetAmount
     *
     * @param float|null $baseCurrencyNetAmount The base currency net amount for the tax rate
     *
     * @return $this
     */
    public function setBaseCurrencyNetAmount(?float $baseCurrencyNetAmount): static
    {
        if (is_null($baseCurrencyNetAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyNetAmount cannot be null');
        }
        $this->container['baseCurrencyNetAmount'] = $baseCurrencyNetAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTaxAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTaxAmount(): ?float
    {
        return $this->container['baseCurrencyTaxAmount'];
    }

    /**
     * Sets baseCurrencyTaxAmount
     *
     * @param float|null $baseCurrencyTaxAmount The base currency tax amount for the tax rate
     *
     * @return $this
     */
    public function setBaseCurrencyTaxAmount(?float $baseCurrencyTaxAmount): static
    {
        if (is_null($baseCurrencyTaxAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTaxAmount cannot be null');
        }
        $this->container['baseCurrencyTaxAmount'] = $baseCurrencyTaxAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalAmount(): ?float
    {
        return $this->container['baseCurrencyTotalAmount'];
    }

    /**
     * Sets baseCurrencyTotalAmount
     *
     * @param float|null $baseCurrencyTotalAmount The base currency total amount for the tax rate
     *
     * @return $this
     */
    public function setBaseCurrencyTotalAmount(?float $baseCurrencyTotalAmount): static
    {
        if (is_null($baseCurrencyTotalAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalAmount cannot be null');
        }
        $this->container['baseCurrencyTotalAmount'] = $baseCurrencyTotalAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyGoodsAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyGoodsAmount(): ?float
    {
        return $this->container['baseCurrencyGoodsAmount'];
    }

    /**
     * Sets baseCurrencyGoodsAmount
     *
     * @param float|null $baseCurrencyGoodsAmount The total base currency amount for the tax rate relating to goods
     *
     * @return $this
     */
    public function setBaseCurrencyGoodsAmount(?float $baseCurrencyGoodsAmount): static
    {
        if (is_null($baseCurrencyGoodsAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyGoodsAmount cannot be null');
        }
        $this->container['baseCurrencyGoodsAmount'] = $baseCurrencyGoodsAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyServicesAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyServicesAmount(): ?float
    {
        return $this->container['baseCurrencyServicesAmount'];
    }

    /**
     * Sets baseCurrencyServicesAmount
     *
     * @param float|null $baseCurrencyServicesAmount The total base currency amount for the tax rate relating to services
     *
     * @return $this
     */
    public function setBaseCurrencyServicesAmount(?float $baseCurrencyServicesAmount): static
    {
        if (is_null($baseCurrencyServicesAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyServicesAmount cannot be null');
        }
        $this->container['baseCurrencyServicesAmount'] = $baseCurrencyServicesAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


