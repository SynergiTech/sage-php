<?php
/**
 * ArtefactDetailedTaxAnalysis
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * ArtefactDetailedTaxAnalysis Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ArtefactDetailedTaxAnalysis implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ArtefactDetailedTaxAnalysis';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'taxRatesBreakdown' => '\SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysisBreakdown',
        'totalNet' => 'float',
        'totalTax' => 'float',
        'total' => 'float',
        'totalGoodsAmount' => 'float',
        'totalServicesAmount' => 'float',
        'baseCurrencyTotalNet' => 'float',
        'baseCurrencyTotalTax' => 'float',
        'baseCurrencyTotal' => 'float',
        'baseCurrencyTotalGoodsAmount' => 'float',
        'baseCurrencyTotalServicesAmount' => 'float',
        'totalRetailerTax' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'taxRatesBreakdown' => null,
        'totalNet' => 'double',
        'totalTax' => 'double',
        'total' => 'double',
        'totalGoodsAmount' => 'double',
        'totalServicesAmount' => 'double',
        'baseCurrencyTotalNet' => 'double',
        'baseCurrencyTotalTax' => 'double',
        'baseCurrencyTotal' => 'double',
        'baseCurrencyTotalGoodsAmount' => 'double',
        'baseCurrencyTotalServicesAmount' => 'double',
        'totalRetailerTax' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'taxRatesBreakdown' => false,
        'totalNet' => false,
        'totalTax' => false,
        'total' => false,
        'totalGoodsAmount' => false,
        'totalServicesAmount' => false,
        'baseCurrencyTotalNet' => false,
        'baseCurrencyTotalTax' => false,
        'baseCurrencyTotal' => false,
        'baseCurrencyTotalGoodsAmount' => false,
        'baseCurrencyTotalServicesAmount' => false,
        'totalRetailerTax' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'taxRatesBreakdown' => 'tax_rates_breakdown',
        'totalNet' => 'total_net',
        'totalTax' => 'total_tax',
        'total' => 'total',
        'totalGoodsAmount' => 'total_goods_amount',
        'totalServicesAmount' => 'total_services_amount',
        'baseCurrencyTotalNet' => 'base_currency_total_net',
        'baseCurrencyTotalTax' => 'base_currency_total_tax',
        'baseCurrencyTotal' => 'base_currency_total',
        'baseCurrencyTotalGoodsAmount' => 'base_currency_total_goods_amount',
        'baseCurrencyTotalServicesAmount' => 'base_currency_total_services_amount',
        'totalRetailerTax' => 'total_retailer_tax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'taxRatesBreakdown' => 'setTaxRatesBreakdown',
        'totalNet' => 'setTotalNet',
        'totalTax' => 'setTotalTax',
        'total' => 'setTotal',
        'totalGoodsAmount' => 'setTotalGoodsAmount',
        'totalServicesAmount' => 'setTotalServicesAmount',
        'baseCurrencyTotalNet' => 'setBaseCurrencyTotalNet',
        'baseCurrencyTotalTax' => 'setBaseCurrencyTotalTax',
        'baseCurrencyTotal' => 'setBaseCurrencyTotal',
        'baseCurrencyTotalGoodsAmount' => 'setBaseCurrencyTotalGoodsAmount',
        'baseCurrencyTotalServicesAmount' => 'setBaseCurrencyTotalServicesAmount',
        'totalRetailerTax' => 'setTotalRetailerTax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'taxRatesBreakdown' => 'getTaxRatesBreakdown',
        'totalNet' => 'getTotalNet',
        'totalTax' => 'getTotalTax',
        'total' => 'getTotal',
        'totalGoodsAmount' => 'getTotalGoodsAmount',
        'totalServicesAmount' => 'getTotalServicesAmount',
        'baseCurrencyTotalNet' => 'getBaseCurrencyTotalNet',
        'baseCurrencyTotalTax' => 'getBaseCurrencyTotalTax',
        'baseCurrencyTotal' => 'getBaseCurrencyTotal',
        'baseCurrencyTotalGoodsAmount' => 'getBaseCurrencyTotalGoodsAmount',
        'baseCurrencyTotalServicesAmount' => 'getBaseCurrencyTotalServicesAmount',
        'totalRetailerTax' => 'getTotalRetailerTax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('taxRatesBreakdown', $data ?? [], null);
        $this->setIfExists('totalNet', $data ?? [], null);
        $this->setIfExists('totalTax', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('totalGoodsAmount', $data ?? [], null);
        $this->setIfExists('totalServicesAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalNet', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalTax', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotal', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalGoodsAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalServicesAmount', $data ?? [], null);
        $this->setIfExists('totalRetailerTax', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets taxRatesBreakdown
     *
     * @return \SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysisBreakdown|null
     */
    public function getTaxRatesBreakdown(): ?\SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysisBreakdown
    {
        return $this->container['taxRatesBreakdown'];
    }

    /**
     * Sets taxRatesBreakdown
     *
     * @param \SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysisBreakdown|null $taxRatesBreakdown taxRatesBreakdown
     *
     * @return $this
     */
    public function setTaxRatesBreakdown(?\SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysisBreakdown $taxRatesBreakdown): static
    {
        if (is_null($taxRatesBreakdown)) {
            throw new InvalidArgumentException('non-nullable taxRatesBreakdown cannot be null');
        }
        $this->container['taxRatesBreakdown'] = $taxRatesBreakdown;

        return $this;
    }

    /**
     * Gets totalNet
     *
     * @return float|null
     */
    public function getTotalNet(): ?float
    {
        return $this->container['totalNet'];
    }

    /**
     * Sets totalNet
     *
     * @param float|null $totalNet The total net amount for all tax rates
     *
     * @return $this
     */
    public function setTotalNet(?float $totalNet): static
    {
        if (is_null($totalNet)) {
            throw new InvalidArgumentException('non-nullable totalNet cannot be null');
        }
        $this->container['totalNet'] = $totalNet;

        return $this;
    }

    /**
     * Gets totalTax
     *
     * @return float|null
     */
    public function getTotalTax(): ?float
    {
        return $this->container['totalTax'];
    }

    /**
     * Sets totalTax
     *
     * @param float|null $totalTax The total tax amount for all tax rates
     *
     * @return $this
     */
    public function setTotalTax(?float $totalTax): static
    {
        if (is_null($totalTax)) {
            throw new InvalidArgumentException('non-nullable totalTax cannot be null');
        }
        $this->container['totalTax'] = $totalTax;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal(): ?float
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total The total amount for all tax rates
     *
     * @return $this
     */
    public function setTotal(?float $total): static
    {
        if (is_null($total)) {
            throw new InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets totalGoodsAmount
     *
     * @return float|null
     */
    public function getTotalGoodsAmount(): ?float
    {
        return $this->container['totalGoodsAmount'];
    }

    /**
     * Sets totalGoodsAmount
     *
     * @param float|null $totalGoodsAmount The total amount relating to goods for all tax rates
     *
     * @return $this
     */
    public function setTotalGoodsAmount(?float $totalGoodsAmount): static
    {
        if (is_null($totalGoodsAmount)) {
            throw new InvalidArgumentException('non-nullable totalGoodsAmount cannot be null');
        }
        $this->container['totalGoodsAmount'] = $totalGoodsAmount;

        return $this;
    }

    /**
     * Gets totalServicesAmount
     *
     * @return float|null
     */
    public function getTotalServicesAmount(): ?float
    {
        return $this->container['totalServicesAmount'];
    }

    /**
     * Sets totalServicesAmount
     *
     * @param float|null $totalServicesAmount The total amount relating to services for all tax rates
     *
     * @return $this
     */
    public function setTotalServicesAmount(?float $totalServicesAmount): static
    {
        if (is_null($totalServicesAmount)) {
            throw new InvalidArgumentException('non-nullable totalServicesAmount cannot be null');
        }
        $this->container['totalServicesAmount'] = $totalServicesAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalNet
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalNet(): ?float
    {
        return $this->container['baseCurrencyTotalNet'];
    }

    /**
     * Sets baseCurrencyTotalNet
     *
     * @param float|null $baseCurrencyTotalNet The base currency total net amount for all tax rates
     *
     * @return $this
     */
    public function setBaseCurrencyTotalNet(?float $baseCurrencyTotalNet): static
    {
        if (is_null($baseCurrencyTotalNet)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalNet cannot be null');
        }
        $this->container['baseCurrencyTotalNet'] = $baseCurrencyTotalNet;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalTax
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalTax(): ?float
    {
        return $this->container['baseCurrencyTotalTax'];
    }

    /**
     * Sets baseCurrencyTotalTax
     *
     * @param float|null $baseCurrencyTotalTax The base currency total tax amount for all tax rates
     *
     * @return $this
     */
    public function setBaseCurrencyTotalTax(?float $baseCurrencyTotalTax): static
    {
        if (is_null($baseCurrencyTotalTax)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalTax cannot be null');
        }
        $this->container['baseCurrencyTotalTax'] = $baseCurrencyTotalTax;

        return $this;
    }

    /**
     * Gets baseCurrencyTotal
     *
     * @return float|null
     */
    public function getBaseCurrencyTotal(): ?float
    {
        return $this->container['baseCurrencyTotal'];
    }

    /**
     * Sets baseCurrencyTotal
     *
     * @param float|null $baseCurrencyTotal The total base currency amount for all tax rates
     *
     * @return $this
     */
    public function setBaseCurrencyTotal(?float $baseCurrencyTotal): static
    {
        if (is_null($baseCurrencyTotal)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotal cannot be null');
        }
        $this->container['baseCurrencyTotal'] = $baseCurrencyTotal;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalGoodsAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalGoodsAmount(): ?float
    {
        return $this->container['baseCurrencyTotalGoodsAmount'];
    }

    /**
     * Sets baseCurrencyTotalGoodsAmount
     *
     * @param float|null $baseCurrencyTotalGoodsAmount The total base currency amount relating to goods for all tax rates
     *
     * @return $this
     */
    public function setBaseCurrencyTotalGoodsAmount(?float $baseCurrencyTotalGoodsAmount): static
    {
        if (is_null($baseCurrencyTotalGoodsAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalGoodsAmount cannot be null');
        }
        $this->container['baseCurrencyTotalGoodsAmount'] = $baseCurrencyTotalGoodsAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalServicesAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalServicesAmount(): ?float
    {
        return $this->container['baseCurrencyTotalServicesAmount'];
    }

    /**
     * Sets baseCurrencyTotalServicesAmount
     *
     * @param float|null $baseCurrencyTotalServicesAmount The total base currency amount relating to services for all tax rates
     *
     * @return $this
     */
    public function setBaseCurrencyTotalServicesAmount(?float $baseCurrencyTotalServicesAmount): static
    {
        if (is_null($baseCurrencyTotalServicesAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalServicesAmount cannot be null');
        }
        $this->container['baseCurrencyTotalServicesAmount'] = $baseCurrencyTotalServicesAmount;

        return $this;
    }

    /**
     * Gets totalRetailerTax
     *
     * @return float|null
     */
    public function getTotalRetailerTax(): ?float
    {
        return $this->container['totalRetailerTax'];
    }

    /**
     * Sets totalRetailerTax
     *
     * @param float|null $totalRetailerTax The total retailer tax amount for all tax rates
     *
     * @return $this
     */
    public function setTotalRetailerTax(?float $totalRetailerTax): static
    {
        if (is_null($totalRetailerTax)) {
            throw new InvalidArgumentException('non-nullable totalRetailerTax cannot be null');
        }
        $this->container['totalRetailerTax'] = $totalRetailerTax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


