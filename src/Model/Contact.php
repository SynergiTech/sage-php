<?php
/**
 * Contact
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * Contact Class Doc Comment
 *
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Standard: ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª * Accounting Start: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any mentioned role in one of the listed areas: * Area: &#x60;Contacts&#x60;: Restricted Access, Full Access
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Contact implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'legacyId' => 'int',
        'id' => 'string',
        'displayedAs' => 'string',
        'path' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'links' => '\SynergiTech\Sage\Model\Link[]',
        'deletedAt' => '\DateTime',
        'balance' => 'float',
        'contactTypes' => '\SynergiTech\Sage\Model\Base[]',
        'name' => 'string',
        'reference' => 'string',
        'defaultSalesLedgerAccount' => '\SynergiTech\Sage\Model\LedgerAccount',
        'defaultSalesTaxRate' => '\SynergiTech\Sage\Model\Base',
        'defaultPurchaseLedgerAccount' => '\SynergiTech\Sage\Model\LedgerAccount',
        'taxNumber' => 'string',
        'notes' => 'string',
        'locale' => 'string',
        'mainAddress' => '\SynergiTech\Sage\Model\Address',
        'deliveryAddress' => '\SynergiTech\Sage\Model\Address',
        'mainContactPerson' => '\SynergiTech\Sage\Model\ContactPerson',
        'bankAccountDetails' => '\SynergiTech\Sage\Model\BankAccountDetails',
        'creditLimit' => 'float',
        'creditDays' => 'int',
        'creditTermsAndConditions' => 'string',
        'productSalesPriceType' => '\SynergiTech\Sage\Model\Base',
        'sourceGuid' => 'string',
        'currency' => '\SynergiTech\Sage\Model\Base',
        'auxReference' => 'string',
        'registeredNumber' => 'string',
        'deletable' => 'bool',
        'taxTreatment' => '\SynergiTech\Sage\Model\ContactTaxTreatment',
        'email' => 'string',
        'taxCalculation' => 'string',
        'auxiliaryAccount' => 'string',
        'gdprObfuscated' => 'bool',
        'system' => 'bool',
        'hasUnfinishedRecurringInvoices' => 'bool',
        'cisRegistered' => 'bool',
        'niBased' => 'bool',
        'gbBased' => 'bool',
        'cisSettings' => '\SynergiTech\Sage\Model\ContactCisSettings',
        'destinationVatBlocking' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'legacyId' => 'int32',
        'id' => null,
        'displayedAs' => null,
        'path' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'links' => null,
        'deletedAt' => 'date-time',
        'balance' => 'double',
        'contactTypes' => null,
        'name' => null,
        'reference' => null,
        'defaultSalesLedgerAccount' => null,
        'defaultSalesTaxRate' => null,
        'defaultPurchaseLedgerAccount' => null,
        'taxNumber' => null,
        'notes' => null,
        'locale' => null,
        'mainAddress' => null,
        'deliveryAddress' => null,
        'mainContactPerson' => null,
        'bankAccountDetails' => null,
        'creditLimit' => 'double',
        'creditDays' => 'int32',
        'creditTermsAndConditions' => null,
        'productSalesPriceType' => null,
        'sourceGuid' => null,
        'currency' => null,
        'auxReference' => null,
        'registeredNumber' => null,
        'deletable' => null,
        'taxTreatment' => null,
        'email' => null,
        'taxCalculation' => null,
        'auxiliaryAccount' => null,
        'gdprObfuscated' => null,
        'system' => null,
        'hasUnfinishedRecurringInvoices' => null,
        'cisRegistered' => null,
        'niBased' => null,
        'gbBased' => null,
        'cisSettings' => null,
        'destinationVatBlocking' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'legacyId' => false,
        'id' => false,
        'displayedAs' => false,
        'path' => false,
        'createdAt' => false,
        'updatedAt' => false,
        'links' => false,
        'deletedAt' => false,
        'balance' => false,
        'contactTypes' => false,
        'name' => false,
        'reference' => false,
        'defaultSalesLedgerAccount' => false,
        'defaultSalesTaxRate' => false,
        'defaultPurchaseLedgerAccount' => false,
        'taxNumber' => false,
        'notes' => false,
        'locale' => false,
        'mainAddress' => false,
        'deliveryAddress' => false,
        'mainContactPerson' => false,
        'bankAccountDetails' => false,
        'creditLimit' => false,
        'creditDays' => false,
        'creditTermsAndConditions' => false,
        'productSalesPriceType' => false,
        'sourceGuid' => false,
        'currency' => false,
        'auxReference' => false,
        'registeredNumber' => false,
        'deletable' => false,
        'taxTreatment' => false,
        'email' => false,
        'taxCalculation' => false,
        'auxiliaryAccount' => false,
        'gdprObfuscated' => false,
        'system' => false,
        'hasUnfinishedRecurringInvoices' => false,
        'cisRegistered' => false,
        'niBased' => false,
        'gbBased' => false,
        'cisSettings' => false,
        'destinationVatBlocking' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'legacyId' => 'legacy_id',
        'id' => 'id',
        'displayedAs' => 'displayed_as',
        'path' => '$path',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'links' => 'links',
        'deletedAt' => 'deleted_at',
        'balance' => 'balance',
        'contactTypes' => 'contact_types',
        'name' => 'name',
        'reference' => 'reference',
        'defaultSalesLedgerAccount' => 'default_sales_ledger_account',
        'defaultSalesTaxRate' => 'default_sales_tax_rate',
        'defaultPurchaseLedgerAccount' => 'default_purchase_ledger_account',
        'taxNumber' => 'tax_number',
        'notes' => 'notes',
        'locale' => 'locale',
        'mainAddress' => 'main_address',
        'deliveryAddress' => 'delivery_address',
        'mainContactPerson' => 'main_contact_person',
        'bankAccountDetails' => 'bank_account_details',
        'creditLimit' => 'credit_limit',
        'creditDays' => 'credit_days',
        'creditTermsAndConditions' => 'credit_terms_and_conditions',
        'productSalesPriceType' => 'product_sales_price_type',
        'sourceGuid' => 'source_guid',
        'currency' => 'currency',
        'auxReference' => 'aux_reference',
        'registeredNumber' => 'registered_number',
        'deletable' => 'deletable',
        'taxTreatment' => 'tax_treatment',
        'email' => 'email',
        'taxCalculation' => 'tax_calculation',
        'auxiliaryAccount' => 'auxiliary_account',
        'gdprObfuscated' => 'gdpr_obfuscated',
        'system' => 'system',
        'hasUnfinishedRecurringInvoices' => 'has_unfinished_recurring_invoices',
        'cisRegistered' => 'cis_registered',
        'niBased' => 'ni_based',
        'gbBased' => 'gb_based',
        'cisSettings' => 'cis_settings',
        'destinationVatBlocking' => 'destination_vat_blocking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'legacyId' => 'setLegacyId',
        'id' => 'setId',
        'displayedAs' => 'setDisplayedAs',
        'path' => 'setPath',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'links' => 'setLinks',
        'deletedAt' => 'setDeletedAt',
        'balance' => 'setBalance',
        'contactTypes' => 'setContactTypes',
        'name' => 'setName',
        'reference' => 'setReference',
        'defaultSalesLedgerAccount' => 'setDefaultSalesLedgerAccount',
        'defaultSalesTaxRate' => 'setDefaultSalesTaxRate',
        'defaultPurchaseLedgerAccount' => 'setDefaultPurchaseLedgerAccount',
        'taxNumber' => 'setTaxNumber',
        'notes' => 'setNotes',
        'locale' => 'setLocale',
        'mainAddress' => 'setMainAddress',
        'deliveryAddress' => 'setDeliveryAddress',
        'mainContactPerson' => 'setMainContactPerson',
        'bankAccountDetails' => 'setBankAccountDetails',
        'creditLimit' => 'setCreditLimit',
        'creditDays' => 'setCreditDays',
        'creditTermsAndConditions' => 'setCreditTermsAndConditions',
        'productSalesPriceType' => 'setProductSalesPriceType',
        'sourceGuid' => 'setSourceGuid',
        'currency' => 'setCurrency',
        'auxReference' => 'setAuxReference',
        'registeredNumber' => 'setRegisteredNumber',
        'deletable' => 'setDeletable',
        'taxTreatment' => 'setTaxTreatment',
        'email' => 'setEmail',
        'taxCalculation' => 'setTaxCalculation',
        'auxiliaryAccount' => 'setAuxiliaryAccount',
        'gdprObfuscated' => 'setGdprObfuscated',
        'system' => 'setSystem',
        'hasUnfinishedRecurringInvoices' => 'setHasUnfinishedRecurringInvoices',
        'cisRegistered' => 'setCisRegistered',
        'niBased' => 'setNiBased',
        'gbBased' => 'setGbBased',
        'cisSettings' => 'setCisSettings',
        'destinationVatBlocking' => 'setDestinationVatBlocking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'legacyId' => 'getLegacyId',
        'id' => 'getId',
        'displayedAs' => 'getDisplayedAs',
        'path' => 'getPath',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'links' => 'getLinks',
        'deletedAt' => 'getDeletedAt',
        'balance' => 'getBalance',
        'contactTypes' => 'getContactTypes',
        'name' => 'getName',
        'reference' => 'getReference',
        'defaultSalesLedgerAccount' => 'getDefaultSalesLedgerAccount',
        'defaultSalesTaxRate' => 'getDefaultSalesTaxRate',
        'defaultPurchaseLedgerAccount' => 'getDefaultPurchaseLedgerAccount',
        'taxNumber' => 'getTaxNumber',
        'notes' => 'getNotes',
        'locale' => 'getLocale',
        'mainAddress' => 'getMainAddress',
        'deliveryAddress' => 'getDeliveryAddress',
        'mainContactPerson' => 'getMainContactPerson',
        'bankAccountDetails' => 'getBankAccountDetails',
        'creditLimit' => 'getCreditLimit',
        'creditDays' => 'getCreditDays',
        'creditTermsAndConditions' => 'getCreditTermsAndConditions',
        'productSalesPriceType' => 'getProductSalesPriceType',
        'sourceGuid' => 'getSourceGuid',
        'currency' => 'getCurrency',
        'auxReference' => 'getAuxReference',
        'registeredNumber' => 'getRegisteredNumber',
        'deletable' => 'getDeletable',
        'taxTreatment' => 'getTaxTreatment',
        'email' => 'getEmail',
        'taxCalculation' => 'getTaxCalculation',
        'auxiliaryAccount' => 'getAuxiliaryAccount',
        'gdprObfuscated' => 'getGdprObfuscated',
        'system' => 'getSystem',
        'hasUnfinishedRecurringInvoices' => 'getHasUnfinishedRecurringInvoices',
        'cisRegistered' => 'getCisRegistered',
        'niBased' => 'getNiBased',
        'gbBased' => 'getGbBased',
        'cisSettings' => 'getCisSettings',
        'destinationVatBlocking' => 'getDestinationVatBlocking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('legacyId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('displayedAs', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('deletedAt', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('contactTypes', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('defaultSalesLedgerAccount', $data ?? [], null);
        $this->setIfExists('defaultSalesTaxRate', $data ?? [], null);
        $this->setIfExists('defaultPurchaseLedgerAccount', $data ?? [], null);
        $this->setIfExists('taxNumber', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('mainAddress', $data ?? [], null);
        $this->setIfExists('deliveryAddress', $data ?? [], null);
        $this->setIfExists('mainContactPerson', $data ?? [], null);
        $this->setIfExists('bankAccountDetails', $data ?? [], null);
        $this->setIfExists('creditLimit', $data ?? [], null);
        $this->setIfExists('creditDays', $data ?? [], null);
        $this->setIfExists('creditTermsAndConditions', $data ?? [], null);
        $this->setIfExists('productSalesPriceType', $data ?? [], null);
        $this->setIfExists('sourceGuid', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('auxReference', $data ?? [], null);
        $this->setIfExists('registeredNumber', $data ?? [], null);
        $this->setIfExists('deletable', $data ?? [], null);
        $this->setIfExists('taxTreatment', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('taxCalculation', $data ?? [], null);
        $this->setIfExists('auxiliaryAccount', $data ?? [], null);
        $this->setIfExists('gdprObfuscated', $data ?? [], null);
        $this->setIfExists('system', $data ?? [], null);
        $this->setIfExists('hasUnfinishedRecurringInvoices', $data ?? [], null);
        $this->setIfExists('cisRegistered', $data ?? [], null);
        $this->setIfExists('niBased', $data ?? [], null);
        $this->setIfExists('gbBased', $data ?? [], null);
        $this->setIfExists('cisSettings', $data ?? [], null);
        $this->setIfExists('destinationVatBlocking', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['taxNumber']) && (mb_strlen($this->container['taxNumber']) > 255)) {
            $invalidProperties[] = "invalid value for 'taxNumber', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) > 4000)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['locale']) && (mb_strlen($this->container['locale']) > 10)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['creditTermsAndConditions']) && (mb_strlen($this->container['creditTermsAndConditions']) > 2000)) {
            $invalidProperties[] = "invalid value for 'creditTermsAndConditions', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['sourceGuid']) && (mb_strlen($this->container['sourceGuid']) > 255)) {
            $invalidProperties[] = "invalid value for 'sourceGuid', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['auxReference']) && (mb_strlen($this->container['auxReference']) > 4)) {
            $invalidProperties[] = "invalid value for 'auxReference', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['registeredNumber']) && (mb_strlen($this->container['registeredNumber']) > 25)) {
            $invalidProperties[] = "invalid value for 'registeredNumber', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['auxiliaryAccount']) && (mb_strlen($this->container['auxiliaryAccount']) > 25)) {
            $invalidProperties[] = "invalid value for 'auxiliaryAccount', the character length must be smaller than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacyId
     *
     * @return int|null
     */
    public function getLegacyId(): ?int
    {
        return $this->container['legacyId'];
    }

    /**
     * Sets legacyId
     *
     * @param int|null $legacyId The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId(?int $legacyId): static
    {
        if (is_null($legacyId)) {
            throw new InvalidArgumentException('non-nullable legacyId cannot be null');
        }
        $this->container['legacyId'] = $legacyId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayedAs
     *
     * @return string|null
     */
    public function getDisplayedAs(): ?string
    {
        return $this->container['displayedAs'];
    }

    /**
     * Sets displayedAs
     *
     * @param string|null $displayedAs The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs(?string $displayedAs): static
    {
        if (is_null($displayedAs)) {
            throw new InvalidArgumentException('non-nullable displayedAs cannot be null');
        }
        $this->container['displayedAs'] = $displayedAs;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath(): ?string
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The API path for the resource
     *
     * @return $this
     */
    public function setPath(?string $path): static
    {
        if (is_null($path)) {
            throw new InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt The datetime when the item was created
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \SynergiTech\Sage\Model\Link[]|null
     */
    public function getLinks(): ?array
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \SynergiTech\Sage\Model\Link[]|null $links Links for the resource
     *
     * @return $this
     */
    public function setLinks(?array $links): static
    {
        if (is_null($links)) {
            throw new InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return \DateTime|null
     */
    public function getDeletedAt(): ?\DateTime
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param \DateTime|null $deletedAt The datetime when the item was deleted
     *
     * @return $this
     */
    public function setDeletedAt(?\DateTime $deletedAt): static
    {
        if (is_null($deletedAt)) {
            throw new InvalidArgumentException('non-nullable deletedAt cannot be null');
        }
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance(): ?float
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance The contact balance
     *
     * @return $this
     */
    public function setBalance(?float $balance): static
    {
        if (is_null($balance)) {
            throw new InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets contactTypes
     *
     * @return \SynergiTech\Sage\Model\Base[]|null
     */
    public function getContactTypes(): ?array
    {
        return $this->container['contactTypes'];
    }

    /**
     * Sets contactTypes
     *
     * @param \SynergiTech\Sage\Model\Base[]|null $contactTypes The type of the contact. It has to be either CUSTOMER or VENDOR
     *
     * @return $this
     */
    public function setContactTypes(?array $contactTypes): static
    {
        if (is_null($contactTypes)) {
            throw new InvalidArgumentException('non-nullable contactTypes cannot be null');
        }
        $this->container['contactTypes'] = $contactTypes;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The contact's full name or business name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling Contact., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Unique reference for the contact
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        if ((mb_strlen($reference) > 10)) {
            throw new InvalidArgumentException('invalid length for $reference when calling Contact., must be smaller than or equal to 10.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets defaultSalesLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\LedgerAccount|null
     */
    public function getDefaultSalesLedgerAccount(): ?\SynergiTech\Sage\Model\LedgerAccount
    {
        return $this->container['defaultSalesLedgerAccount'];
    }

    /**
     * Sets defaultSalesLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\LedgerAccount|null $defaultSalesLedgerAccount defaultSalesLedgerAccount
     *
     * @return $this
     */
    public function setDefaultSalesLedgerAccount(?\SynergiTech\Sage\Model\LedgerAccount $defaultSalesLedgerAccount): static
    {
        if (is_null($defaultSalesLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable defaultSalesLedgerAccount cannot be null');
        }
        $this->container['defaultSalesLedgerAccount'] = $defaultSalesLedgerAccount;

        return $this;
    }

    /**
     * Gets defaultSalesTaxRate
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getDefaultSalesTaxRate(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['defaultSalesTaxRate'];
    }

    /**
     * Sets defaultSalesTaxRate
     *
     * @param \SynergiTech\Sage\Model\Base|null $defaultSalesTaxRate defaultSalesTaxRate
     *
     * @return $this
     */
    public function setDefaultSalesTaxRate(?\SynergiTech\Sage\Model\Base $defaultSalesTaxRate): static
    {
        if (is_null($defaultSalesTaxRate)) {
            throw new InvalidArgumentException('non-nullable defaultSalesTaxRate cannot be null');
        }
        $this->container['defaultSalesTaxRate'] = $defaultSalesTaxRate;

        return $this;
    }

    /**
     * Gets defaultPurchaseLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\LedgerAccount|null
     */
    public function getDefaultPurchaseLedgerAccount(): ?\SynergiTech\Sage\Model\LedgerAccount
    {
        return $this->container['defaultPurchaseLedgerAccount'];
    }

    /**
     * Sets defaultPurchaseLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\LedgerAccount|null $defaultPurchaseLedgerAccount defaultPurchaseLedgerAccount
     *
     * @return $this
     */
    public function setDefaultPurchaseLedgerAccount(?\SynergiTech\Sage\Model\LedgerAccount $defaultPurchaseLedgerAccount): static
    {
        if (is_null($defaultPurchaseLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable defaultPurchaseLedgerAccount cannot be null');
        }
        $this->container['defaultPurchaseLedgerAccount'] = $defaultPurchaseLedgerAccount;

        return $this;
    }

    /**
     * Gets taxNumber
     *
     * @return string|null
     */
    public function getTaxNumber(): ?string
    {
        return $this->container['taxNumber'];
    }

    /**
     * Sets taxNumber
     *
     * @param string|null $taxNumber The VAT registration number of the contact. The format will be validated.
     *
     * @return $this
     */
    public function setTaxNumber(?string $taxNumber): static
    {
        if (is_null($taxNumber)) {
            throw new InvalidArgumentException('non-nullable taxNumber cannot be null');
        }
        if ((mb_strlen($taxNumber) > 255)) {
            throw new InvalidArgumentException('invalid length for $taxNumber when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['taxNumber'] = $taxNumber;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes(): ?string
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes The notes for the contact
     *
     * @return $this
     */
    public function setNotes(?string $notes): static
    {
        if (is_null($notes)) {
            throw new InvalidArgumentException('non-nullable notes cannot be null');
        }
        if ((mb_strlen($notes) > 4000)) {
            throw new InvalidArgumentException('invalid length for $notes when calling Contact., must be smaller than or equal to 4000.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale(): ?string
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale The locale for the contact
     *
     * @return $this
     */
    public function setLocale(?string $locale): static
    {
        if (is_null($locale)) {
            throw new InvalidArgumentException('non-nullable locale cannot be null');
        }
        if ((mb_strlen($locale) > 10)) {
            throw new InvalidArgumentException('invalid length for $locale when calling Contact., must be smaller than or equal to 10.');
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets mainAddress
     *
     * @return \SynergiTech\Sage\Model\Address|null
     */
    public function getMainAddress(): ?\SynergiTech\Sage\Model\Address
    {
        return $this->container['mainAddress'];
    }

    /**
     * Sets mainAddress
     *
     * @param \SynergiTech\Sage\Model\Address|null $mainAddress mainAddress
     *
     * @return $this
     */
    public function setMainAddress(?\SynergiTech\Sage\Model\Address $mainAddress): static
    {
        if (is_null($mainAddress)) {
            throw new InvalidArgumentException('non-nullable mainAddress cannot be null');
        }
        $this->container['mainAddress'] = $mainAddress;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return \SynergiTech\Sage\Model\Address|null
     */
    public function getDeliveryAddress(): ?\SynergiTech\Sage\Model\Address
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param \SynergiTech\Sage\Model\Address|null $deliveryAddress deliveryAddress
     *
     * @return $this
     */
    public function setDeliveryAddress(?\SynergiTech\Sage\Model\Address $deliveryAddress): static
    {
        if (is_null($deliveryAddress)) {
            throw new InvalidArgumentException('non-nullable deliveryAddress cannot be null');
        }
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets mainContactPerson
     *
     * @return \SynergiTech\Sage\Model\ContactPerson|null
     */
    public function getMainContactPerson(): ?\SynergiTech\Sage\Model\ContactPerson
    {
        return $this->container['mainContactPerson'];
    }

    /**
     * Sets mainContactPerson
     *
     * @param \SynergiTech\Sage\Model\ContactPerson|null $mainContactPerson mainContactPerson
     *
     * @return $this
     */
    public function setMainContactPerson(?\SynergiTech\Sage\Model\ContactPerson $mainContactPerson): static
    {
        if (is_null($mainContactPerson)) {
            throw new InvalidArgumentException('non-nullable mainContactPerson cannot be null');
        }
        $this->container['mainContactPerson'] = $mainContactPerson;

        return $this;
    }

    /**
     * Gets bankAccountDetails
     *
     * @return \SynergiTech\Sage\Model\BankAccountDetails|null
     */
    public function getBankAccountDetails(): ?\SynergiTech\Sage\Model\BankAccountDetails
    {
        return $this->container['bankAccountDetails'];
    }

    /**
     * Sets bankAccountDetails
     *
     * @param \SynergiTech\Sage\Model\BankAccountDetails|null $bankAccountDetails bankAccountDetails
     *
     * @return $this
     */
    public function setBankAccountDetails(?\SynergiTech\Sage\Model\BankAccountDetails $bankAccountDetails): static
    {
        if (is_null($bankAccountDetails)) {
            throw new InvalidArgumentException('non-nullable bankAccountDetails cannot be null');
        }
        $this->container['bankAccountDetails'] = $bankAccountDetails;

        return $this;
    }

    /**
     * Gets creditLimit
     *
     * @return float|null
     */
    public function getCreditLimit(): ?float
    {
        return $this->container['creditLimit'];
    }

    /**
     * Sets creditLimit
     *
     * @param float|null $creditLimit Custom credit limit amount for the contact <br><i>not applicable to Start</i>
     *
     * @return $this
     */
    public function setCreditLimit(?float $creditLimit): static
    {
        if (is_null($creditLimit)) {
            throw new InvalidArgumentException('non-nullable creditLimit cannot be null');
        }
        $this->container['creditLimit'] = $creditLimit;

        return $this;
    }

    /**
     * Gets creditDays
     *
     * @return int|null
     */
    public function getCreditDays(): ?int
    {
        return $this->container['creditDays'];
    }

    /**
     * Sets creditDays
     *
     * @param int|null $creditDays Custom credit days for the contact.<br> If returned as null in a GET response, you may want to GET /invoice_settings and use 'customer_credit_days'/'vendor_credit_days' as default/fallback according to your use case.
     *
     * @return $this
     */
    public function setCreditDays(?int $creditDays): static
    {
        if (is_null($creditDays)) {
            throw new InvalidArgumentException('non-nullable creditDays cannot be null');
        }
        $this->container['creditDays'] = $creditDays;

        return $this;
    }

    /**
     * Gets creditTermsAndConditions
     *
     * @return string|null
     */
    public function getCreditTermsAndConditions(): ?string
    {
        return $this->container['creditTermsAndConditions'];
    }

    /**
     * Sets creditTermsAndConditions
     *
     * @param string|null $creditTermsAndConditions Custom terms and conditions for the contact. If set will override global /invoice_settings default terms and conditions. <br><i>Customers only</i>
     *
     * @return $this
     */
    public function setCreditTermsAndConditions(?string $creditTermsAndConditions): static
    {
        if (is_null($creditTermsAndConditions)) {
            throw new InvalidArgumentException('non-nullable creditTermsAndConditions cannot be null');
        }
        if ((mb_strlen($creditTermsAndConditions) > 2000)) {
            throw new InvalidArgumentException('invalid length for $creditTermsAndConditions when calling Contact., must be smaller than or equal to 2000.');
        }

        $this->container['creditTermsAndConditions'] = $creditTermsAndConditions;

        return $this;
    }

    /**
     * Gets productSalesPriceType
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getProductSalesPriceType(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['productSalesPriceType'];
    }

    /**
     * Sets productSalesPriceType
     *
     * @param \SynergiTech\Sage\Model\Base|null $productSalesPriceType productSalesPriceType
     *
     * @return $this
     */
    public function setProductSalesPriceType(?\SynergiTech\Sage\Model\Base $productSalesPriceType): static
    {
        if (is_null($productSalesPriceType)) {
            throw new InvalidArgumentException('non-nullable productSalesPriceType cannot be null');
        }
        $this->container['productSalesPriceType'] = $productSalesPriceType;

        return $this;
    }

    /**
     * Gets sourceGuid
     *
     * @return string|null
     */
    public function getSourceGuid(): ?string
    {
        return $this->container['sourceGuid'];
    }

    /**
     * Sets sourceGuid
     *
     * @param string|null $sourceGuid Used when importing contacts from external sources
     *
     * @return $this
     */
    public function setSourceGuid(?string $sourceGuid): static
    {
        if (is_null($sourceGuid)) {
            throw new InvalidArgumentException('non-nullable sourceGuid cannot be null');
        }
        if ((mb_strlen($sourceGuid) > 255)) {
            throw new InvalidArgumentException('invalid length for $sourceGuid when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['sourceGuid'] = $sourceGuid;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getCurrency(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \SynergiTech\Sage\Model\Base|null $currency currency
     *
     * @return $this
     */
    public function setCurrency(?\SynergiTech\Sage\Model\Base $currency): static
    {
        if (is_null($currency)) {
            throw new InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets auxReference
     *
     * @return string|null
     */
    public function getAuxReference(): ?string
    {
        return $this->container['auxReference'];
    }

    /**
     * Sets auxReference
     *
     * @param string|null $auxReference Auxiliary reference. Used for German \"Kreditorennummer\" and \"Debitorennummer\". <br> <a href=\"https://developer.sage.com/accounting/reference/settings/#tag/Datev-Settings\">   See Datev Settings endpoint reference </a>
     *
     * @return $this
     */
    public function setAuxReference(?string $auxReference): static
    {
        if (is_null($auxReference)) {
            throw new InvalidArgumentException('non-nullable auxReference cannot be null');
        }
        if ((mb_strlen($auxReference) > 4)) {
            throw new InvalidArgumentException('invalid length for $auxReference when calling Contact., must be smaller than or equal to 4.');
        }

        $this->container['auxReference'] = $auxReference;

        return $this;
    }

    /**
     * Gets registeredNumber
     *
     * @return string|null
     */
    public function getRegisteredNumber(): ?string
    {
        return $this->container['registeredNumber'];
    }

    /**
     * Sets registeredNumber
     *
     * @param string|null $registeredNumber The registered number of the contact's business. Only used for German businesses and represents the \"Steuernummer\" there (not the \"USt-ID\").
     *
     * @return $this
     */
    public function setRegisteredNumber(?string $registeredNumber): static
    {
        if (is_null($registeredNumber)) {
            throw new InvalidArgumentException('non-nullable registeredNumber cannot be null');
        }
        if ((mb_strlen($registeredNumber) > 25)) {
            throw new InvalidArgumentException('invalid length for $registeredNumber when calling Contact., must be smaller than or equal to 25.');
        }

        $this->container['registeredNumber'] = $registeredNumber;

        return $this;
    }

    /**
     * Gets deletable
     *
     * @return bool|null
     */
    public function getDeletable(): ?bool
    {
        return $this->container['deletable'];
    }

    /**
     * Sets deletable
     *
     * @param bool|null $deletable Indicates whether the contact can be deleted successfully
     *
     * @return $this
     */
    public function setDeletable(?bool $deletable): static
    {
        if (is_null($deletable)) {
            throw new InvalidArgumentException('non-nullable deletable cannot be null');
        }
        $this->container['deletable'] = $deletable;

        return $this;
    }

    /**
     * Gets taxTreatment
     *
     * @return \SynergiTech\Sage\Model\ContactTaxTreatment|null
     */
    public function getTaxTreatment(): ?\SynergiTech\Sage\Model\ContactTaxTreatment
    {
        return $this->container['taxTreatment'];
    }

    /**
     * Sets taxTreatment
     *
     * @param \SynergiTech\Sage\Model\ContactTaxTreatment|null $taxTreatment taxTreatment
     *
     * @return $this
     */
    public function setTaxTreatment(?\SynergiTech\Sage\Model\ContactTaxTreatment $taxTreatment): static
    {
        if (is_null($taxTreatment)) {
            throw new InvalidArgumentException('non-nullable taxTreatment cannot be null');
        }
        $this->container['taxTreatment'] = $taxTreatment;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address for the given contact
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 100)) {
            throw new InvalidArgumentException('invalid length for $email when calling Contact., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets taxCalculation
     *
     * @return string|null
     */
    public function getTaxCalculation(): ?string
    {
        return $this->container['taxCalculation'];
    }

    /**
     * Sets taxCalculation
     *
     * @param string|null $taxCalculation <b>France:</b> The tax calculation method used to define tax treatment <i>Vendors only</i> <br> <b>Spain:</b> Defines if contact is a retailer and tax is subject to Recargo de Equivalencia <i>Customers only</i> <b>United Kingdom:</b> Defines if contact tax treatment is domestic reverse charge <i>Customers & Suppliers</i>
     *
     * @return $this
     */
    public function setTaxCalculation(?string $taxCalculation): static
    {
        if (is_null($taxCalculation)) {
            throw new InvalidArgumentException('non-nullable taxCalculation cannot be null');
        }
        $this->container['taxCalculation'] = $taxCalculation;

        return $this;
    }

    /**
     * Gets auxiliaryAccount
     *
     * @return string|null
     */
    public function getAuxiliaryAccount(): ?string
    {
        return $this->container['auxiliaryAccount'];
    }

    /**
     * Sets auxiliaryAccount
     *
     * @param string|null $auxiliaryAccount Auxiliary account - used when auxiliary accounting is enabled in business settings. <br><i>Available only in Spain and France</i>
     *
     * @return $this
     */
    public function setAuxiliaryAccount(?string $auxiliaryAccount): static
    {
        if (is_null($auxiliaryAccount)) {
            throw new InvalidArgumentException('non-nullable auxiliaryAccount cannot be null');
        }
        if ((mb_strlen($auxiliaryAccount) > 25)) {
            throw new InvalidArgumentException('invalid length for $auxiliaryAccount when calling Contact., must be smaller than or equal to 25.');
        }

        $this->container['auxiliaryAccount'] = $auxiliaryAccount;

        return $this;
    }

    /**
     * Gets gdprObfuscated
     *
     * @return bool|null
     */
    public function getGdprObfuscated(): ?bool
    {
        return $this->container['gdprObfuscated'];
    }

    /**
     * Sets gdprObfuscated
     *
     * @param bool|null $gdprObfuscated General Data Protection Regulation (GDPR) came into effect on 25th May 2018. It introduces new rules for how business owners manage their contacts' personal data. When this field returns 'true', means that the contact has been requested to be obfuscated and you can not create any artifact (sales invoices, purchase invoices, ...) but you can still check previously created artifacts.
     *
     * @return $this
     */
    public function setGdprObfuscated(?bool $gdprObfuscated): static
    {
        if (is_null($gdprObfuscated)) {
            throw new InvalidArgumentException('non-nullable gdprObfuscated cannot be null');
        }
        $this->container['gdprObfuscated'] = $gdprObfuscated;

        return $this;
    }

    /**
     * Gets system
     *
     * @return bool|null
     */
    public function getSystem(): ?bool
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     *
     * @param bool|null $system Identifies a contact as being a system contact used for processing specific transaction types and reserved specifically for those transaction types such as tax return payments/refunds.
     *
     * @return $this
     */
    public function setSystem(?bool $system): static
    {
        if (is_null($system)) {
            throw new InvalidArgumentException('non-nullable system cannot be null');
        }
        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets hasUnfinishedRecurringInvoices
     *
     * @return bool|null
     */
    public function getHasUnfinishedRecurringInvoices(): ?bool
    {
        return $this->container['hasUnfinishedRecurringInvoices'];
    }

    /**
     * Sets hasUnfinishedRecurringInvoices
     *
     * @param bool|null $hasUnfinishedRecurringInvoices Indicates whether the contact is associated with any unfinished recurring invoices
     *
     * @return $this
     */
    public function setHasUnfinishedRecurringInvoices(?bool $hasUnfinishedRecurringInvoices): static
    {
        if (is_null($hasUnfinishedRecurringInvoices)) {
            throw new InvalidArgumentException('non-nullable hasUnfinishedRecurringInvoices cannot be null');
        }
        $this->container['hasUnfinishedRecurringInvoices'] = $hasUnfinishedRecurringInvoices;

        return $this;
    }

    /**
     * Gets cisRegistered
     *
     * @return bool|null
     */
    public function getCisRegistered(): ?bool
    {
        return $this->container['cisRegistered'];
    }

    /**
     * Sets cisRegistered
     *
     * @param bool|null $cisRegistered Identifies a contact as being registered as CIS.<br><i>only applicable to UK business</i>
     *
     * @return $this
     */
    public function setCisRegistered(?bool $cisRegistered): static
    {
        if (is_null($cisRegistered)) {
            throw new InvalidArgumentException('non-nullable cisRegistered cannot be null');
        }
        $this->container['cisRegistered'] = $cisRegistered;

        return $this;
    }

    /**
     * Gets niBased
     *
     * @return bool|null
     */
    public function getNiBased(): ?bool
    {
        return $this->container['niBased'];
    }

    /**
     * Sets niBased
     *
     * @param bool|null $niBased Identifies a contact as being based in Northern Ireland.
     *
     * @return $this
     */
    public function setNiBased(?bool $niBased): static
    {
        if (is_null($niBased)) {
            throw new InvalidArgumentException('non-nullable niBased cannot be null');
        }
        $this->container['niBased'] = $niBased;

        return $this;
    }

    /**
     * Gets gbBased
     *
     * @return bool|null
     */
    public function getGbBased(): ?bool
    {
        return $this->container['gbBased'];
    }

    /**
     * Sets gbBased
     *
     * @param bool|null $gbBased Identifies a contact as being based in Great Britain.
     *
     * @return $this
     */
    public function setGbBased(?bool $gbBased): static
    {
        if (is_null($gbBased)) {
            throw new InvalidArgumentException('non-nullable gbBased cannot be null');
        }
        $this->container['gbBased'] = $gbBased;

        return $this;
    }

    /**
     * Gets cisSettings
     *
     * @return \SynergiTech\Sage\Model\ContactCisSettings|null
     */
    public function getCisSettings(): ?\SynergiTech\Sage\Model\ContactCisSettings
    {
        return $this->container['cisSettings'];
    }

    /**
     * Sets cisSettings
     *
     * @param \SynergiTech\Sage\Model\ContactCisSettings|null $cisSettings cisSettings
     *
     * @return $this
     */
    public function setCisSettings(?\SynergiTech\Sage\Model\ContactCisSettings $cisSettings): static
    {
        if (is_null($cisSettings)) {
            throw new InvalidArgumentException('non-nullable cisSettings cannot be null');
        }
        $this->container['cisSettings'] = $cisSettings;

        return $this;
    }

    /**
     * Gets destinationVatBlocking
     *
     * @return bool|null
     */
    public function getDestinationVatBlocking(): ?bool
    {
        return $this->container['destinationVatBlocking'];
    }

    /**
     * Sets destinationVatBlocking
     *
     * @param bool|null $destinationVatBlocking Identifies a contact should be blocked due to destination vat
     *
     * @return $this
     */
    public function setDestinationVatBlocking(?bool $destinationVatBlocking): static
    {
        if (is_null($destinationVatBlocking)) {
            throw new InvalidArgumentException('non-nullable destinationVatBlocking cannot be null');
        }
        $this->container['destinationVatBlocking'] = $destinationVatBlocking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


