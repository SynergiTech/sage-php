<?php
/**
 * SalesInvoice
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * SalesInvoice Class Doc Comment
 *
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Standard: ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª * Accounting Start: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any of the following roles in the area &#x60;Sales&#x60;: Full Access, Restricted Access
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class SalesInvoice implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'SalesInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'legacyId' => 'int',
        'id' => 'string',
        'displayedAs' => 'string',
        'path' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'links' => '\SynergiTech\Sage\Model\Link[]',
        'editable' => 'bool',
        'vatReverseCharge' => 'bool',
        'taxCalculationMethod' => 'string',
        'destinationConsignment' => 'bool',
        'destinationVatRatesInUse' => 'bool',
        'transaction' => '\SynergiTech\Sage\Model\Transaction',
        'transactionType' => '\SynergiTech\Sage\Model\Base',
        'deletedAt' => '\DateTime',
        'isCis' => 'bool',
        'cisApplicableAmount' => 'float',
        'baseCurrencyCisApplicableAmount' => 'float',
        'totalAfterCisDeduction' => 'float',
        'baseCurrencyTotalAfterCisDeduction' => 'float',
        'hasCisLabour' => 'bool',
        'hasCisMaterials' => 'bool',
        'contact' => '\SynergiTech\Sage\Model\Contact',
        'recurringInvoice' => '\SynergiTech\Sage\Model\RecurringSalesInvoice',
        'invoiceNumberPrefix' => 'string',
        'invoiceNumber' => 'string',
        'contactName' => 'string',
        'contactReference' => 'string',
        'date' => '\DateTime',
        'dueDate' => '\DateTime',
        'reference' => 'string',
        'mainAddressFreeForm' => 'string',
        'mainAddress' => '\SynergiTech\Sage\Model\SalesArtefactAddress',
        'deliveryAddressFreeForm' => 'string',
        'deliveryAddress' => '\SynergiTech\Sage\Model\SalesArtefactAddress',
        'notes' => 'string',
        'termsAndConditions' => 'string',
        'shippingNetAmount' => 'float',
        'shippingTaxRate' => '\SynergiTech\Sage\Model\Base',
        'shippingTaxAmount' => 'float',
        'shippingTaxBreakdown' => '\SynergiTech\Sage\Model\TaxBreakdown[]',
        'shippingTotalAmount' => 'float',
        'netAmount' => 'float',
        'taxAmount' => 'float',
        'totalAmount' => 'float',
        'paymentsAllocationsTotalAmount' => 'float',
        'paymentsAllocationsTotalDiscount' => 'float',
        'totalPaid' => 'float',
        'outstandingAmount' => 'float',
        'currency' => '\SynergiTech\Sage\Model\Base',
        'exchangeRate' => 'float',
        'inverseExchangeRate' => 'float',
        'baseCurrencyShippingNetAmount' => 'float',
        'baseCurrencyShippingTaxAmount' => 'float',
        'baseCurrencyShippingTaxBreakdown' => '\SynergiTech\Sage\Model\TaxBreakdown[]',
        'baseCurrencyShippingTotalAmount' => 'float',
        'totalQuantity' => 'float',
        'totalDiscountAmount' => 'float',
        'baseCurrencyTotalDiscountAmount' => 'float',
        'baseCurrencyNetAmount' => 'float',
        'baseCurrencyTaxAmount' => 'float',
        'baseCurrencyTotalAmount' => 'float',
        'baseCurrencyOutstandingAmount' => 'float',
        'status' => '\SynergiTech\Sage\Model\Base',
        'sent' => 'bool',
        'sentByEmail' => 'bool',
        'voidReason' => 'string',
        'invoiceLines' => '\SynergiTech\Sage\Model\SalesInvoiceLineItem[]',
        'taxAnalysis' => '\SynergiTech\Sage\Model\ArtefactTaxAnalysis[]',
        'detailedTaxAnalysis' => '\SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysis',
        'paymentsAllocations' => '\SynergiTech\Sage\Model\PaymentAllocation[]',
        'lastPaid' => '\DateTime',
        'originalQuoteEstimate' => '\SynergiTech\Sage\Model\SalesInvoiceQuoteEstimate',
        'taxAddressRegion' => '\SynergiTech\Sage\Model\Base',
        'deliveryPerformanceDate' => 'string',
        'withholdingTaxRate' => 'float',
        'withholdingTaxAmount' => 'float',
        'baseCurrencyWithholdingTaxAmount' => 'float',
        'corrections' => '\SynergiTech\Sage\Model\SalesCorrectiveInvoice[]',
        'taxReconciled' => 'bool',
        'migrated' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'legacyId' => 'int32',
        'id' => null,
        'displayedAs' => null,
        'path' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'links' => null,
        'editable' => null,
        'vatReverseCharge' => null,
        'taxCalculationMethod' => null,
        'destinationConsignment' => null,
        'destinationVatRatesInUse' => null,
        'transaction' => null,
        'transactionType' => null,
        'deletedAt' => 'date-time',
        'isCis' => null,
        'cisApplicableAmount' => 'double',
        'baseCurrencyCisApplicableAmount' => 'double',
        'totalAfterCisDeduction' => 'double',
        'baseCurrencyTotalAfterCisDeduction' => 'double',
        'hasCisLabour' => null,
        'hasCisMaterials' => null,
        'contact' => null,
        'recurringInvoice' => null,
        'invoiceNumberPrefix' => null,
        'invoiceNumber' => null,
        'contactName' => null,
        'contactReference' => null,
        'date' => 'date',
        'dueDate' => 'date',
        'reference' => null,
        'mainAddressFreeForm' => null,
        'mainAddress' => null,
        'deliveryAddressFreeForm' => null,
        'deliveryAddress' => null,
        'notes' => null,
        'termsAndConditions' => null,
        'shippingNetAmount' => 'double',
        'shippingTaxRate' => null,
        'shippingTaxAmount' => 'double',
        'shippingTaxBreakdown' => null,
        'shippingTotalAmount' => 'double',
        'netAmount' => 'double',
        'taxAmount' => 'double',
        'totalAmount' => 'double',
        'paymentsAllocationsTotalAmount' => 'double',
        'paymentsAllocationsTotalDiscount' => 'double',
        'totalPaid' => 'double',
        'outstandingAmount' => 'double',
        'currency' => null,
        'exchangeRate' => 'double',
        'inverseExchangeRate' => 'double',
        'baseCurrencyShippingNetAmount' => 'double',
        'baseCurrencyShippingTaxAmount' => 'double',
        'baseCurrencyShippingTaxBreakdown' => null,
        'baseCurrencyShippingTotalAmount' => 'double',
        'totalQuantity' => 'double',
        'totalDiscountAmount' => 'double',
        'baseCurrencyTotalDiscountAmount' => 'double',
        'baseCurrencyNetAmount' => 'double',
        'baseCurrencyTaxAmount' => 'double',
        'baseCurrencyTotalAmount' => 'double',
        'baseCurrencyOutstandingAmount' => 'double',
        'status' => null,
        'sent' => null,
        'sentByEmail' => null,
        'voidReason' => null,
        'invoiceLines' => null,
        'taxAnalysis' => null,
        'detailedTaxAnalysis' => null,
        'paymentsAllocations' => null,
        'lastPaid' => 'date',
        'originalQuoteEstimate' => null,
        'taxAddressRegion' => null,
        'deliveryPerformanceDate' => null,
        'withholdingTaxRate' => 'double',
        'withholdingTaxAmount' => 'double',
        'baseCurrencyWithholdingTaxAmount' => 'double',
        'corrections' => null,
        'taxReconciled' => null,
        'migrated' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'legacyId' => false,
        'id' => false,
        'displayedAs' => false,
        'path' => false,
        'createdAt' => false,
        'updatedAt' => false,
        'links' => false,
        'editable' => false,
        'vatReverseCharge' => false,
        'taxCalculationMethod' => false,
        'destinationConsignment' => false,
        'destinationVatRatesInUse' => false,
        'transaction' => false,
        'transactionType' => false,
        'deletedAt' => false,
        'isCis' => false,
        'cisApplicableAmount' => false,
        'baseCurrencyCisApplicableAmount' => false,
        'totalAfterCisDeduction' => false,
        'baseCurrencyTotalAfterCisDeduction' => false,
        'hasCisLabour' => false,
        'hasCisMaterials' => false,
        'contact' => false,
        'recurringInvoice' => false,
        'invoiceNumberPrefix' => false,
        'invoiceNumber' => false,
        'contactName' => false,
        'contactReference' => false,
        'date' => false,
        'dueDate' => false,
        'reference' => false,
        'mainAddressFreeForm' => false,
        'mainAddress' => false,
        'deliveryAddressFreeForm' => false,
        'deliveryAddress' => false,
        'notes' => false,
        'termsAndConditions' => false,
        'shippingNetAmount' => false,
        'shippingTaxRate' => false,
        'shippingTaxAmount' => false,
        'shippingTaxBreakdown' => false,
        'shippingTotalAmount' => false,
        'netAmount' => false,
        'taxAmount' => false,
        'totalAmount' => false,
        'paymentsAllocationsTotalAmount' => false,
        'paymentsAllocationsTotalDiscount' => false,
        'totalPaid' => false,
        'outstandingAmount' => false,
        'currency' => false,
        'exchangeRate' => false,
        'inverseExchangeRate' => false,
        'baseCurrencyShippingNetAmount' => false,
        'baseCurrencyShippingTaxAmount' => false,
        'baseCurrencyShippingTaxBreakdown' => false,
        'baseCurrencyShippingTotalAmount' => false,
        'totalQuantity' => false,
        'totalDiscountAmount' => false,
        'baseCurrencyTotalDiscountAmount' => false,
        'baseCurrencyNetAmount' => false,
        'baseCurrencyTaxAmount' => false,
        'baseCurrencyTotalAmount' => false,
        'baseCurrencyOutstandingAmount' => false,
        'status' => false,
        'sent' => false,
        'sentByEmail' => false,
        'voidReason' => false,
        'invoiceLines' => false,
        'taxAnalysis' => false,
        'detailedTaxAnalysis' => false,
        'paymentsAllocations' => false,
        'lastPaid' => false,
        'originalQuoteEstimate' => false,
        'taxAddressRegion' => false,
        'deliveryPerformanceDate' => false,
        'withholdingTaxRate' => false,
        'withholdingTaxAmount' => false,
        'baseCurrencyWithholdingTaxAmount' => false,
        'corrections' => false,
        'taxReconciled' => false,
        'migrated' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'legacyId' => 'legacy_id',
        'id' => 'id',
        'displayedAs' => 'displayed_as',
        'path' => '$path',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'links' => 'links',
        'editable' => 'editable',
        'vatReverseCharge' => 'vat_reverse_charge',
        'taxCalculationMethod' => 'tax_calculation_method',
        'destinationConsignment' => 'destination_consignment',
        'destinationVatRatesInUse' => 'destination_vat_rates_in_use',
        'transaction' => 'transaction',
        'transactionType' => 'transaction_type',
        'deletedAt' => 'deleted_at',
        'isCis' => 'is_cis',
        'cisApplicableAmount' => 'cis_applicable_amount',
        'baseCurrencyCisApplicableAmount' => 'base_currency_cis_applicable_amount',
        'totalAfterCisDeduction' => 'total_after_cis_deduction',
        'baseCurrencyTotalAfterCisDeduction' => 'base_currency_total_after_cis_deduction',
        'hasCisLabour' => 'has_cis_labour',
        'hasCisMaterials' => 'has_cis_materials',
        'contact' => 'contact',
        'recurringInvoice' => 'recurring_invoice',
        'invoiceNumberPrefix' => 'invoice_number_prefix',
        'invoiceNumber' => 'invoice_number',
        'contactName' => 'contact_name',
        'contactReference' => 'contact_reference',
        'date' => 'date',
        'dueDate' => 'due_date',
        'reference' => 'reference',
        'mainAddressFreeForm' => 'main_address_free_form',
        'mainAddress' => 'main_address',
        'deliveryAddressFreeForm' => 'delivery_address_free_form',
        'deliveryAddress' => 'delivery_address',
        'notes' => 'notes',
        'termsAndConditions' => 'terms_and_conditions',
        'shippingNetAmount' => 'shipping_net_amount',
        'shippingTaxRate' => 'shipping_tax_rate',
        'shippingTaxAmount' => 'shipping_tax_amount',
        'shippingTaxBreakdown' => 'shipping_tax_breakdown',
        'shippingTotalAmount' => 'shipping_total_amount',
        'netAmount' => 'net_amount',
        'taxAmount' => 'tax_amount',
        'totalAmount' => 'total_amount',
        'paymentsAllocationsTotalAmount' => 'payments_allocations_total_amount',
        'paymentsAllocationsTotalDiscount' => 'payments_allocations_total_discount',
        'totalPaid' => 'total_paid',
        'outstandingAmount' => 'outstanding_amount',
        'currency' => 'currency',
        'exchangeRate' => 'exchange_rate',
        'inverseExchangeRate' => 'inverse_exchange_rate',
        'baseCurrencyShippingNetAmount' => 'base_currency_shipping_net_amount',
        'baseCurrencyShippingTaxAmount' => 'base_currency_shipping_tax_amount',
        'baseCurrencyShippingTaxBreakdown' => 'base_currency_shipping_tax_breakdown',
        'baseCurrencyShippingTotalAmount' => 'base_currency_shipping_total_amount',
        'totalQuantity' => 'total_quantity',
        'totalDiscountAmount' => 'total_discount_amount',
        'baseCurrencyTotalDiscountAmount' => 'base_currency_total_discount_amount',
        'baseCurrencyNetAmount' => 'base_currency_net_amount',
        'baseCurrencyTaxAmount' => 'base_currency_tax_amount',
        'baseCurrencyTotalAmount' => 'base_currency_total_amount',
        'baseCurrencyOutstandingAmount' => 'base_currency_outstanding_amount',
        'status' => 'status',
        'sent' => 'sent',
        'sentByEmail' => 'sent_by_email',
        'voidReason' => 'void_reason',
        'invoiceLines' => 'invoice_lines',
        'taxAnalysis' => 'tax_analysis',
        'detailedTaxAnalysis' => 'detailed_tax_analysis',
        'paymentsAllocations' => 'payments_allocations',
        'lastPaid' => 'last_paid',
        'originalQuoteEstimate' => 'original_quote_estimate',
        'taxAddressRegion' => 'tax_address_region',
        'deliveryPerformanceDate' => 'delivery_performance_date',
        'withholdingTaxRate' => 'withholding_tax_rate',
        'withholdingTaxAmount' => 'withholding_tax_amount',
        'baseCurrencyWithholdingTaxAmount' => 'base_currency_withholding_tax_amount',
        'corrections' => 'corrections',
        'taxReconciled' => 'tax_reconciled',
        'migrated' => 'migrated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'legacyId' => 'setLegacyId',
        'id' => 'setId',
        'displayedAs' => 'setDisplayedAs',
        'path' => 'setPath',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'links' => 'setLinks',
        'editable' => 'setEditable',
        'vatReverseCharge' => 'setVatReverseCharge',
        'taxCalculationMethod' => 'setTaxCalculationMethod',
        'destinationConsignment' => 'setDestinationConsignment',
        'destinationVatRatesInUse' => 'setDestinationVatRatesInUse',
        'transaction' => 'setTransaction',
        'transactionType' => 'setTransactionType',
        'deletedAt' => 'setDeletedAt',
        'isCis' => 'setIsCis',
        'cisApplicableAmount' => 'setCisApplicableAmount',
        'baseCurrencyCisApplicableAmount' => 'setBaseCurrencyCisApplicableAmount',
        'totalAfterCisDeduction' => 'setTotalAfterCisDeduction',
        'baseCurrencyTotalAfterCisDeduction' => 'setBaseCurrencyTotalAfterCisDeduction',
        'hasCisLabour' => 'setHasCisLabour',
        'hasCisMaterials' => 'setHasCisMaterials',
        'contact' => 'setContact',
        'recurringInvoice' => 'setRecurringInvoice',
        'invoiceNumberPrefix' => 'setInvoiceNumberPrefix',
        'invoiceNumber' => 'setInvoiceNumber',
        'contactName' => 'setContactName',
        'contactReference' => 'setContactReference',
        'date' => 'setDate',
        'dueDate' => 'setDueDate',
        'reference' => 'setReference',
        'mainAddressFreeForm' => 'setMainAddressFreeForm',
        'mainAddress' => 'setMainAddress',
        'deliveryAddressFreeForm' => 'setDeliveryAddressFreeForm',
        'deliveryAddress' => 'setDeliveryAddress',
        'notes' => 'setNotes',
        'termsAndConditions' => 'setTermsAndConditions',
        'shippingNetAmount' => 'setShippingNetAmount',
        'shippingTaxRate' => 'setShippingTaxRate',
        'shippingTaxAmount' => 'setShippingTaxAmount',
        'shippingTaxBreakdown' => 'setShippingTaxBreakdown',
        'shippingTotalAmount' => 'setShippingTotalAmount',
        'netAmount' => 'setNetAmount',
        'taxAmount' => 'setTaxAmount',
        'totalAmount' => 'setTotalAmount',
        'paymentsAllocationsTotalAmount' => 'setPaymentsAllocationsTotalAmount',
        'paymentsAllocationsTotalDiscount' => 'setPaymentsAllocationsTotalDiscount',
        'totalPaid' => 'setTotalPaid',
        'outstandingAmount' => 'setOutstandingAmount',
        'currency' => 'setCurrency',
        'exchangeRate' => 'setExchangeRate',
        'inverseExchangeRate' => 'setInverseExchangeRate',
        'baseCurrencyShippingNetAmount' => 'setBaseCurrencyShippingNetAmount',
        'baseCurrencyShippingTaxAmount' => 'setBaseCurrencyShippingTaxAmount',
        'baseCurrencyShippingTaxBreakdown' => 'setBaseCurrencyShippingTaxBreakdown',
        'baseCurrencyShippingTotalAmount' => 'setBaseCurrencyShippingTotalAmount',
        'totalQuantity' => 'setTotalQuantity',
        'totalDiscountAmount' => 'setTotalDiscountAmount',
        'baseCurrencyTotalDiscountAmount' => 'setBaseCurrencyTotalDiscountAmount',
        'baseCurrencyNetAmount' => 'setBaseCurrencyNetAmount',
        'baseCurrencyTaxAmount' => 'setBaseCurrencyTaxAmount',
        'baseCurrencyTotalAmount' => 'setBaseCurrencyTotalAmount',
        'baseCurrencyOutstandingAmount' => 'setBaseCurrencyOutstandingAmount',
        'status' => 'setStatus',
        'sent' => 'setSent',
        'sentByEmail' => 'setSentByEmail',
        'voidReason' => 'setVoidReason',
        'invoiceLines' => 'setInvoiceLines',
        'taxAnalysis' => 'setTaxAnalysis',
        'detailedTaxAnalysis' => 'setDetailedTaxAnalysis',
        'paymentsAllocations' => 'setPaymentsAllocations',
        'lastPaid' => 'setLastPaid',
        'originalQuoteEstimate' => 'setOriginalQuoteEstimate',
        'taxAddressRegion' => 'setTaxAddressRegion',
        'deliveryPerformanceDate' => 'setDeliveryPerformanceDate',
        'withholdingTaxRate' => 'setWithholdingTaxRate',
        'withholdingTaxAmount' => 'setWithholdingTaxAmount',
        'baseCurrencyWithholdingTaxAmount' => 'setBaseCurrencyWithholdingTaxAmount',
        'corrections' => 'setCorrections',
        'taxReconciled' => 'setTaxReconciled',
        'migrated' => 'setMigrated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'legacyId' => 'getLegacyId',
        'id' => 'getId',
        'displayedAs' => 'getDisplayedAs',
        'path' => 'getPath',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'links' => 'getLinks',
        'editable' => 'getEditable',
        'vatReverseCharge' => 'getVatReverseCharge',
        'taxCalculationMethod' => 'getTaxCalculationMethod',
        'destinationConsignment' => 'getDestinationConsignment',
        'destinationVatRatesInUse' => 'getDestinationVatRatesInUse',
        'transaction' => 'getTransaction',
        'transactionType' => 'getTransactionType',
        'deletedAt' => 'getDeletedAt',
        'isCis' => 'getIsCis',
        'cisApplicableAmount' => 'getCisApplicableAmount',
        'baseCurrencyCisApplicableAmount' => 'getBaseCurrencyCisApplicableAmount',
        'totalAfterCisDeduction' => 'getTotalAfterCisDeduction',
        'baseCurrencyTotalAfterCisDeduction' => 'getBaseCurrencyTotalAfterCisDeduction',
        'hasCisLabour' => 'getHasCisLabour',
        'hasCisMaterials' => 'getHasCisMaterials',
        'contact' => 'getContact',
        'recurringInvoice' => 'getRecurringInvoice',
        'invoiceNumberPrefix' => 'getInvoiceNumberPrefix',
        'invoiceNumber' => 'getInvoiceNumber',
        'contactName' => 'getContactName',
        'contactReference' => 'getContactReference',
        'date' => 'getDate',
        'dueDate' => 'getDueDate',
        'reference' => 'getReference',
        'mainAddressFreeForm' => 'getMainAddressFreeForm',
        'mainAddress' => 'getMainAddress',
        'deliveryAddressFreeForm' => 'getDeliveryAddressFreeForm',
        'deliveryAddress' => 'getDeliveryAddress',
        'notes' => 'getNotes',
        'termsAndConditions' => 'getTermsAndConditions',
        'shippingNetAmount' => 'getShippingNetAmount',
        'shippingTaxRate' => 'getShippingTaxRate',
        'shippingTaxAmount' => 'getShippingTaxAmount',
        'shippingTaxBreakdown' => 'getShippingTaxBreakdown',
        'shippingTotalAmount' => 'getShippingTotalAmount',
        'netAmount' => 'getNetAmount',
        'taxAmount' => 'getTaxAmount',
        'totalAmount' => 'getTotalAmount',
        'paymentsAllocationsTotalAmount' => 'getPaymentsAllocationsTotalAmount',
        'paymentsAllocationsTotalDiscount' => 'getPaymentsAllocationsTotalDiscount',
        'totalPaid' => 'getTotalPaid',
        'outstandingAmount' => 'getOutstandingAmount',
        'currency' => 'getCurrency',
        'exchangeRate' => 'getExchangeRate',
        'inverseExchangeRate' => 'getInverseExchangeRate',
        'baseCurrencyShippingNetAmount' => 'getBaseCurrencyShippingNetAmount',
        'baseCurrencyShippingTaxAmount' => 'getBaseCurrencyShippingTaxAmount',
        'baseCurrencyShippingTaxBreakdown' => 'getBaseCurrencyShippingTaxBreakdown',
        'baseCurrencyShippingTotalAmount' => 'getBaseCurrencyShippingTotalAmount',
        'totalQuantity' => 'getTotalQuantity',
        'totalDiscountAmount' => 'getTotalDiscountAmount',
        'baseCurrencyTotalDiscountAmount' => 'getBaseCurrencyTotalDiscountAmount',
        'baseCurrencyNetAmount' => 'getBaseCurrencyNetAmount',
        'baseCurrencyTaxAmount' => 'getBaseCurrencyTaxAmount',
        'baseCurrencyTotalAmount' => 'getBaseCurrencyTotalAmount',
        'baseCurrencyOutstandingAmount' => 'getBaseCurrencyOutstandingAmount',
        'status' => 'getStatus',
        'sent' => 'getSent',
        'sentByEmail' => 'getSentByEmail',
        'voidReason' => 'getVoidReason',
        'invoiceLines' => 'getInvoiceLines',
        'taxAnalysis' => 'getTaxAnalysis',
        'detailedTaxAnalysis' => 'getDetailedTaxAnalysis',
        'paymentsAllocations' => 'getPaymentsAllocations',
        'lastPaid' => 'getLastPaid',
        'originalQuoteEstimate' => 'getOriginalQuoteEstimate',
        'taxAddressRegion' => 'getTaxAddressRegion',
        'deliveryPerformanceDate' => 'getDeliveryPerformanceDate',
        'withholdingTaxRate' => 'getWithholdingTaxRate',
        'withholdingTaxAmount' => 'getWithholdingTaxAmount',
        'baseCurrencyWithholdingTaxAmount' => 'getBaseCurrencyWithholdingTaxAmount',
        'corrections' => 'getCorrections',
        'taxReconciled' => 'getTaxReconciled',
        'migrated' => 'getMigrated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('legacyId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('displayedAs', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('editable', $data ?? [], null);
        $this->setIfExists('vatReverseCharge', $data ?? [], null);
        $this->setIfExists('taxCalculationMethod', $data ?? [], null);
        $this->setIfExists('destinationConsignment', $data ?? [], null);
        $this->setIfExists('destinationVatRatesInUse', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
        $this->setIfExists('transactionType', $data ?? [], null);
        $this->setIfExists('deletedAt', $data ?? [], null);
        $this->setIfExists('isCis', $data ?? [], null);
        $this->setIfExists('cisApplicableAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyCisApplicableAmount', $data ?? [], null);
        $this->setIfExists('totalAfterCisDeduction', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalAfterCisDeduction', $data ?? [], null);
        $this->setIfExists('hasCisLabour', $data ?? [], null);
        $this->setIfExists('hasCisMaterials', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('recurringInvoice', $data ?? [], null);
        $this->setIfExists('invoiceNumberPrefix', $data ?? [], null);
        $this->setIfExists('invoiceNumber', $data ?? [], null);
        $this->setIfExists('contactName', $data ?? [], null);
        $this->setIfExists('contactReference', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('dueDate', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('mainAddressFreeForm', $data ?? [], null);
        $this->setIfExists('mainAddress', $data ?? [], null);
        $this->setIfExists('deliveryAddressFreeForm', $data ?? [], null);
        $this->setIfExists('deliveryAddress', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('termsAndConditions', $data ?? [], null);
        $this->setIfExists('shippingNetAmount', $data ?? [], null);
        $this->setIfExists('shippingTaxRate', $data ?? [], null);
        $this->setIfExists('shippingTaxAmount', $data ?? [], null);
        $this->setIfExists('shippingTaxBreakdown', $data ?? [], null);
        $this->setIfExists('shippingTotalAmount', $data ?? [], null);
        $this->setIfExists('netAmount', $data ?? [], null);
        $this->setIfExists('taxAmount', $data ?? [], null);
        $this->setIfExists('totalAmount', $data ?? [], null);
        $this->setIfExists('paymentsAllocationsTotalAmount', $data ?? [], null);
        $this->setIfExists('paymentsAllocationsTotalDiscount', $data ?? [], null);
        $this->setIfExists('totalPaid', $data ?? [], null);
        $this->setIfExists('outstandingAmount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('exchangeRate', $data ?? [], null);
        $this->setIfExists('inverseExchangeRate', $data ?? [], null);
        $this->setIfExists('baseCurrencyShippingNetAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyShippingTaxAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyShippingTaxBreakdown', $data ?? [], null);
        $this->setIfExists('baseCurrencyShippingTotalAmount', $data ?? [], null);
        $this->setIfExists('totalQuantity', $data ?? [], null);
        $this->setIfExists('totalDiscountAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalDiscountAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyNetAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTaxAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyOutstandingAmount', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('sent', $data ?? [], null);
        $this->setIfExists('sentByEmail', $data ?? [], null);
        $this->setIfExists('voidReason', $data ?? [], null);
        $this->setIfExists('invoiceLines', $data ?? [], null);
        $this->setIfExists('taxAnalysis', $data ?? [], null);
        $this->setIfExists('detailedTaxAnalysis', $data ?? [], null);
        $this->setIfExists('paymentsAllocations', $data ?? [], null);
        $this->setIfExists('lastPaid', $data ?? [], null);
        $this->setIfExists('originalQuoteEstimate', $data ?? [], null);
        $this->setIfExists('taxAddressRegion', $data ?? [], null);
        $this->setIfExists('deliveryPerformanceDate', $data ?? [], null);
        $this->setIfExists('withholdingTaxRate', $data ?? [], null);
        $this->setIfExists('withholdingTaxAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyWithholdingTaxAmount', $data ?? [], null);
        $this->setIfExists('corrections', $data ?? [], null);
        $this->setIfExists('taxReconciled', $data ?? [], null);
        $this->setIfExists('migrated', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['invoiceNumberPrefix']) && (mb_strlen($this->container['invoiceNumberPrefix']) > 6)) {
            $invalidProperties[] = "invalid value for 'invoiceNumberPrefix', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['contactName']) && (mb_strlen($this->container['contactName']) > 255)) {
            $invalidProperties[] = "invalid value for 'contactName', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contactReference']) && (mb_strlen($this->container['contactReference']) > 255)) {
            $invalidProperties[] = "invalid value for 'contactReference', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 25)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['mainAddressFreeForm']) && (mb_strlen($this->container['mainAddressFreeForm']) > 500)) {
            $invalidProperties[] = "invalid value for 'mainAddressFreeForm', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['deliveryAddressFreeForm']) && (mb_strlen($this->container['deliveryAddressFreeForm']) > 500)) {
            $invalidProperties[] = "invalid value for 'deliveryAddressFreeForm', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) > 2000)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['termsAndConditions']) && (mb_strlen($this->container['termsAndConditions']) > 2000)) {
            $invalidProperties[] = "invalid value for 'termsAndConditions', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['voidReason']) && (mb_strlen($this->container['voidReason']) > 200)) {
            $invalidProperties[] = "invalid value for 'voidReason', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['deliveryPerformanceDate']) && (mb_strlen($this->container['deliveryPerformanceDate']) > 40)) {
            $invalidProperties[] = "invalid value for 'deliveryPerformanceDate', the character length must be smaller than or equal to 40.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacyId
     *
     * @return int|null
     */
    public function getLegacyId(): ?int
    {
        return $this->container['legacyId'];
    }

    /**
     * Sets legacyId
     *
     * @param int|null $legacyId The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId(?int $legacyId): static
    {
        if (is_null($legacyId)) {
            throw new InvalidArgumentException('non-nullable legacyId cannot be null');
        }
        $this->container['legacyId'] = $legacyId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayedAs
     *
     * @return string|null
     */
    public function getDisplayedAs(): ?string
    {
        return $this->container['displayedAs'];
    }

    /**
     * Sets displayedAs
     *
     * @param string|null $displayedAs The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs(?string $displayedAs): static
    {
        if (is_null($displayedAs)) {
            throw new InvalidArgumentException('non-nullable displayedAs cannot be null');
        }
        $this->container['displayedAs'] = $displayedAs;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath(): ?string
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The API path for the resource
     *
     * @return $this
     */
    public function setPath(?string $path): static
    {
        if (is_null($path)) {
            throw new InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt The datetime when the item was created
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \SynergiTech\Sage\Model\Link[]|null
     */
    public function getLinks(): ?array
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \SynergiTech\Sage\Model\Link[]|null $links Links for the resource
     *
     * @return $this
     */
    public function setLinks(?array $links): static
    {
        if (is_null($links)) {
            throw new InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool|null
     */
    public function getEditable(): ?bool
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool|null $editable Indicates whether artefact can be edited
     *
     * @return $this
     */
    public function setEditable(?bool $editable): static
    {
        if (is_null($editable)) {
            throw new InvalidArgumentException('non-nullable editable cannot be null');
        }
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets vatReverseCharge
     *
     * @return bool|null
     */
    public function getVatReverseCharge(): ?bool
    {
        return $this->container['vatReverseCharge'];
    }

    /**
     * Sets vatReverseCharge
     *
     * @param bool|null $vatReverseCharge Indicates whether Domestic Reverser Charge is applied to the artefact. Only used for a UK business.
     *
     * @return $this
     */
    public function setVatReverseCharge(?bool $vatReverseCharge): static
    {
        if (is_null($vatReverseCharge)) {
            throw new InvalidArgumentException('non-nullable vatReverseCharge cannot be null');
        }
        $this->container['vatReverseCharge'] = $vatReverseCharge;

        return $this;
    }

    /**
     * Gets taxCalculationMethod
     *
     * @return string|null
     */
    public function getTaxCalculationMethod(): ?string
    {
        return $this->container['taxCalculationMethod'];
    }

    /**
     * Sets taxCalculationMethod
     *
     * @param string|null $taxCalculationMethod The tax calculation method, if applicable, for this sales invoice, returns invoice, cash or retailer.
     *
     * @return $this
     */
    public function setTaxCalculationMethod(?string $taxCalculationMethod): static
    {
        if (is_null($taxCalculationMethod)) {
            throw new InvalidArgumentException('non-nullable taxCalculationMethod cannot be null');
        }
        $this->container['taxCalculationMethod'] = $taxCalculationMethod;

        return $this;
    }

    /**
     * Gets destinationConsignment
     *
     * @return bool|null
     */
    public function getDestinationConsignment(): ?bool
    {
        return $this->container['destinationConsignment'];
    }

    /**
     * Sets destinationConsignment
     *
     * @param bool|null $destinationConsignment Indicates whether consignment checkbox for destination VAT is checked on the artefact. Only used for an UK business, where destination VAT was enabled in the settings.
     *
     * @return $this
     */
    public function setDestinationConsignment(?bool $destinationConsignment): static
    {
        if (is_null($destinationConsignment)) {
            throw new InvalidArgumentException('non-nullable destinationConsignment cannot be null');
        }
        $this->container['destinationConsignment'] = $destinationConsignment;

        return $this;
    }

    /**
     * Gets destinationVatRatesInUse
     *
     * @return bool|null
     */
    public function getDestinationVatRatesInUse(): ?bool
    {
        return $this->container['destinationVatRatesInUse'];
    }

    /**
     * Sets destinationVatRatesInUse
     *
     * @param bool|null $destinationVatRatesInUse Indicates whether destination vat rates are in use
     *
     * @return $this
     */
    public function setDestinationVatRatesInUse(?bool $destinationVatRatesInUse): static
    {
        if (is_null($destinationVatRatesInUse)) {
            throw new InvalidArgumentException('non-nullable destinationVatRatesInUse cannot be null');
        }
        $this->container['destinationVatRatesInUse'] = $destinationVatRatesInUse;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return \SynergiTech\Sage\Model\Transaction|null
     */
    public function getTransaction(): ?\SynergiTech\Sage\Model\Transaction
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \SynergiTech\Sage\Model\Transaction|null $transaction transaction
     *
     * @return $this
     */
    public function setTransaction(?\SynergiTech\Sage\Model\Transaction $transaction): static
    {
        if (is_null($transaction)) {
            throw new InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets transactionType
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getTransactionType(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['transactionType'];
    }

    /**
     * Sets transactionType
     *
     * @param \SynergiTech\Sage\Model\Base|null $transactionType transactionType
     *
     * @return $this
     */
    public function setTransactionType(?\SynergiTech\Sage\Model\Base $transactionType): static
    {
        if (is_null($transactionType)) {
            throw new InvalidArgumentException('non-nullable transactionType cannot be null');
        }
        $this->container['transactionType'] = $transactionType;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return \DateTime|null
     */
    public function getDeletedAt(): ?\DateTime
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param \DateTime|null $deletedAt The datetime when the item was deleted
     *
     * @return $this
     */
    public function setDeletedAt(?\DateTime $deletedAt): static
    {
        if (is_null($deletedAt)) {
            throw new InvalidArgumentException('non-nullable deletedAt cannot be null');
        }
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }

    /**
     * Gets isCis
     *
     * @return bool|null
     */
    public function getIsCis(): ?bool
    {
        return $this->container['isCis'];
    }

    /**
     * Sets isCis
     *
     * @param bool|null $isCis Identifies an artefact as CIS (Construction Industry Scheme) applicable - UK only
     *
     * @return $this
     */
    public function setIsCis(?bool $isCis): static
    {
        if (is_null($isCis)) {
            throw new InvalidArgumentException('non-nullable isCis cannot be null');
        }
        $this->container['isCis'] = $isCis;

        return $this;
    }

    /**
     * Gets cisApplicableAmount
     *
     * @return float|null
     */
    public function getCisApplicableAmount(): ?float
    {
        return $this->container['cisApplicableAmount'];
    }

    /**
     * Sets cisApplicableAmount
     *
     * @param float|null $cisApplicableAmount The total amount of CIS deductible labour - only applicable in UK
     *
     * @return $this
     */
    public function setCisApplicableAmount(?float $cisApplicableAmount): static
    {
        if (is_null($cisApplicableAmount)) {
            throw new InvalidArgumentException('non-nullable cisApplicableAmount cannot be null');
        }
        $this->container['cisApplicableAmount'] = $cisApplicableAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyCisApplicableAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyCisApplicableAmount(): ?float
    {
        return $this->container['baseCurrencyCisApplicableAmount'];
    }

    /**
     * Sets baseCurrencyCisApplicableAmount
     *
     * @param float|null $baseCurrencyCisApplicableAmount The total amount of CIS deductible labour in the base currency - only applicable in UK
     *
     * @return $this
     */
    public function setBaseCurrencyCisApplicableAmount(?float $baseCurrencyCisApplicableAmount): static
    {
        if (is_null($baseCurrencyCisApplicableAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyCisApplicableAmount cannot be null');
        }
        $this->container['baseCurrencyCisApplicableAmount'] = $baseCurrencyCisApplicableAmount;

        return $this;
    }

    /**
     * Gets totalAfterCisDeduction
     *
     * @return float|null
     */
    public function getTotalAfterCisDeduction(): ?float
    {
        return $this->container['totalAfterCisDeduction'];
    }

    /**
     * Sets totalAfterCisDeduction
     *
     * @param float|null $totalAfterCisDeduction The total of the artefact with the total of CIS deducted - only applicable in UK
     *
     * @return $this
     */
    public function setTotalAfterCisDeduction(?float $totalAfterCisDeduction): static
    {
        if (is_null($totalAfterCisDeduction)) {
            throw new InvalidArgumentException('non-nullable totalAfterCisDeduction cannot be null');
        }
        $this->container['totalAfterCisDeduction'] = $totalAfterCisDeduction;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalAfterCisDeduction
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalAfterCisDeduction(): ?float
    {
        return $this->container['baseCurrencyTotalAfterCisDeduction'];
    }

    /**
     * Sets baseCurrencyTotalAfterCisDeduction
     *
     * @param float|null $baseCurrencyTotalAfterCisDeduction The total of the artefact with the total of CIS deducted in the base currency - only applicable in UK
     *
     * @return $this
     */
    public function setBaseCurrencyTotalAfterCisDeduction(?float $baseCurrencyTotalAfterCisDeduction): static
    {
        if (is_null($baseCurrencyTotalAfterCisDeduction)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalAfterCisDeduction cannot be null');
        }
        $this->container['baseCurrencyTotalAfterCisDeduction'] = $baseCurrencyTotalAfterCisDeduction;

        return $this;
    }

    /**
     * Gets hasCisLabour
     *
     * @return bool|null
     */
    public function getHasCisLabour(): ?bool
    {
        return $this->container['hasCisLabour'];
    }

    /**
     * Sets hasCisLabour
     *
     * @param bool|null $hasCisLabour Identifies an artefact as having CIS Labour line items
     *
     * @return $this
     */
    public function setHasCisLabour(?bool $hasCisLabour): static
    {
        if (is_null($hasCisLabour)) {
            throw new InvalidArgumentException('non-nullable hasCisLabour cannot be null');
        }
        $this->container['hasCisLabour'] = $hasCisLabour;

        return $this;
    }

    /**
     * Gets hasCisMaterials
     *
     * @return bool|null
     */
    public function getHasCisMaterials(): ?bool
    {
        return $this->container['hasCisMaterials'];
    }

    /**
     * Sets hasCisMaterials
     *
     * @param bool|null $hasCisMaterials Identifies an artefact as having CIS Materials line items
     *
     * @return $this
     */
    public function setHasCisMaterials(?bool $hasCisMaterials): static
    {
        if (is_null($hasCisMaterials)) {
            throw new InvalidArgumentException('non-nullable hasCisMaterials cannot be null');
        }
        $this->container['hasCisMaterials'] = $hasCisMaterials;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \SynergiTech\Sage\Model\Contact|null
     */
    public function getContact(): ?\SynergiTech\Sage\Model\Contact
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \SynergiTech\Sage\Model\Contact|null $contact contact
     *
     * @return $this
     */
    public function setContact(?\SynergiTech\Sage\Model\Contact $contact): static
    {
        if (is_null($contact)) {
            throw new InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets recurringInvoice
     *
     * @return \SynergiTech\Sage\Model\RecurringSalesInvoice|null
     */
    public function getRecurringInvoice(): ?\SynergiTech\Sage\Model\RecurringSalesInvoice
    {
        return $this->container['recurringInvoice'];
    }

    /**
     * Sets recurringInvoice
     *
     * @param \SynergiTech\Sage\Model\RecurringSalesInvoice|null $recurringInvoice recurringInvoice
     *
     * @return $this
     */
    public function setRecurringInvoice(?\SynergiTech\Sage\Model\RecurringSalesInvoice $recurringInvoice): static
    {
        if (is_null($recurringInvoice)) {
            throw new InvalidArgumentException('non-nullable recurringInvoice cannot be null');
        }
        $this->container['recurringInvoice'] = $recurringInvoice;

        return $this;
    }

    /**
     * Gets invoiceNumberPrefix
     *
     * @return string|null
     */
    public function getInvoiceNumberPrefix(): ?string
    {
        return $this->container['invoiceNumberPrefix'];
    }

    /**
     * Sets invoiceNumberPrefix
     *
     * @param string|null $invoiceNumberPrefix The invoice number prefix
     *
     * @return $this
     */
    public function setInvoiceNumberPrefix(?string $invoiceNumberPrefix): static
    {
        if (is_null($invoiceNumberPrefix)) {
            throw new InvalidArgumentException('non-nullable invoiceNumberPrefix cannot be null');
        }
        if ((mb_strlen($invoiceNumberPrefix) > 6)) {
            throw new InvalidArgumentException('invalid length for $invoiceNumberPrefix when calling SalesInvoice., must be smaller than or equal to 6.');
        }

        $this->container['invoiceNumberPrefix'] = $invoiceNumberPrefix;

        return $this;
    }

    /**
     * Gets invoiceNumber
     *
     * @return string|null
     */
    public function getInvoiceNumber(): ?string
    {
        return $this->container['invoiceNumber'];
    }

    /**
     * Sets invoiceNumber
     *
     * @param string|null $invoiceNumber The generated invoice number
     *
     * @return $this
     */
    public function setInvoiceNumber(?string $invoiceNumber): static
    {
        if (is_null($invoiceNumber)) {
            throw new InvalidArgumentException('non-nullable invoiceNumber cannot be null');
        }
        $this->container['invoiceNumber'] = $invoiceNumber;

        return $this;
    }

    /**
     * Gets contactName
     *
     * @return string|null
     */
    public function getContactName(): ?string
    {
        return $this->container['contactName'];
    }

    /**
     * Sets contactName
     *
     * @param string|null $contactName The name of the contact when the invoice was created
     *
     * @return $this
     */
    public function setContactName(?string $contactName): static
    {
        if (is_null($contactName)) {
            throw new InvalidArgumentException('non-nullable contactName cannot be null');
        }
        if ((mb_strlen($contactName) > 255)) {
            throw new InvalidArgumentException('invalid length for $contactName when calling SalesInvoice., must be smaller than or equal to 255.');
        }

        $this->container['contactName'] = $contactName;

        return $this;
    }

    /**
     * Gets contactReference
     *
     * @return string|null
     */
    public function getContactReference(): ?string
    {
        return $this->container['contactReference'];
    }

    /**
     * Sets contactReference
     *
     * @param string|null $contactReference The reference of the contact when the invoice was created
     *
     * @return $this
     */
    public function setContactReference(?string $contactReference): static
    {
        if (is_null($contactReference)) {
            throw new InvalidArgumentException('non-nullable contactReference cannot be null');
        }
        if ((mb_strlen($contactReference) > 255)) {
            throw new InvalidArgumentException('invalid length for $contactReference when calling SalesInvoice., must be smaller than or equal to 255.');
        }

        $this->container['contactReference'] = $contactReference;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate(): ?\DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The date of the invoice
     *
     * @return $this
     */
    public function setDate(?\DateTime $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime|null
     */
    public function getDueDate(): ?\DateTime
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime|null $dueDate The due date of the invoice
     *
     * @return $this
     */
    public function setDueDate(?\DateTime $dueDate): static
    {
        if (is_null($dueDate)) {
            throw new InvalidArgumentException('non-nullable dueDate cannot be null');
        }
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference The reference for the invoice
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        if ((mb_strlen($reference) > 25)) {
            throw new InvalidArgumentException('invalid length for $reference when calling SalesInvoice., must be smaller than or equal to 25.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets mainAddressFreeForm
     *
     * @return string|null
     */
    public function getMainAddressFreeForm(): ?string
    {
        return $this->container['mainAddressFreeForm'];
    }

    /**
     * Sets mainAddressFreeForm
     *
     * @param string|null $mainAddressFreeForm The free-form main address of the invoice Note: An upper length limit of 500 characters is imposed conditionally and may not apply in every request. A hard upper limit of 65535 characters is imposed by the storage layer, though.
     *
     * @return $this
     */
    public function setMainAddressFreeForm(?string $mainAddressFreeForm): static
    {
        if (is_null($mainAddressFreeForm)) {
            throw new InvalidArgumentException('non-nullable mainAddressFreeForm cannot be null');
        }
        if ((mb_strlen($mainAddressFreeForm) > 500)) {
            throw new InvalidArgumentException('invalid length for $mainAddressFreeForm when calling SalesInvoice., must be smaller than or equal to 500.');
        }

        $this->container['mainAddressFreeForm'] = $mainAddressFreeForm;

        return $this;
    }

    /**
     * Gets mainAddress
     *
     * @return \SynergiTech\Sage\Model\SalesArtefactAddress|null
     */
    public function getMainAddress(): ?\SynergiTech\Sage\Model\SalesArtefactAddress
    {
        return $this->container['mainAddress'];
    }

    /**
     * Sets mainAddress
     *
     * @param \SynergiTech\Sage\Model\SalesArtefactAddress|null $mainAddress mainAddress
     *
     * @return $this
     */
    public function setMainAddress(?\SynergiTech\Sage\Model\SalesArtefactAddress $mainAddress): static
    {
        if (is_null($mainAddress)) {
            throw new InvalidArgumentException('non-nullable mainAddress cannot be null');
        }
        $this->container['mainAddress'] = $mainAddress;

        return $this;
    }

    /**
     * Gets deliveryAddressFreeForm
     *
     * @return string|null
     */
    public function getDeliveryAddressFreeForm(): ?string
    {
        return $this->container['deliveryAddressFreeForm'];
    }

    /**
     * Sets deliveryAddressFreeForm
     *
     * @param string|null $deliveryAddressFreeForm The free-form delivery address of the invoice Note: An upper length limit of 500 characters is imposed conditionally and may not apply in every request. A hard upper limit of 65535 characters is imposed by the storage layer, though.
     *
     * @return $this
     */
    public function setDeliveryAddressFreeForm(?string $deliveryAddressFreeForm): static
    {
        if (is_null($deliveryAddressFreeForm)) {
            throw new InvalidArgumentException('non-nullable deliveryAddressFreeForm cannot be null');
        }
        if ((mb_strlen($deliveryAddressFreeForm) > 500)) {
            throw new InvalidArgumentException('invalid length for $deliveryAddressFreeForm when calling SalesInvoice., must be smaller than or equal to 500.');
        }

        $this->container['deliveryAddressFreeForm'] = $deliveryAddressFreeForm;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return \SynergiTech\Sage\Model\SalesArtefactAddress|null
     */
    public function getDeliveryAddress(): ?\SynergiTech\Sage\Model\SalesArtefactAddress
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param \SynergiTech\Sage\Model\SalesArtefactAddress|null $deliveryAddress deliveryAddress
     *
     * @return $this
     */
    public function setDeliveryAddress(?\SynergiTech\Sage\Model\SalesArtefactAddress $deliveryAddress): static
    {
        if (is_null($deliveryAddress)) {
            throw new InvalidArgumentException('non-nullable deliveryAddress cannot be null');
        }
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes(): ?string
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Invoice notes
     *
     * @return $this
     */
    public function setNotes(?string $notes): static
    {
        if (is_null($notes)) {
            throw new InvalidArgumentException('non-nullable notes cannot be null');
        }
        if ((mb_strlen($notes) > 2000)) {
            throw new InvalidArgumentException('invalid length for $notes when calling SalesInvoice., must be smaller than or equal to 2000.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets termsAndConditions
     *
     * @return string|null
     */
    public function getTermsAndConditions(): ?string
    {
        return $this->container['termsAndConditions'];
    }

    /**
     * Sets termsAndConditions
     *
     * @param string|null $termsAndConditions Invoice terms and conditions
     *
     * @return $this
     */
    public function setTermsAndConditions(?string $termsAndConditions): static
    {
        if (is_null($termsAndConditions)) {
            throw new InvalidArgumentException('non-nullable termsAndConditions cannot be null');
        }
        if ((mb_strlen($termsAndConditions) > 2000)) {
            throw new InvalidArgumentException('invalid length for $termsAndConditions when calling SalesInvoice., must be smaller than or equal to 2000.');
        }

        $this->container['termsAndConditions'] = $termsAndConditions;

        return $this;
    }

    /**
     * Gets shippingNetAmount
     *
     * @return float|null
     */
    public function getShippingNetAmount(): ?float
    {
        return $this->container['shippingNetAmount'];
    }

    /**
     * Sets shippingNetAmount
     *
     * @param float|null $shippingNetAmount The net shipping amount
     *
     * @return $this
     */
    public function setShippingNetAmount(?float $shippingNetAmount): static
    {
        if (is_null($shippingNetAmount)) {
            throw new InvalidArgumentException('non-nullable shippingNetAmount cannot be null');
        }
        $this->container['shippingNetAmount'] = $shippingNetAmount;

        return $this;
    }

    /**
     * Gets shippingTaxRate
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getShippingTaxRate(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['shippingTaxRate'];
    }

    /**
     * Sets shippingTaxRate
     *
     * @param \SynergiTech\Sage\Model\Base|null $shippingTaxRate shippingTaxRate
     *
     * @return $this
     */
    public function setShippingTaxRate(?\SynergiTech\Sage\Model\Base $shippingTaxRate): static
    {
        if (is_null($shippingTaxRate)) {
            throw new InvalidArgumentException('non-nullable shippingTaxRate cannot be null');
        }
        $this->container['shippingTaxRate'] = $shippingTaxRate;

        return $this;
    }

    /**
     * Gets shippingTaxAmount
     *
     * @return float|null
     */
    public function getShippingTaxAmount(): ?float
    {
        return $this->container['shippingTaxAmount'];
    }

    /**
     * Sets shippingTaxAmount
     *
     * @param float|null $shippingTaxAmount The tax shipping amount. NOTE: This is not required for POST/PUT requests as the shipping tax is calculated based on the shipping_net_amount and the shipping_tax_rate.
     *
     * @return $this
     */
    public function setShippingTaxAmount(?float $shippingTaxAmount): static
    {
        if (is_null($shippingTaxAmount)) {
            throw new InvalidArgumentException('non-nullable shippingTaxAmount cannot be null');
        }
        $this->container['shippingTaxAmount'] = $shippingTaxAmount;

        return $this;
    }

    /**
     * Gets shippingTaxBreakdown
     *
     * @return \SynergiTech\Sage\Model\TaxBreakdown[]|null
     */
    public function getShippingTaxBreakdown(): ?array
    {
        return $this->container['shippingTaxBreakdown'];
    }

    /**
     * Sets shippingTaxBreakdown
     *
     * @param \SynergiTech\Sage\Model\TaxBreakdown[]|null $shippingTaxBreakdown The shipping tax breakdown for the invoice
     *
     * @return $this
     */
    public function setShippingTaxBreakdown(?array $shippingTaxBreakdown): static
    {
        if (is_null($shippingTaxBreakdown)) {
            throw new InvalidArgumentException('non-nullable shippingTaxBreakdown cannot be null');
        }
        $this->container['shippingTaxBreakdown'] = $shippingTaxBreakdown;

        return $this;
    }

    /**
     * Gets shippingTotalAmount
     *
     * @return float|null
     */
    public function getShippingTotalAmount(): ?float
    {
        return $this->container['shippingTotalAmount'];
    }

    /**
     * Sets shippingTotalAmount
     *
     * @param float|null $shippingTotalAmount The total shipping amount
     *
     * @return $this
     */
    public function setShippingTotalAmount(?float $shippingTotalAmount): static
    {
        if (is_null($shippingTotalAmount)) {
            throw new InvalidArgumentException('non-nullable shippingTotalAmount cannot be null');
        }
        $this->container['shippingTotalAmount'] = $shippingTotalAmount;

        return $this;
    }

    /**
     * Gets netAmount
     *
     * @return float|null
     */
    public function getNetAmount(): ?float
    {
        return $this->container['netAmount'];
    }

    /**
     * Sets netAmount
     *
     * @param float|null $netAmount The net amount of the invoice
     *
     * @return $this
     */
    public function setNetAmount(?float $netAmount): static
    {
        if (is_null($netAmount)) {
            throw new InvalidArgumentException('non-nullable netAmount cannot be null');
        }
        $this->container['netAmount'] = $netAmount;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return float|null
     */
    public function getTaxAmount(): ?float
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param float|null $taxAmount The tax amount of the invoice
     *
     * @return $this
     */
    public function setTaxAmount(?float $taxAmount): static
    {
        if (is_null($taxAmount)) {
            throw new InvalidArgumentException('non-nullable taxAmount cannot be null');
        }
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets totalAmount
     *
     * @return float|null
     */
    public function getTotalAmount(): ?float
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     *
     * @param float|null $totalAmount The total amount of the invoice
     *
     * @return $this
     */
    public function setTotalAmount(?float $totalAmount): static
    {
        if (is_null($totalAmount)) {
            throw new InvalidArgumentException('non-nullable totalAmount cannot be null');
        }
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets paymentsAllocationsTotalAmount
     *
     * @return float|null
     */
    public function getPaymentsAllocationsTotalAmount(): ?float
    {
        return $this->container['paymentsAllocationsTotalAmount'];
    }

    /**
     * Sets paymentsAllocationsTotalAmount
     *
     * @param float|null $paymentsAllocationsTotalAmount The total amount of all payments and allocations
     *
     * @return $this
     */
    public function setPaymentsAllocationsTotalAmount(?float $paymentsAllocationsTotalAmount): static
    {
        if (is_null($paymentsAllocationsTotalAmount)) {
            throw new InvalidArgumentException('non-nullable paymentsAllocationsTotalAmount cannot be null');
        }
        $this->container['paymentsAllocationsTotalAmount'] = $paymentsAllocationsTotalAmount;

        return $this;
    }

    /**
     * Gets paymentsAllocationsTotalDiscount
     *
     * @return float|null
     */
    public function getPaymentsAllocationsTotalDiscount(): ?float
    {
        return $this->container['paymentsAllocationsTotalDiscount'];
    }

    /**
     * Sets paymentsAllocationsTotalDiscount
     *
     * @param float|null $paymentsAllocationsTotalDiscount The total discount of all payments and allocations
     *
     * @return $this
     */
    public function setPaymentsAllocationsTotalDiscount(?float $paymentsAllocationsTotalDiscount): static
    {
        if (is_null($paymentsAllocationsTotalDiscount)) {
            throw new InvalidArgumentException('non-nullable paymentsAllocationsTotalDiscount cannot be null');
        }
        $this->container['paymentsAllocationsTotalDiscount'] = $paymentsAllocationsTotalDiscount;

        return $this;
    }

    /**
     * Gets totalPaid
     *
     * @return float|null
     */
    public function getTotalPaid(): ?float
    {
        return $this->container['totalPaid'];
    }

    /**
     * Sets totalPaid
     *
     * @param float|null $totalPaid The total paid amount of the invoice including any payments, allocations and discounts
     *
     * @return $this
     */
    public function setTotalPaid(?float $totalPaid): static
    {
        if (is_null($totalPaid)) {
            throw new InvalidArgumentException('non-nullable totalPaid cannot be null');
        }
        $this->container['totalPaid'] = $totalPaid;

        return $this;
    }

    /**
     * Gets outstandingAmount
     *
     * @return float|null
     */
    public function getOutstandingAmount(): ?float
    {
        return $this->container['outstandingAmount'];
    }

    /**
     * Sets outstandingAmount
     *
     * @param float|null $outstandingAmount The outstanding amount of the invoice
     *
     * @return $this
     */
    public function setOutstandingAmount(?float $outstandingAmount): static
    {
        if (is_null($outstandingAmount)) {
            throw new InvalidArgumentException('non-nullable outstandingAmount cannot be null');
        }
        $this->container['outstandingAmount'] = $outstandingAmount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getCurrency(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \SynergiTech\Sage\Model\Base|null $currency currency
     *
     * @return $this
     */
    public function setCurrency(?\SynergiTech\Sage\Model\Base $currency): static
    {
        if (is_null($currency)) {
            throw new InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets exchangeRate
     *
     * @return float|null
     */
    public function getExchangeRate(): ?float
    {
        return $this->container['exchangeRate'];
    }

    /**
     * Sets exchangeRate
     *
     * @param float|null $exchangeRate The exchange rate for the invoice
     *
     * @return $this
     */
    public function setExchangeRate(?float $exchangeRate): static
    {
        if (is_null($exchangeRate)) {
            throw new InvalidArgumentException('non-nullable exchangeRate cannot be null');
        }
        $this->container['exchangeRate'] = $exchangeRate;

        return $this;
    }

    /**
     * Gets inverseExchangeRate
     *
     * @return float|null
     */
    public function getInverseExchangeRate(): ?float
    {
        return $this->container['inverseExchangeRate'];
    }

    /**
     * Sets inverseExchangeRate
     *
     * @param float|null $inverseExchangeRate The inverse exchange rate for the invoice
     *
     * @return $this
     */
    public function setInverseExchangeRate(?float $inverseExchangeRate): static
    {
        if (is_null($inverseExchangeRate)) {
            throw new InvalidArgumentException('non-nullable inverseExchangeRate cannot be null');
        }
        $this->container['inverseExchangeRate'] = $inverseExchangeRate;

        return $this;
    }

    /**
     * Gets baseCurrencyShippingNetAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyShippingNetAmount(): ?float
    {
        return $this->container['baseCurrencyShippingNetAmount'];
    }

    /**
     * Sets baseCurrencyShippingNetAmount
     *
     * @param float|null $baseCurrencyShippingNetAmount The net shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingNetAmount(?float $baseCurrencyShippingNetAmount): static
    {
        if (is_null($baseCurrencyShippingNetAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyShippingNetAmount cannot be null');
        }
        $this->container['baseCurrencyShippingNetAmount'] = $baseCurrencyShippingNetAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyShippingTaxAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyShippingTaxAmount(): ?float
    {
        return $this->container['baseCurrencyShippingTaxAmount'];
    }

    /**
     * Sets baseCurrencyShippingTaxAmount
     *
     * @param float|null $baseCurrencyShippingTaxAmount The tax shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingTaxAmount(?float $baseCurrencyShippingTaxAmount): static
    {
        if (is_null($baseCurrencyShippingTaxAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyShippingTaxAmount cannot be null');
        }
        $this->container['baseCurrencyShippingTaxAmount'] = $baseCurrencyShippingTaxAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyShippingTaxBreakdown
     *
     * @return \SynergiTech\Sage\Model\TaxBreakdown[]|null
     */
    public function getBaseCurrencyShippingTaxBreakdown(): ?array
    {
        return $this->container['baseCurrencyShippingTaxBreakdown'];
    }

    /**
     * Sets baseCurrencyShippingTaxBreakdown
     *
     * @param \SynergiTech\Sage\Model\TaxBreakdown[]|null $baseCurrencyShippingTaxBreakdown The shipping tax breakdown for the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingTaxBreakdown(?array $baseCurrencyShippingTaxBreakdown): static
    {
        if (is_null($baseCurrencyShippingTaxBreakdown)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyShippingTaxBreakdown cannot be null');
        }
        $this->container['baseCurrencyShippingTaxBreakdown'] = $baseCurrencyShippingTaxBreakdown;

        return $this;
    }

    /**
     * Gets baseCurrencyShippingTotalAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyShippingTotalAmount(): ?float
    {
        return $this->container['baseCurrencyShippingTotalAmount'];
    }

    /**
     * Sets baseCurrencyShippingTotalAmount
     *
     * @param float|null $baseCurrencyShippingTotalAmount The total shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingTotalAmount(?float $baseCurrencyShippingTotalAmount): static
    {
        if (is_null($baseCurrencyShippingTotalAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyShippingTotalAmount cannot be null');
        }
        $this->container['baseCurrencyShippingTotalAmount'] = $baseCurrencyShippingTotalAmount;

        return $this;
    }

    /**
     * Gets totalQuantity
     *
     * @return float|null
     */
    public function getTotalQuantity(): ?float
    {
        return $this->container['totalQuantity'];
    }

    /**
     * Sets totalQuantity
     *
     * @param float|null $totalQuantity The total quantity of the invoice
     *
     * @return $this
     */
    public function setTotalQuantity(?float $totalQuantity): static
    {
        if (is_null($totalQuantity)) {
            throw new InvalidArgumentException('non-nullable totalQuantity cannot be null');
        }
        $this->container['totalQuantity'] = $totalQuantity;

        return $this;
    }

    /**
     * Gets totalDiscountAmount
     *
     * @return float|null
     */
    public function getTotalDiscountAmount(): ?float
    {
        return $this->container['totalDiscountAmount'];
    }

    /**
     * Sets totalDiscountAmount
     *
     * @param float|null $totalDiscountAmount The discount amount on the invoice
     *
     * @return $this
     */
    public function setTotalDiscountAmount(?float $totalDiscountAmount): static
    {
        if (is_null($totalDiscountAmount)) {
            throw new InvalidArgumentException('non-nullable totalDiscountAmount cannot be null');
        }
        $this->container['totalDiscountAmount'] = $totalDiscountAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalDiscountAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalDiscountAmount(): ?float
    {
        return $this->container['baseCurrencyTotalDiscountAmount'];
    }

    /**
     * Sets baseCurrencyTotalDiscountAmount
     *
     * @param float|null $baseCurrencyTotalDiscountAmount The discount amount on the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTotalDiscountAmount(?float $baseCurrencyTotalDiscountAmount): static
    {
        if (is_null($baseCurrencyTotalDiscountAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalDiscountAmount cannot be null');
        }
        $this->container['baseCurrencyTotalDiscountAmount'] = $baseCurrencyTotalDiscountAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyNetAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyNetAmount(): ?float
    {
        return $this->container['baseCurrencyNetAmount'];
    }

    /**
     * Sets baseCurrencyNetAmount
     *
     * @param float|null $baseCurrencyNetAmount The net amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyNetAmount(?float $baseCurrencyNetAmount): static
    {
        if (is_null($baseCurrencyNetAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyNetAmount cannot be null');
        }
        $this->container['baseCurrencyNetAmount'] = $baseCurrencyNetAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTaxAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTaxAmount(): ?float
    {
        return $this->container['baseCurrencyTaxAmount'];
    }

    /**
     * Sets baseCurrencyTaxAmount
     *
     * @param float|null $baseCurrencyTaxAmount The tax amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTaxAmount(?float $baseCurrencyTaxAmount): static
    {
        if (is_null($baseCurrencyTaxAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTaxAmount cannot be null');
        }
        $this->container['baseCurrencyTaxAmount'] = $baseCurrencyTaxAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalAmount(): ?float
    {
        return $this->container['baseCurrencyTotalAmount'];
    }

    /**
     * Sets baseCurrencyTotalAmount
     *
     * @param float|null $baseCurrencyTotalAmount The total amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTotalAmount(?float $baseCurrencyTotalAmount): static
    {
        if (is_null($baseCurrencyTotalAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalAmount cannot be null');
        }
        $this->container['baseCurrencyTotalAmount'] = $baseCurrencyTotalAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyOutstandingAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyOutstandingAmount(): ?float
    {
        return $this->container['baseCurrencyOutstandingAmount'];
    }

    /**
     * Sets baseCurrencyOutstandingAmount
     *
     * @param float|null $baseCurrencyOutstandingAmount The outstanding amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyOutstandingAmount(?float $baseCurrencyOutstandingAmount): static
    {
        if (is_null($baseCurrencyOutstandingAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyOutstandingAmount cannot be null');
        }
        $this->container['baseCurrencyOutstandingAmount'] = $baseCurrencyOutstandingAmount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getStatus(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SynergiTech\Sage\Model\Base|null $status status
     *
     * @return $this
     */
    public function setStatus(?\SynergiTech\Sage\Model\Base $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return bool|null
     */
    public function getSent(): ?bool
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param bool|null $sent Indicates whether the invoice has been sent
     *
     * @return $this
     */
    public function setSent(?bool $sent): static
    {
        if (is_null($sent)) {
            throw new InvalidArgumentException('non-nullable sent cannot be null');
        }
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets sentByEmail
     *
     * @return bool|null
     */
    public function getSentByEmail(): ?bool
    {
        return $this->container['sentByEmail'];
    }

    /**
     * Sets sentByEmail
     *
     * @param bool|null $sentByEmail Indicates whether the invoice has been emailed
     *
     * @return $this
     */
    public function setSentByEmail(?bool $sentByEmail): static
    {
        if (is_null($sentByEmail)) {
            throw new InvalidArgumentException('non-nullable sentByEmail cannot be null');
        }
        $this->container['sentByEmail'] = $sentByEmail;

        return $this;
    }

    /**
     * Gets voidReason
     *
     * @return string|null
     */
    public function getVoidReason(): ?string
    {
        return $this->container['voidReason'];
    }

    /**
     * Sets voidReason
     *
     * @param string|null $voidReason The reason the invoice was voided
     *
     * @return $this
     */
    public function setVoidReason(?string $voidReason): static
    {
        if (is_null($voidReason)) {
            throw new InvalidArgumentException('non-nullable voidReason cannot be null');
        }
        if ((mb_strlen($voidReason) > 200)) {
            throw new InvalidArgumentException('invalid length for $voidReason when calling SalesInvoice., must be smaller than or equal to 200.');
        }

        $this->container['voidReason'] = $voidReason;

        return $this;
    }

    /**
     * Gets invoiceLines
     *
     * @return \SynergiTech\Sage\Model\SalesInvoiceLineItem[]|null
     */
    public function getInvoiceLines(): ?array
    {
        return $this->container['invoiceLines'];
    }

    /**
     * Sets invoiceLines
     *
     * @param \SynergiTech\Sage\Model\SalesInvoiceLineItem[]|null $invoiceLines The invoice lines of the invoice
     *
     * @return $this
     */
    public function setInvoiceLines(?array $invoiceLines): static
    {
        if (is_null($invoiceLines)) {
            throw new InvalidArgumentException('non-nullable invoiceLines cannot be null');
        }
        $this->container['invoiceLines'] = $invoiceLines;

        return $this;
    }

    /**
     * Gets taxAnalysis
     *
     * @return \SynergiTech\Sage\Model\ArtefactTaxAnalysis[]|null
     */
    public function getTaxAnalysis(): ?array
    {
        return $this->container['taxAnalysis'];
    }

    /**
     * Sets taxAnalysis
     *
     * @param \SynergiTech\Sage\Model\ArtefactTaxAnalysis[]|null $taxAnalysis The invoice tax analysis
     *
     * @return $this
     */
    public function setTaxAnalysis(?array $taxAnalysis): static
    {
        if (is_null($taxAnalysis)) {
            throw new InvalidArgumentException('non-nullable taxAnalysis cannot be null');
        }
        $this->container['taxAnalysis'] = $taxAnalysis;

        return $this;
    }

    /**
     * Gets detailedTaxAnalysis
     *
     * @return \SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysis|null
     */
    public function getDetailedTaxAnalysis(): ?\SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysis
    {
        return $this->container['detailedTaxAnalysis'];
    }

    /**
     * Sets detailedTaxAnalysis
     *
     * @param \SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysis|null $detailedTaxAnalysis detailedTaxAnalysis
     *
     * @return $this
     */
    public function setDetailedTaxAnalysis(?\SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysis $detailedTaxAnalysis): static
    {
        if (is_null($detailedTaxAnalysis)) {
            throw new InvalidArgumentException('non-nullable detailedTaxAnalysis cannot be null');
        }
        $this->container['detailedTaxAnalysis'] = $detailedTaxAnalysis;

        return $this;
    }

    /**
     * Gets paymentsAllocations
     *
     * @return \SynergiTech\Sage\Model\PaymentAllocation[]|null
     */
    public function getPaymentsAllocations(): ?array
    {
        return $this->container['paymentsAllocations'];
    }

    /**
     * Sets paymentsAllocations
     *
     * @param \SynergiTech\Sage\Model\PaymentAllocation[]|null $paymentsAllocations The associated payments and allocations
     *
     * @return $this
     */
    public function setPaymentsAllocations(?array $paymentsAllocations): static
    {
        if (is_null($paymentsAllocations)) {
            throw new InvalidArgumentException('non-nullable paymentsAllocations cannot be null');
        }
        $this->container['paymentsAllocations'] = $paymentsAllocations;

        return $this;
    }

    /**
     * Gets lastPaid
     *
     * @return \DateTime|null
     */
    public function getLastPaid(): ?\DateTime
    {
        return $this->container['lastPaid'];
    }

    /**
     * Sets lastPaid
     *
     * @param \DateTime|null $lastPaid The date of the last payment
     *
     * @return $this
     */
    public function setLastPaid(?\DateTime $lastPaid): static
    {
        if (is_null($lastPaid)) {
            throw new InvalidArgumentException('non-nullable lastPaid cannot be null');
        }
        $this->container['lastPaid'] = $lastPaid;

        return $this;
    }

    /**
     * Gets originalQuoteEstimate
     *
     * @return \SynergiTech\Sage\Model\SalesInvoiceQuoteEstimate|null
     */
    public function getOriginalQuoteEstimate(): ?\SynergiTech\Sage\Model\SalesInvoiceQuoteEstimate
    {
        return $this->container['originalQuoteEstimate'];
    }

    /**
     * Sets originalQuoteEstimate
     *
     * @param \SynergiTech\Sage\Model\SalesInvoiceQuoteEstimate|null $originalQuoteEstimate originalQuoteEstimate
     *
     * @return $this
     */
    public function setOriginalQuoteEstimate(?\SynergiTech\Sage\Model\SalesInvoiceQuoteEstimate $originalQuoteEstimate): static
    {
        if (is_null($originalQuoteEstimate)) {
            throw new InvalidArgumentException('non-nullable originalQuoteEstimate cannot be null');
        }
        $this->container['originalQuoteEstimate'] = $originalQuoteEstimate;

        return $this;
    }

    /**
     * Gets taxAddressRegion
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getTaxAddressRegion(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['taxAddressRegion'];
    }

    /**
     * Sets taxAddressRegion
     *
     * @param \SynergiTech\Sage\Model\Base|null $taxAddressRegion taxAddressRegion
     *
     * @return $this
     */
    public function setTaxAddressRegion(?\SynergiTech\Sage\Model\Base $taxAddressRegion): static
    {
        if (is_null($taxAddressRegion)) {
            throw new InvalidArgumentException('non-nullable taxAddressRegion cannot be null');
        }
        $this->container['taxAddressRegion'] = $taxAddressRegion;

        return $this;
    }

    /**
     * Gets deliveryPerformanceDate
     *
     * @return string|null
     */
    public function getDeliveryPerformanceDate(): ?string
    {
        return $this->container['deliveryPerformanceDate'];
    }

    /**
     * Sets deliveryPerformanceDate
     *
     * @param string|null $deliveryPerformanceDate Delivery/Performance Date (Germany only)
     *
     * @return $this
     */
    public function setDeliveryPerformanceDate(?string $deliveryPerformanceDate): static
    {
        if (is_null($deliveryPerformanceDate)) {
            throw new InvalidArgumentException('non-nullable deliveryPerformanceDate cannot be null');
        }
        if ((mb_strlen($deliveryPerformanceDate) > 40)) {
            throw new InvalidArgumentException('invalid length for $deliveryPerformanceDate when calling SalesInvoice., must be smaller than or equal to 40.');
        }

        $this->container['deliveryPerformanceDate'] = $deliveryPerformanceDate;

        return $this;
    }

    /**
     * Gets withholdingTaxRate
     *
     * @return float|null
     */
    public function getWithholdingTaxRate(): ?float
    {
        return $this->container['withholdingTaxRate'];
    }

    /**
     * Sets withholdingTaxRate
     *
     * @param float|null $withholdingTaxRate The withheld Tax Rate - only applicable in UK (CIS subcontractor tax rate) and Spain (IRPF)
     *
     * @return $this
     */
    public function setWithholdingTaxRate(?float $withholdingTaxRate): static
    {
        if (is_null($withholdingTaxRate)) {
            throw new InvalidArgumentException('non-nullable withholdingTaxRate cannot be null');
        }
        $this->container['withholdingTaxRate'] = $withholdingTaxRate;

        return $this;
    }

    /**
     * Gets withholdingTaxAmount
     *
     * @return float|null
     */
    public function getWithholdingTaxAmount(): ?float
    {
        return $this->container['withholdingTaxAmount'];
    }

    /**
     * Sets withholdingTaxAmount
     *
     * @param float|null $withholdingTaxAmount The withheld Tax Amount - only applicable in UK (CIS subcontractor tax) and Spain (IRPF)
     *
     * @return $this
     */
    public function setWithholdingTaxAmount(?float $withholdingTaxAmount): static
    {
        if (is_null($withholdingTaxAmount)) {
            throw new InvalidArgumentException('non-nullable withholdingTaxAmount cannot be null');
        }
        $this->container['withholdingTaxAmount'] = $withholdingTaxAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyWithholdingTaxAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyWithholdingTaxAmount(): ?float
    {
        return $this->container['baseCurrencyWithholdingTaxAmount'];
    }

    /**
     * Sets baseCurrencyWithholdingTaxAmount
     *
     * @param float|null $baseCurrencyWithholdingTaxAmount The withheld Tax Amount in the base currency - only applicable in UK (CIS subcontractor tax) and Spain (IRPF)
     *
     * @return $this
     */
    public function setBaseCurrencyWithholdingTaxAmount(?float $baseCurrencyWithholdingTaxAmount): static
    {
        if (is_null($baseCurrencyWithholdingTaxAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyWithholdingTaxAmount cannot be null');
        }
        $this->container['baseCurrencyWithholdingTaxAmount'] = $baseCurrencyWithholdingTaxAmount;

        return $this;
    }

    /**
     * Gets corrections
     *
     * @return \SynergiTech\Sage\Model\SalesCorrectiveInvoice[]|null
     */
    public function getCorrections(): ?array
    {
        return $this->container['corrections'];
    }

    /**
     * Sets corrections
     *
     * @param \SynergiTech\Sage\Model\SalesCorrectiveInvoice[]|null $corrections The corrective entries associated with the invoice
     *
     * @return $this
     */
    public function setCorrections(?array $corrections): static
    {
        if (is_null($corrections)) {
            throw new InvalidArgumentException('non-nullable corrections cannot be null');
        }
        $this->container['corrections'] = $corrections;

        return $this;
    }

    /**
     * Gets taxReconciled
     *
     * @return bool|null
     */
    public function getTaxReconciled(): ?bool
    {
        return $this->container['taxReconciled'];
    }

    /**
     * Sets taxReconciled
     *
     * @param bool|null $taxReconciled Indicates if the sales invoice is tax reconciled or not.
     *
     * @return $this
     */
    public function setTaxReconciled(?bool $taxReconciled): static
    {
        if (is_null($taxReconciled)) {
            throw new InvalidArgumentException('non-nullable taxReconciled cannot be null');
        }
        $this->container['taxReconciled'] = $taxReconciled;

        return $this;
    }

    /**
     * Gets migrated
     *
     * @return bool|null
     */
    public function getMigrated(): ?bool
    {
        return $this->container['migrated'];
    }

    /**
     * Sets migrated
     *
     * @param bool|null $migrated Indicates if the sales invoice was migrated from another system.
     *
     * @return $this
     */
    public function setMigrated(?bool $migrated): static
    {
        if (is_null($migrated)) {
            throw new InvalidArgumentException('non-nullable migrated cannot be null');
        }
        $this->container['migrated'] = $migrated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


