<?php
/**
 * OtherPaymentLineItem
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * OtherPaymentLineItem Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class OtherPaymentLineItem implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OtherPaymentLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'legacyId' => 'int',
        'id' => 'string',
        'displayedAs' => 'string',
        'ledgerAccount' => '\SynergiTech\Sage\Model\Base',
        'details' => 'string',
        'taxRate' => '\SynergiTech\Sage\Model\Base',
        'netAmount' => 'float',
        'taxAmount' => 'float',
        'totalAmount' => 'float',
        'taxBreakdown' => '\SynergiTech\Sage\Model\TaxBreakdown[]',
        'isPurchaseForResale' => 'bool',
        'tradeOfAsset' => 'bool',
        'gstAmount' => 'float',
        'pstAmount' => 'float',
        'taxRecoverable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'legacyId' => 'int32',
        'id' => null,
        'displayedAs' => null,
        'ledgerAccount' => null,
        'details' => null,
        'taxRate' => null,
        'netAmount' => 'double',
        'taxAmount' => 'double',
        'totalAmount' => 'double',
        'taxBreakdown' => null,
        'isPurchaseForResale' => null,
        'tradeOfAsset' => null,
        'gstAmount' => 'double',
        'pstAmount' => 'double',
        'taxRecoverable' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'legacyId' => false,
        'id' => false,
        'displayedAs' => false,
        'ledgerAccount' => false,
        'details' => false,
        'taxRate' => false,
        'netAmount' => false,
        'taxAmount' => false,
        'totalAmount' => false,
        'taxBreakdown' => false,
        'isPurchaseForResale' => false,
        'tradeOfAsset' => false,
        'gstAmount' => false,
        'pstAmount' => false,
        'taxRecoverable' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'legacyId' => 'legacy_id',
        'id' => 'id',
        'displayedAs' => 'displayed_as',
        'ledgerAccount' => 'ledger_account',
        'details' => 'details',
        'taxRate' => 'tax_rate',
        'netAmount' => 'net_amount',
        'taxAmount' => 'tax_amount',
        'totalAmount' => 'total_amount',
        'taxBreakdown' => 'tax_breakdown',
        'isPurchaseForResale' => 'is_purchase_for_resale',
        'tradeOfAsset' => 'trade_of_asset',
        'gstAmount' => 'gst_amount',
        'pstAmount' => 'pst_amount',
        'taxRecoverable' => 'tax_recoverable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'legacyId' => 'setLegacyId',
        'id' => 'setId',
        'displayedAs' => 'setDisplayedAs',
        'ledgerAccount' => 'setLedgerAccount',
        'details' => 'setDetails',
        'taxRate' => 'setTaxRate',
        'netAmount' => 'setNetAmount',
        'taxAmount' => 'setTaxAmount',
        'totalAmount' => 'setTotalAmount',
        'taxBreakdown' => 'setTaxBreakdown',
        'isPurchaseForResale' => 'setIsPurchaseForResale',
        'tradeOfAsset' => 'setTradeOfAsset',
        'gstAmount' => 'setGstAmount',
        'pstAmount' => 'setPstAmount',
        'taxRecoverable' => 'setTaxRecoverable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'legacyId' => 'getLegacyId',
        'id' => 'getId',
        'displayedAs' => 'getDisplayedAs',
        'ledgerAccount' => 'getLedgerAccount',
        'details' => 'getDetails',
        'taxRate' => 'getTaxRate',
        'netAmount' => 'getNetAmount',
        'taxAmount' => 'getTaxAmount',
        'totalAmount' => 'getTotalAmount',
        'taxBreakdown' => 'getTaxBreakdown',
        'isPurchaseForResale' => 'getIsPurchaseForResale',
        'tradeOfAsset' => 'getTradeOfAsset',
        'gstAmount' => 'getGstAmount',
        'pstAmount' => 'getPstAmount',
        'taxRecoverable' => 'getTaxRecoverable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('legacyId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('displayedAs', $data ?? [], null);
        $this->setIfExists('ledgerAccount', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('taxRate', $data ?? [], null);
        $this->setIfExists('netAmount', $data ?? [], null);
        $this->setIfExists('taxAmount', $data ?? [], null);
        $this->setIfExists('totalAmount', $data ?? [], null);
        $this->setIfExists('taxBreakdown', $data ?? [], null);
        $this->setIfExists('isPurchaseForResale', $data ?? [], null);
        $this->setIfExists('tradeOfAsset', $data ?? [], null);
        $this->setIfExists('gstAmount', $data ?? [], null);
        $this->setIfExists('pstAmount', $data ?? [], null);
        $this->setIfExists('taxRecoverable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacyId
     *
     * @return int|null
     */
    public function getLegacyId(): ?int
    {
        return $this->container['legacyId'];
    }

    /**
     * Sets legacyId
     *
     * @param int|null $legacyId The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId(?int $legacyId): static
    {
        if (is_null($legacyId)) {
            throw new InvalidArgumentException('non-nullable legacyId cannot be null');
        }
        $this->container['legacyId'] = $legacyId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayedAs
     *
     * @return string|null
     */
    public function getDisplayedAs(): ?string
    {
        return $this->container['displayedAs'];
    }

    /**
     * Sets displayedAs
     *
     * @param string|null $displayedAs The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs(?string $displayedAs): static
    {
        if (is_null($displayedAs)) {
            throw new InvalidArgumentException('non-nullable displayedAs cannot be null');
        }
        $this->container['displayedAs'] = $displayedAs;

        return $this;
    }

    /**
     * Gets ledgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['ledgerAccount'];
    }

    /**
     * Sets ledgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $ledgerAccount ledgerAccount
     *
     * @return $this
     */
    public function setLedgerAccount(?\SynergiTech\Sage\Model\Base $ledgerAccount): static
    {
        if (is_null($ledgerAccount)) {
            throw new InvalidArgumentException('non-nullable ledgerAccount cannot be null');
        }
        $this->container['ledgerAccount'] = $ledgerAccount;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string|null
     */
    public function getDetails(): ?string
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string|null $details The details of the payment line
     *
     * @return $this
     */
    public function setDetails(?string $details): static
    {
        if (is_null($details)) {
            throw new InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets taxRate
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getTaxRate(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['taxRate'];
    }

    /**
     * Sets taxRate
     *
     * @param \SynergiTech\Sage\Model\Base|null $taxRate taxRate
     *
     * @return $this
     */
    public function setTaxRate(?\SynergiTech\Sage\Model\Base $taxRate): static
    {
        if (is_null($taxRate)) {
            throw new InvalidArgumentException('non-nullable taxRate cannot be null');
        }
        $this->container['taxRate'] = $taxRate;

        return $this;
    }

    /**
     * Gets netAmount
     *
     * @return float|null
     */
    public function getNetAmount(): ?float
    {
        return $this->container['netAmount'];
    }

    /**
     * Sets netAmount
     *
     * @param float|null $netAmount The net amount of the payment line
     *
     * @return $this
     */
    public function setNetAmount(?float $netAmount): static
    {
        if (is_null($netAmount)) {
            throw new InvalidArgumentException('non-nullable netAmount cannot be null');
        }
        $this->container['netAmount'] = $netAmount;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return float|null
     */
    public function getTaxAmount(): ?float
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param float|null $taxAmount The tax amount of the payment line
     *
     * @return $this
     */
    public function setTaxAmount(?float $taxAmount): static
    {
        if (is_null($taxAmount)) {
            throw new InvalidArgumentException('non-nullable taxAmount cannot be null');
        }
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets totalAmount
     *
     * @return float|null
     */
    public function getTotalAmount(): ?float
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     *
     * @param float|null $totalAmount The total amount of the payment line
     *
     * @return $this
     */
    public function setTotalAmount(?float $totalAmount): static
    {
        if (is_null($totalAmount)) {
            throw new InvalidArgumentException('non-nullable totalAmount cannot be null');
        }
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets taxBreakdown
     *
     * @return \SynergiTech\Sage\Model\TaxBreakdown[]|null
     */
    public function getTaxBreakdown(): ?array
    {
        return $this->container['taxBreakdown'];
    }

    /**
     * Sets taxBreakdown
     *
     * @param \SynergiTech\Sage\Model\TaxBreakdown[]|null $taxBreakdown The tax breakdown for the payment line
     *
     * @return $this
     */
    public function setTaxBreakdown(?array $taxBreakdown): static
    {
        if (is_null($taxBreakdown)) {
            throw new InvalidArgumentException('non-nullable taxBreakdown cannot be null');
        }
        $this->container['taxBreakdown'] = $taxBreakdown;

        return $this;
    }

    /**
     * Gets isPurchaseForResale
     *
     * @return bool|null
     */
    public function getIsPurchaseForResale(): ?bool
    {
        return $this->container['isPurchaseForResale'];
    }

    /**
     * Sets isPurchaseForResale
     *
     * @param bool|null $isPurchaseForResale Identifies whether the line item is for resale. (Ireland only)
     *
     * @return $this
     */
    public function setIsPurchaseForResale(?bool $isPurchaseForResale): static
    {
        if (is_null($isPurchaseForResale)) {
            throw new InvalidArgumentException('non-nullable isPurchaseForResale cannot be null');
        }
        $this->container['isPurchaseForResale'] = $isPurchaseForResale;

        return $this;
    }

    /**
     * Gets tradeOfAsset
     *
     * @return bool|null
     */
    public function getTradeOfAsset(): ?bool
    {
        return $this->container['tradeOfAsset'];
    }

    /**
     * Sets tradeOfAsset
     *
     * @param bool|null $tradeOfAsset Whether the line item is marked as trade of asset.
     *
     * @return $this
     */
    public function setTradeOfAsset(?bool $tradeOfAsset): static
    {
        if (is_null($tradeOfAsset)) {
            throw new InvalidArgumentException('non-nullable tradeOfAsset cannot be null');
        }
        $this->container['tradeOfAsset'] = $tradeOfAsset;

        return $this;
    }

    /**
     * Gets gstAmount
     *
     * @return float|null
     */
    public function getGstAmount(): ?float
    {
        return $this->container['gstAmount'];
    }

    /**
     * Sets gstAmount
     *
     * @param float|null $gstAmount The gst or hst tax amount for the other payment
     *
     * @return $this
     */
    public function setGstAmount(?float $gstAmount): static
    {
        if (is_null($gstAmount)) {
            throw new InvalidArgumentException('non-nullable gstAmount cannot be null');
        }
        $this->container['gstAmount'] = $gstAmount;

        return $this;
    }

    /**
     * Gets pstAmount
     *
     * @return float|null
     */
    public function getPstAmount(): ?float
    {
        return $this->container['pstAmount'];
    }

    /**
     * Sets pstAmount
     *
     * @param float|null $pstAmount The pst or qst tax amount for the other payment
     *
     * @return $this
     */
    public function setPstAmount(?float $pstAmount): static
    {
        if (is_null($pstAmount)) {
            throw new InvalidArgumentException('non-nullable pstAmount cannot be null');
        }
        $this->container['pstAmount'] = $pstAmount;

        return $this;
    }

    /**
     * Gets taxRecoverable
     *
     * @return bool|null
     */
    public function getTaxRecoverable(): ?bool
    {
        return $this->container['taxRecoverable'];
    }

    /**
     * Sets taxRecoverable
     *
     * @param bool|null $taxRecoverable Indicates if the other payment is tax recoverable or not
     *
     * @return $this
     */
    public function setTaxRecoverable(?bool $taxRecoverable): static
    {
        if (is_null($taxRecoverable)) {
            throw new InvalidArgumentException('non-nullable taxRecoverable cannot be null');
        }
        $this->container['taxRecoverable'] = $taxRecoverable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


