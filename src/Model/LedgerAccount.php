<?php
/**
 * LedgerAccount
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage Business Cloud Accounting - Accounts
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 3.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * LedgerAccount Class Doc Comment
 *
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Standard: ðŸ‡¨ðŸ‡¦, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Start: ðŸ‡¨ðŸ‡¦, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any mentioned role in one of the listed areas: * Area: &#x60;Settings&#x60;: Full Access
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class LedgerAccount implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'LedgerAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'displayedAs' => 'string',
        'path' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'ledgerAccountGroup' => '\SynergiTech\Sage\Model\CoaGroupType',
        'name' => 'string',
        'displayName' => 'string',
        'visibleScopes' => 'string[]',
        'includedInChart' => 'bool',
        'nominalCode' => 'int',
        'ledgerAccountType' => '\SynergiTech\Sage\Model\Base',
        'ledgerAccountClassification' => '\SynergiTech\Sage\Model\Base',
        'taxRate' => '\SynergiTech\Sage\Model\Base',
        'fixedTaxRate' => 'bool',
        'visibleInBanking' => 'bool',
        'visibleInExpenses' => 'bool',
        'visibleInJournals' => 'bool',
        'visibleInOtherPayments' => 'bool',
        'visibleInOtherReceipts' => 'bool',
        'visibleInReporting' => 'bool',
        'visibleInSales' => 'bool',
        'balanceDetails' => '\SynergiTech\Sage\Model\LedgerAccountBalanceDetails',
        'isControlAccount' => 'bool',
        'controlName' => 'string',
        'displayFormatted' => 'string',
        'taxRecoverable' => 'bool',
        'recoverablePercentage' => 'float',
        'nonRecoverableLedgerAccount' => '\SynergiTech\Sage\Model\LedgerAccount',
        'cisMaterials' => 'bool',
        'taxInstalment' => 'bool',
        'cisLabour' => 'bool',
        'gifiCode' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'displayedAs' => null,
        'path' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'ledgerAccountGroup' => null,
        'name' => null,
        'displayName' => null,
        'visibleScopes' => null,
        'includedInChart' => null,
        'nominalCode' => 'int32',
        'ledgerAccountType' => null,
        'ledgerAccountClassification' => null,
        'taxRate' => null,
        'fixedTaxRate' => null,
        'visibleInBanking' => null,
        'visibleInExpenses' => null,
        'visibleInJournals' => null,
        'visibleInOtherPayments' => null,
        'visibleInOtherReceipts' => null,
        'visibleInReporting' => null,
        'visibleInSales' => null,
        'balanceDetails' => null,
        'isControlAccount' => null,
        'controlName' => null,
        'displayFormatted' => null,
        'taxRecoverable' => null,
        'recoverablePercentage' => 'double',
        'nonRecoverableLedgerAccount' => null,
        'cisMaterials' => null,
        'taxInstalment' => null,
        'cisLabour' => null,
        'gifiCode' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'displayedAs' => false,
        'path' => false,
        'createdAt' => false,
        'updatedAt' => false,
        'ledgerAccountGroup' => false,
        'name' => false,
        'displayName' => false,
        'visibleScopes' => false,
        'includedInChart' => false,
        'nominalCode' => false,
        'ledgerAccountType' => false,
        'ledgerAccountClassification' => false,
        'taxRate' => false,
        'fixedTaxRate' => false,
        'visibleInBanking' => false,
        'visibleInExpenses' => false,
        'visibleInJournals' => false,
        'visibleInOtherPayments' => false,
        'visibleInOtherReceipts' => false,
        'visibleInReporting' => false,
        'visibleInSales' => false,
        'balanceDetails' => false,
        'isControlAccount' => false,
        'controlName' => false,
        'displayFormatted' => false,
        'taxRecoverable' => false,
        'recoverablePercentage' => false,
        'nonRecoverableLedgerAccount' => false,
        'cisMaterials' => false,
        'taxInstalment' => false,
        'cisLabour' => false,
        'gifiCode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'displayedAs' => 'displayed_as',
        'path' => '$path',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'ledgerAccountGroup' => 'ledger_account_group',
        'name' => 'name',
        'displayName' => 'display_name',
        'visibleScopes' => 'visible_scopes',
        'includedInChart' => 'included_in_chart',
        'nominalCode' => 'nominal_code',
        'ledgerAccountType' => 'ledger_account_type',
        'ledgerAccountClassification' => 'ledger_account_classification',
        'taxRate' => 'tax_rate',
        'fixedTaxRate' => 'fixed_tax_rate',
        'visibleInBanking' => 'visible_in_banking',
        'visibleInExpenses' => 'visible_in_expenses',
        'visibleInJournals' => 'visible_in_journals',
        'visibleInOtherPayments' => 'visible_in_other_payments',
        'visibleInOtherReceipts' => 'visible_in_other_receipts',
        'visibleInReporting' => 'visible_in_reporting',
        'visibleInSales' => 'visible_in_sales',
        'balanceDetails' => 'balance_details',
        'isControlAccount' => 'is_control_account',
        'controlName' => 'control_name',
        'displayFormatted' => 'display_formatted',
        'taxRecoverable' => 'tax_recoverable',
        'recoverablePercentage' => 'recoverable_percentage',
        'nonRecoverableLedgerAccount' => 'non_recoverable_ledger_account',
        'cisMaterials' => 'cis_materials',
        'taxInstalment' => 'tax_instalment',
        'cisLabour' => 'cis_labour',
        'gifiCode' => 'gifi_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'displayedAs' => 'setDisplayedAs',
        'path' => 'setPath',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'ledgerAccountGroup' => 'setLedgerAccountGroup',
        'name' => 'setName',
        'displayName' => 'setDisplayName',
        'visibleScopes' => 'setVisibleScopes',
        'includedInChart' => 'setIncludedInChart',
        'nominalCode' => 'setNominalCode',
        'ledgerAccountType' => 'setLedgerAccountType',
        'ledgerAccountClassification' => 'setLedgerAccountClassification',
        'taxRate' => 'setTaxRate',
        'fixedTaxRate' => 'setFixedTaxRate',
        'visibleInBanking' => 'setVisibleInBanking',
        'visibleInExpenses' => 'setVisibleInExpenses',
        'visibleInJournals' => 'setVisibleInJournals',
        'visibleInOtherPayments' => 'setVisibleInOtherPayments',
        'visibleInOtherReceipts' => 'setVisibleInOtherReceipts',
        'visibleInReporting' => 'setVisibleInReporting',
        'visibleInSales' => 'setVisibleInSales',
        'balanceDetails' => 'setBalanceDetails',
        'isControlAccount' => 'setIsControlAccount',
        'controlName' => 'setControlName',
        'displayFormatted' => 'setDisplayFormatted',
        'taxRecoverable' => 'setTaxRecoverable',
        'recoverablePercentage' => 'setRecoverablePercentage',
        'nonRecoverableLedgerAccount' => 'setNonRecoverableLedgerAccount',
        'cisMaterials' => 'setCisMaterials',
        'taxInstalment' => 'setTaxInstalment',
        'cisLabour' => 'setCisLabour',
        'gifiCode' => 'setGifiCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'displayedAs' => 'getDisplayedAs',
        'path' => 'getPath',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'ledgerAccountGroup' => 'getLedgerAccountGroup',
        'name' => 'getName',
        'displayName' => 'getDisplayName',
        'visibleScopes' => 'getVisibleScopes',
        'includedInChart' => 'getIncludedInChart',
        'nominalCode' => 'getNominalCode',
        'ledgerAccountType' => 'getLedgerAccountType',
        'ledgerAccountClassification' => 'getLedgerAccountClassification',
        'taxRate' => 'getTaxRate',
        'fixedTaxRate' => 'getFixedTaxRate',
        'visibleInBanking' => 'getVisibleInBanking',
        'visibleInExpenses' => 'getVisibleInExpenses',
        'visibleInJournals' => 'getVisibleInJournals',
        'visibleInOtherPayments' => 'getVisibleInOtherPayments',
        'visibleInOtherReceipts' => 'getVisibleInOtherReceipts',
        'visibleInReporting' => 'getVisibleInReporting',
        'visibleInSales' => 'getVisibleInSales',
        'balanceDetails' => 'getBalanceDetails',
        'isControlAccount' => 'getIsControlAccount',
        'controlName' => 'getControlName',
        'displayFormatted' => 'getDisplayFormatted',
        'taxRecoverable' => 'getTaxRecoverable',
        'recoverablePercentage' => 'getRecoverablePercentage',
        'nonRecoverableLedgerAccount' => 'getNonRecoverableLedgerAccount',
        'cisMaterials' => 'getCisMaterials',
        'taxInstalment' => 'getTaxInstalment',
        'cisLabour' => 'getCisLabour',
        'gifiCode' => 'getGifiCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('displayedAs', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('ledgerAccountGroup', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('visibleScopes', $data ?? [], null);
        $this->setIfExists('includedInChart', $data ?? [], null);
        $this->setIfExists('nominalCode', $data ?? [], null);
        $this->setIfExists('ledgerAccountType', $data ?? [], null);
        $this->setIfExists('ledgerAccountClassification', $data ?? [], null);
        $this->setIfExists('taxRate', $data ?? [], null);
        $this->setIfExists('fixedTaxRate', $data ?? [], null);
        $this->setIfExists('visibleInBanking', $data ?? [], null);
        $this->setIfExists('visibleInExpenses', $data ?? [], null);
        $this->setIfExists('visibleInJournals', $data ?? [], null);
        $this->setIfExists('visibleInOtherPayments', $data ?? [], null);
        $this->setIfExists('visibleInOtherReceipts', $data ?? [], null);
        $this->setIfExists('visibleInReporting', $data ?? [], null);
        $this->setIfExists('visibleInSales', $data ?? [], null);
        $this->setIfExists('balanceDetails', $data ?? [], null);
        $this->setIfExists('isControlAccount', $data ?? [], null);
        $this->setIfExists('controlName', $data ?? [], null);
        $this->setIfExists('displayFormatted', $data ?? [], null);
        $this->setIfExists('taxRecoverable', $data ?? [], null);
        $this->setIfExists('recoverablePercentage', $data ?? [], null);
        $this->setIfExists('nonRecoverableLedgerAccount', $data ?? [], null);
        $this->setIfExists('cisMaterials', $data ?? [], null);
        $this->setIfExists('taxInstalment', $data ?? [], null);
        $this->setIfExists('cisLabour', $data ?? [], null);
        $this->setIfExists('gifiCode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['displayName']) && (mb_strlen($this->container['displayName']) > 200)) {
            $invalidProperties[] = "invalid value for 'displayName', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['controlName']) && (mb_strlen($this->container['controlName']) > 255)) {
            $invalidProperties[] = "invalid value for 'controlName', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayedAs
     *
     * @return string|null
     */
    public function getDisplayedAs(): ?string
    {
        return $this->container['displayedAs'];
    }

    /**
     * Sets displayedAs
     *
     * @param string|null $displayedAs The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs(?string $displayedAs): static
    {
        if (is_null($displayedAs)) {
            throw new InvalidArgumentException('non-nullable displayedAs cannot be null');
        }
        $this->container['displayedAs'] = $displayedAs;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath(): ?string
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The API path for the resource
     *
     * @return $this
     */
    public function setPath(?string $path): static
    {
        if (is_null($path)) {
            throw new InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt The datetime when the item was created
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets ledgerAccountGroup
     *
     * @return \SynergiTech\Sage\Model\CoaGroupType|null
     */
    public function getLedgerAccountGroup(): ?\SynergiTech\Sage\Model\CoaGroupType
    {
        return $this->container['ledgerAccountGroup'];
    }

    /**
     * Sets ledgerAccountGroup
     *
     * @param \SynergiTech\Sage\Model\CoaGroupType|null $ledgerAccountGroup ledgerAccountGroup
     *
     * @return $this
     */
    public function setLedgerAccountGroup(?\SynergiTech\Sage\Model\CoaGroupType $ledgerAccountGroup): static
    {
        if (is_null($ledgerAccountGroup)) {
            throw new InvalidArgumentException('non-nullable ledgerAccountGroup cannot be null');
        }
        $this->container['ledgerAccountGroup'] = $ledgerAccountGroup;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name for the ledger account.  Changes to this field do not propagate to other resources, namely not to the name of the associated bank_account (unlike the behaviour of the UI).
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 200)) {
            throw new InvalidArgumentException('invalid length for $name when calling LedgerAccount., must be smaller than or equal to 200.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName(): ?string
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName The display name for the ledger account
     *
     * @return $this
     */
    public function setDisplayName(?string $displayName): static
    {
        if (is_null($displayName)) {
            throw new InvalidArgumentException('non-nullable displayName cannot be null');
        }
        if ((mb_strlen($displayName) > 200)) {
            throw new InvalidArgumentException('invalid length for $displayName when calling LedgerAccount., must be smaller than or equal to 200.');
        }

        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets visibleScopes
     *
     * @return string[]|null
     */
    public function getVisibleScopes(): ?array
    {
        return $this->container['visibleScopes'];
    }

    /**
     * Sets visibleScopes
     *
     * @param string[]|null $visibleScopes The visible scopes for the ledger account.  This indicates in which of the UI's areas the ledger account is displayed and available for user selection. Possible entries in this array are `bank`, `sales`, `purchasing`, `other_payment`, `other_receipt`, `reporting`, `journals`, `sales_eu`, `sales_row`, `purchasing_eu`, `purchasing_row` and `purchasing_hrc`.
     *
     * @return $this
     */
    public function setVisibleScopes(?array $visibleScopes): static
    {
        if (is_null($visibleScopes)) {
            throw new InvalidArgumentException('non-nullable visibleScopes cannot be null');
        }
        $this->container['visibleScopes'] = $visibleScopes;

        return $this;
    }

    /**
     * Gets includedInChart
     *
     * @return bool|null
     */
    public function getIncludedInChart(): ?bool
    {
        return $this->container['includedInChart'];
    }

    /**
     * Sets includedInChart
     *
     * @param bool|null $includedInChart Indicates whether the ledger account is included in the chart of accounts
     *
     * @return $this
     */
    public function setIncludedInChart(?bool $includedInChart): static
    {
        if (is_null($includedInChart)) {
            throw new InvalidArgumentException('non-nullable includedInChart cannot be null');
        }
        $this->container['includedInChart'] = $includedInChart;

        return $this;
    }

    /**
     * Gets nominalCode
     *
     * @return int|null
     */
    public function getNominalCode(): ?int
    {
        return $this->container['nominalCode'];
    }

    /**
     * Sets nominalCode
     *
     * @param int|null $nominalCode The nominal code of the ledger account
     *
     * @return $this
     */
    public function setNominalCode(?int $nominalCode): static
    {
        if (is_null($nominalCode)) {
            throw new InvalidArgumentException('non-nullable nominalCode cannot be null');
        }
        $this->container['nominalCode'] = $nominalCode;

        return $this;
    }

    /**
     * Gets ledgerAccountType
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getLedgerAccountType(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['ledgerAccountType'];
    }

    /**
     * Sets ledgerAccountType
     *
     * @param \SynergiTech\Sage\Model\Base|null $ledgerAccountType ledgerAccountType
     *
     * @return $this
     */
    public function setLedgerAccountType(?\SynergiTech\Sage\Model\Base $ledgerAccountType): static
    {
        if (is_null($ledgerAccountType)) {
            throw new InvalidArgumentException('non-nullable ledgerAccountType cannot be null');
        }
        $this->container['ledgerAccountType'] = $ledgerAccountType;

        return $this;
    }

    /**
     * Gets ledgerAccountClassification
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getLedgerAccountClassification(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['ledgerAccountClassification'];
    }

    /**
     * Sets ledgerAccountClassification
     *
     * @param \SynergiTech\Sage\Model\Base|null $ledgerAccountClassification ledgerAccountClassification
     *
     * @return $this
     */
    public function setLedgerAccountClassification(?\SynergiTech\Sage\Model\Base $ledgerAccountClassification): static
    {
        if (is_null($ledgerAccountClassification)) {
            throw new InvalidArgumentException('non-nullable ledgerAccountClassification cannot be null');
        }
        $this->container['ledgerAccountClassification'] = $ledgerAccountClassification;

        return $this;
    }

    /**
     * Gets taxRate
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getTaxRate(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['taxRate'];
    }

    /**
     * Sets taxRate
     *
     * @param \SynergiTech\Sage\Model\Base|null $taxRate taxRate
     *
     * @return $this
     */
    public function setTaxRate(?\SynergiTech\Sage\Model\Base $taxRate): static
    {
        if (is_null($taxRate)) {
            throw new InvalidArgumentException('non-nullable taxRate cannot be null');
        }
        $this->container['taxRate'] = $taxRate;

        return $this;
    }

    /**
     * Gets fixedTaxRate
     *
     * @return bool|null
     */
    public function getFixedTaxRate(): ?bool
    {
        return $this->container['fixedTaxRate'];
    }

    /**
     * Sets fixedTaxRate
     *
     * @param bool|null $fixedTaxRate Indicates whether the default tax rate is fixed or may be changed per transaction
     *
     * @return $this
     */
    public function setFixedTaxRate(?bool $fixedTaxRate): static
    {
        if (is_null($fixedTaxRate)) {
            throw new InvalidArgumentException('non-nullable fixedTaxRate cannot be null');
        }
        $this->container['fixedTaxRate'] = $fixedTaxRate;

        return $this;
    }

    /**
     * Gets visibleInBanking
     *
     * @return bool|null
     */
    public function getVisibleInBanking(): ?bool
    {
        return $this->container['visibleInBanking'];
    }

    /**
     * Sets visibleInBanking
     *
     * @param bool|null $visibleInBanking Indicates whether the ledger account is displayed in the banking area of the application
     *
     * @return $this
     */
    public function setVisibleInBanking(?bool $visibleInBanking): static
    {
        if (is_null($visibleInBanking)) {
            throw new InvalidArgumentException('non-nullable visibleInBanking cannot be null');
        }
        $this->container['visibleInBanking'] = $visibleInBanking;

        return $this;
    }

    /**
     * Gets visibleInExpenses
     *
     * @return bool|null
     */
    public function getVisibleInExpenses(): ?bool
    {
        return $this->container['visibleInExpenses'];
    }

    /**
     * Sets visibleInExpenses
     *
     * @param bool|null $visibleInExpenses Indicates whether the ledger account is displayed in the purchases area of the application
     *
     * @return $this
     */
    public function setVisibleInExpenses(?bool $visibleInExpenses): static
    {
        if (is_null($visibleInExpenses)) {
            throw new InvalidArgumentException('non-nullable visibleInExpenses cannot be null');
        }
        $this->container['visibleInExpenses'] = $visibleInExpenses;

        return $this;
    }

    /**
     * Gets visibleInJournals
     *
     * @return bool|null
     */
    public function getVisibleInJournals(): ?bool
    {
        return $this->container['visibleInJournals'];
    }

    /**
     * Sets visibleInJournals
     *
     * @param bool|null $visibleInJournals Indicates whether the ledger account is displayed in the journals area of the application
     *
     * @return $this
     */
    public function setVisibleInJournals(?bool $visibleInJournals): static
    {
        if (is_null($visibleInJournals)) {
            throw new InvalidArgumentException('non-nullable visibleInJournals cannot be null');
        }
        $this->container['visibleInJournals'] = $visibleInJournals;

        return $this;
    }

    /**
     * Gets visibleInOtherPayments
     *
     * @return bool|null
     */
    public function getVisibleInOtherPayments(): ?bool
    {
        return $this->container['visibleInOtherPayments'];
    }

    /**
     * Sets visibleInOtherPayments
     *
     * @param bool|null $visibleInOtherPayments Indicates whether the ledger account is displayed in the other payments area of the application
     *
     * @return $this
     */
    public function setVisibleInOtherPayments(?bool $visibleInOtherPayments): static
    {
        if (is_null($visibleInOtherPayments)) {
            throw new InvalidArgumentException('non-nullable visibleInOtherPayments cannot be null');
        }
        $this->container['visibleInOtherPayments'] = $visibleInOtherPayments;

        return $this;
    }

    /**
     * Gets visibleInOtherReceipts
     *
     * @return bool|null
     */
    public function getVisibleInOtherReceipts(): ?bool
    {
        return $this->container['visibleInOtherReceipts'];
    }

    /**
     * Sets visibleInOtherReceipts
     *
     * @param bool|null $visibleInOtherReceipts Indicates whether the ledger account is displayed in the other receipts area of the application
     *
     * @return $this
     */
    public function setVisibleInOtherReceipts(?bool $visibleInOtherReceipts): static
    {
        if (is_null($visibleInOtherReceipts)) {
            throw new InvalidArgumentException('non-nullable visibleInOtherReceipts cannot be null');
        }
        $this->container['visibleInOtherReceipts'] = $visibleInOtherReceipts;

        return $this;
    }

    /**
     * Gets visibleInReporting
     *
     * @return bool|null
     */
    public function getVisibleInReporting(): ?bool
    {
        return $this->container['visibleInReporting'];
    }

    /**
     * Sets visibleInReporting
     *
     * @param bool|null $visibleInReporting Indicates whether the ledger account is displayed in the reporting area of the application
     *
     * @return $this
     */
    public function setVisibleInReporting(?bool $visibleInReporting): static
    {
        if (is_null($visibleInReporting)) {
            throw new InvalidArgumentException('non-nullable visibleInReporting cannot be null');
        }
        $this->container['visibleInReporting'] = $visibleInReporting;

        return $this;
    }

    /**
     * Gets visibleInSales
     *
     * @return bool|null
     */
    public function getVisibleInSales(): ?bool
    {
        return $this->container['visibleInSales'];
    }

    /**
     * Sets visibleInSales
     *
     * @param bool|null $visibleInSales Indicates whether the ledger account is displayed in the sales area of the application
     *
     * @return $this
     */
    public function setVisibleInSales(?bool $visibleInSales): static
    {
        if (is_null($visibleInSales)) {
            throw new InvalidArgumentException('non-nullable visibleInSales cannot be null');
        }
        $this->container['visibleInSales'] = $visibleInSales;

        return $this;
    }

    /**
     * Gets balanceDetails
     *
     * @return \SynergiTech\Sage\Model\LedgerAccountBalanceDetails|null
     */
    public function getBalanceDetails(): ?\SynergiTech\Sage\Model\LedgerAccountBalanceDetails
    {
        return $this->container['balanceDetails'];
    }

    /**
     * Sets balanceDetails
     *
     * @param \SynergiTech\Sage\Model\LedgerAccountBalanceDetails|null $balanceDetails balanceDetails
     *
     * @return $this
     */
    public function setBalanceDetails(?\SynergiTech\Sage\Model\LedgerAccountBalanceDetails $balanceDetails): static
    {
        if (is_null($balanceDetails)) {
            throw new InvalidArgumentException('non-nullable balanceDetails cannot be null');
        }
        $this->container['balanceDetails'] = $balanceDetails;

        return $this;
    }

    /**
     * Gets isControlAccount
     *
     * @return bool|null
     */
    public function getIsControlAccount(): ?bool
    {
        return $this->container['isControlAccount'];
    }

    /**
     * Sets isControlAccount
     *
     * @param bool|null $isControlAccount Indicates whether the ledger account is a control account.  Control accounts cannot be removed. See also `control_name`.
     *
     * @return $this
     */
    public function setIsControlAccount(?bool $isControlAccount): static
    {
        if (is_null($isControlAccount)) {
            throw new InvalidArgumentException('non-nullable isControlAccount cannot be null');
        }
        $this->container['isControlAccount'] = $isControlAccount;

        return $this;
    }

    /**
     * Gets controlName
     *
     * @return string|null
     */
    public function getControlName(): ?string
    {
        return $this->container['controlName'];
    }

    /**
     * Sets controlName
     *
     * @param string|null $controlName The control name for the ledger account.  This is used internally by Accounting to identify the correct ledger account for booking taxes etc. You cannot add ledger accounts with control name and you cannot modify the control name of existing ledger accounts.
     *
     * @return $this
     */
    public function setControlName(?string $controlName): static
    {
        if (is_null($controlName)) {
            throw new InvalidArgumentException('non-nullable controlName cannot be null');
        }
        if ((mb_strlen($controlName) > 255)) {
            throw new InvalidArgumentException('invalid length for $controlName when calling LedgerAccount., must be smaller than or equal to 255.');
        }

        $this->container['controlName'] = $controlName;

        return $this;
    }

    /**
     * Gets displayFormatted
     *
     * @return string|null
     */
    public function getDisplayFormatted(): ?string
    {
        return $this->container['displayFormatted'];
    }

    /**
     * Sets displayFormatted
     *
     * @param string|null $displayFormatted The display name formatted based on coa_list_order in settings
     *
     * @return $this
     */
    public function setDisplayFormatted(?string $displayFormatted): static
    {
        if (is_null($displayFormatted)) {
            throw new InvalidArgumentException('non-nullable displayFormatted cannot be null');
        }
        $this->container['displayFormatted'] = $displayFormatted;

        return $this;
    }

    /**
     * Gets taxRecoverable
     *
     * @return bool|null
     */
    public function getTaxRecoverable(): ?bool
    {
        return $this->container['taxRecoverable'];
    }

    /**
     * Sets taxRecoverable
     *
     * @param bool|null $taxRecoverable Indicates that transactions posted to this ledger account have part recoverable taxes (Canada only)
     *
     * @return $this
     */
    public function setTaxRecoverable(?bool $taxRecoverable): static
    {
        if (is_null($taxRecoverable)) {
            throw new InvalidArgumentException('non-nullable taxRecoverable cannot be null');
        }
        $this->container['taxRecoverable'] = $taxRecoverable;

        return $this;
    }

    /**
     * Gets recoverablePercentage
     *
     * @return float|null
     */
    public function getRecoverablePercentage(): ?float
    {
        return $this->container['recoverablePercentage'];
    }

    /**
     * Sets recoverablePercentage
     *
     * @param float|null $recoverablePercentage The partial recoverable tax rate (Canada only)
     *
     * @return $this
     */
    public function setRecoverablePercentage(?float $recoverablePercentage): static
    {
        if (is_null($recoverablePercentage)) {
            throw new InvalidArgumentException('non-nullable recoverablePercentage cannot be null');
        }
        $this->container['recoverablePercentage'] = $recoverablePercentage;

        return $this;
    }

    /**
     * Gets nonRecoverableLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\LedgerAccount|null
     */
    public function getNonRecoverableLedgerAccount(): ?\SynergiTech\Sage\Model\LedgerAccount
    {
        return $this->container['nonRecoverableLedgerAccount'];
    }

    /**
     * Sets nonRecoverableLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\LedgerAccount|null $nonRecoverableLedgerAccount nonRecoverableLedgerAccount
     *
     * @return $this
     */
    public function setNonRecoverableLedgerAccount(?\SynergiTech\Sage\Model\LedgerAccount $nonRecoverableLedgerAccount): static
    {
        if (is_null($nonRecoverableLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable nonRecoverableLedgerAccount cannot be null');
        }
        $this->container['nonRecoverableLedgerAccount'] = $nonRecoverableLedgerAccount;

        return $this;
    }

    /**
     * Gets cisMaterials
     *
     * @return bool|null
     */
    public function getCisMaterials(): ?bool
    {
        return $this->container['cisMaterials'];
    }

    /**
     * Sets cisMaterials
     *
     * @param bool|null $cisMaterials Indicates whether the ledger account is flagged for CIS Materials
     *
     * @return $this
     */
    public function setCisMaterials(?bool $cisMaterials): static
    {
        if (is_null($cisMaterials)) {
            throw new InvalidArgumentException('non-nullable cisMaterials cannot be null');
        }
        $this->container['cisMaterials'] = $cisMaterials;

        return $this;
    }

    /**
     * Gets taxInstalment
     *
     * @return bool|null
     */
    public function getTaxInstalment(): ?bool
    {
        return $this->container['taxInstalment'];
    }

    /**
     * Sets taxInstalment
     *
     * @param bool|null $taxInstalment Indicates whether the ledger account is flagged for Tax Intalment (Canada only)
     *
     * @return $this
     */
    public function setTaxInstalment(?bool $taxInstalment): static
    {
        if (is_null($taxInstalment)) {
            throw new InvalidArgumentException('non-nullable taxInstalment cannot be null');
        }
        $this->container['taxInstalment'] = $taxInstalment;

        return $this;
    }

    /**
     * Gets cisLabour
     *
     * @return bool|null
     */
    public function getCisLabour(): ?bool
    {
        return $this->container['cisLabour'];
    }

    /**
     * Sets cisLabour
     *
     * @param bool|null $cisLabour Indicates whether the ledger account is flagged for CIS Labour
     *
     * @return $this
     */
    public function setCisLabour(?bool $cisLabour): static
    {
        if (is_null($cisLabour)) {
            throw new InvalidArgumentException('non-nullable cisLabour cannot be null');
        }
        $this->container['cisLabour'] = $cisLabour;

        return $this;
    }

    /**
     * Gets gifiCode
     *
     * @return int|null
     */
    public function getGifiCode(): ?int
    {
        return $this->container['gifiCode'];
    }

    /**
     * Sets gifiCode
     *
     * @param int|null $gifiCode The GIFI code of the ledger account.  GIFI is short for The General Index of Financial Information and it lets the CRA validate tax information electronically instead of manually. Information from financial statements is categorized under the appropriate 4-digit-long GIFI code and entered on corporate income tax returns. GIFI is needed when filing a T2 income tax return.  _Canada only_
     *
     * @return $this
     */
    public function setGifiCode(?int $gifiCode): static
    {
        if (is_null($gifiCode)) {
            throw new InvalidArgumentException('non-nullable gifiCode cannot be null');
        }
        $this->container['gifiCode'] = $gifiCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


