<?php
/**
 * PutDatevSettingsDatevSettings
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * PutDatevSettingsDatevSettings Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PutDatevSettingsDatevSettings implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'putDatevSettings_datev_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'taxConsultantNumber' => 'int',
        'clientNumber' => 'int',
        'nextCustomerNumber' => 'int',
        'nextSupplierNumber' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'taxConsultantNumber' => 'int32',
        'clientNumber' => 'int32',
        'nextCustomerNumber' => 'int32',
        'nextSupplierNumber' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'taxConsultantNumber' => false,
        'clientNumber' => false,
        'nextCustomerNumber' => false,
        'nextSupplierNumber' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'taxConsultantNumber' => 'tax_consultant_number',
        'clientNumber' => 'client_number',
        'nextCustomerNumber' => 'next_customer_number',
        'nextSupplierNumber' => 'next_supplier_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'taxConsultantNumber' => 'setTaxConsultantNumber',
        'clientNumber' => 'setClientNumber',
        'nextCustomerNumber' => 'setNextCustomerNumber',
        'nextSupplierNumber' => 'setNextSupplierNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'taxConsultantNumber' => 'getTaxConsultantNumber',
        'clientNumber' => 'getClientNumber',
        'nextCustomerNumber' => 'getNextCustomerNumber',
        'nextSupplierNumber' => 'getNextSupplierNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('taxConsultantNumber', $data ?? [], null);
        $this->setIfExists('clientNumber', $data ?? [], null);
        $this->setIfExists('nextCustomerNumber', $data ?? [], null);
        $this->setIfExists('nextSupplierNumber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['taxConsultantNumber']) && ($this->container['taxConsultantNumber'] > 9999999)) {
            $invalidProperties[] = "invalid value for 'taxConsultantNumber', must be smaller than or equal to 9999999.";
        }

        if (!is_null($this->container['taxConsultantNumber']) && ($this->container['taxConsultantNumber'] < 1000)) {
            $invalidProperties[] = "invalid value for 'taxConsultantNumber', must be bigger than or equal to 1000.";
        }

        if (!is_null($this->container['clientNumber']) && ($this->container['clientNumber'] > 99999)) {
            $invalidProperties[] = "invalid value for 'clientNumber', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['clientNumber']) && ($this->container['clientNumber'] < 1)) {
            $invalidProperties[] = "invalid value for 'clientNumber', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['nextCustomerNumber']) && ($this->container['nextCustomerNumber'] > 69999)) {
            $invalidProperties[] = "invalid value for 'nextCustomerNumber', must be smaller than or equal to 69999.";
        }

        if (!is_null($this->container['nextCustomerNumber']) && ($this->container['nextCustomerNumber'] < 10000)) {
            $invalidProperties[] = "invalid value for 'nextCustomerNumber', must be bigger than or equal to 10000.";
        }

        if (!is_null($this->container['nextSupplierNumber']) && ($this->container['nextSupplierNumber'] > 99999)) {
            $invalidProperties[] = "invalid value for 'nextSupplierNumber', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['nextSupplierNumber']) && ($this->container['nextSupplierNumber'] < 70000)) {
            $invalidProperties[] = "invalid value for 'nextSupplierNumber', must be bigger than or equal to 70000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets taxConsultantNumber
     *
     * @return int|null
     */
    public function getTaxConsultantNumber(): ?int
    {
        return $this->container['taxConsultantNumber'];
    }

    /**
     * Sets taxConsultantNumber
     *
     * @param int|null $taxConsultantNumber Registration number of the Accountant
     *
     * @return $this
     */
    public function setTaxConsultantNumber(?int $taxConsultantNumber): static
    {
        if (is_null($taxConsultantNumber)) {
            throw new InvalidArgumentException('non-nullable taxConsultantNumber cannot be null');
        }

        if (($taxConsultantNumber > 9999999)) {
            throw new InvalidArgumentException('invalid value for $taxConsultantNumber when calling PutDatevSettingsDatevSettings., must be smaller than or equal to 9999999.');
        }
        if (($taxConsultantNumber < 1000)) {
            throw new InvalidArgumentException('invalid value for $taxConsultantNumber when calling PutDatevSettingsDatevSettings., must be bigger than or equal to 1000.');
        }

        $this->container['taxConsultantNumber'] = $taxConsultantNumber;

        return $this;
    }

    /**
     * Gets clientNumber
     *
     * @return int|null
     */
    public function getClientNumber(): ?int
    {
        return $this->container['clientNumber'];
    }

    /**
     * Sets clientNumber
     *
     * @param int|null $clientNumber The users registration number
     *
     * @return $this
     */
    public function setClientNumber(?int $clientNumber): static
    {
        if (is_null($clientNumber)) {
            throw new InvalidArgumentException('non-nullable clientNumber cannot be null');
        }

        if (($clientNumber > 99999)) {
            throw new InvalidArgumentException('invalid value for $clientNumber when calling PutDatevSettingsDatevSettings., must be smaller than or equal to 99999.');
        }
        if (($clientNumber < 1)) {
            throw new InvalidArgumentException('invalid value for $clientNumber when calling PutDatevSettingsDatevSettings., must be bigger than or equal to 1.');
        }

        $this->container['clientNumber'] = $clientNumber;

        return $this;
    }

    /**
     * Gets nextCustomerNumber
     *
     * @return int|null
     */
    public function getNextCustomerNumber(): ?int
    {
        return $this->container['nextCustomerNumber'];
    }

    /**
     * Sets nextCustomerNumber
     *
     * @param int|null $nextCustomerNumber The next unique customer number
     *
     * @return $this
     */
    public function setNextCustomerNumber(?int $nextCustomerNumber): static
    {
        if (is_null($nextCustomerNumber)) {
            throw new InvalidArgumentException('non-nullable nextCustomerNumber cannot be null');
        }

        if (($nextCustomerNumber > 69999)) {
            throw new InvalidArgumentException('invalid value for $nextCustomerNumber when calling PutDatevSettingsDatevSettings., must be smaller than or equal to 69999.');
        }
        if (($nextCustomerNumber < 10000)) {
            throw new InvalidArgumentException('invalid value for $nextCustomerNumber when calling PutDatevSettingsDatevSettings., must be bigger than or equal to 10000.');
        }

        $this->container['nextCustomerNumber'] = $nextCustomerNumber;

        return $this;
    }

    /**
     * Gets nextSupplierNumber
     *
     * @return int|null
     */
    public function getNextSupplierNumber(): ?int
    {
        return $this->container['nextSupplierNumber'];
    }

    /**
     * Sets nextSupplierNumber
     *
     * @param int|null $nextSupplierNumber The next unique supplier number
     *
     * @return $this
     */
    public function setNextSupplierNumber(?int $nextSupplierNumber): static
    {
        if (is_null($nextSupplierNumber)) {
            throw new InvalidArgumentException('non-nullable nextSupplierNumber cannot be null');
        }

        if (($nextSupplierNumber > 99999)) {
            throw new InvalidArgumentException('invalid value for $nextSupplierNumber when calling PutDatevSettingsDatevSettings., must be smaller than or equal to 99999.');
        }
        if (($nextSupplierNumber < 70000)) {
            throw new InvalidArgumentException('invalid value for $nextSupplierNumber when calling PutDatevSettingsDatevSettings., must be bigger than or equal to 70000.');
        }

        $this->container['nextSupplierNumber'] = $nextSupplierNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


