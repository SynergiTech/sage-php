<?php
/**
 * PostLedgerAccountsLedgerAccount
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage Business Cloud Accounting - Accounts
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 3.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * PostLedgerAccountsLedgerAccount Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PostLedgerAccountsLedgerAccount implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'postLedgerAccounts_ledger_account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'ledgerAccountTypeId' => 'string',
        'includedInChart' => 'bool',
        'name' => 'string',
        'displayName' => 'string',
        'nominalCode' => 'int',
        'ledgerAccountClassificationId' => 'string',
        'taxRateId' => 'string',
        'fixedTaxRate' => 'bool',
        'visibleInBanking' => 'bool',
        'visibleInExpenses' => 'bool',
        'visibleInJournals' => 'bool',
        'visibleInOtherPayments' => 'bool',
        'visibleInOtherReceipts' => 'bool',
        'visibleInReporting' => 'bool',
        'visibleInSales' => 'bool',
        'controlName' => 'string',
        'taxRecoverable' => 'bool',
        'recoverablePercentage' => 'float',
        'nonRecoverableLedgerAccountId' => 'string',
        'cisMaterials' => 'bool',
        'cisLabour' => 'bool',
        'gifiCode' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'ledgerAccountTypeId' => null,
        'includedInChart' => null,
        'name' => null,
        'displayName' => null,
        'nominalCode' => 'int32',
        'ledgerAccountClassificationId' => null,
        'taxRateId' => null,
        'fixedTaxRate' => null,
        'visibleInBanking' => null,
        'visibleInExpenses' => null,
        'visibleInJournals' => null,
        'visibleInOtherPayments' => null,
        'visibleInOtherReceipts' => null,
        'visibleInReporting' => null,
        'visibleInSales' => null,
        'controlName' => null,
        'taxRecoverable' => null,
        'recoverablePercentage' => 'double',
        'nonRecoverableLedgerAccountId' => null,
        'cisMaterials' => null,
        'cisLabour' => null,
        'gifiCode' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'ledgerAccountTypeId' => false,
        'includedInChart' => false,
        'name' => false,
        'displayName' => false,
        'nominalCode' => false,
        'ledgerAccountClassificationId' => false,
        'taxRateId' => false,
        'fixedTaxRate' => false,
        'visibleInBanking' => false,
        'visibleInExpenses' => false,
        'visibleInJournals' => false,
        'visibleInOtherPayments' => false,
        'visibleInOtherReceipts' => false,
        'visibleInReporting' => false,
        'visibleInSales' => false,
        'controlName' => false,
        'taxRecoverable' => false,
        'recoverablePercentage' => false,
        'nonRecoverableLedgerAccountId' => false,
        'cisMaterials' => false,
        'cisLabour' => false,
        'gifiCode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'ledgerAccountTypeId' => 'ledger_account_type_id',
        'includedInChart' => 'included_in_chart',
        'name' => 'name',
        'displayName' => 'display_name',
        'nominalCode' => 'nominal_code',
        'ledgerAccountClassificationId' => 'ledger_account_classification_id',
        'taxRateId' => 'tax_rate_id',
        'fixedTaxRate' => 'fixed_tax_rate',
        'visibleInBanking' => 'visible_in_banking',
        'visibleInExpenses' => 'visible_in_expenses',
        'visibleInJournals' => 'visible_in_journals',
        'visibleInOtherPayments' => 'visible_in_other_payments',
        'visibleInOtherReceipts' => 'visible_in_other_receipts',
        'visibleInReporting' => 'visible_in_reporting',
        'visibleInSales' => 'visible_in_sales',
        'controlName' => 'control_name',
        'taxRecoverable' => 'tax_recoverable',
        'recoverablePercentage' => 'recoverable_percentage',
        'nonRecoverableLedgerAccountId' => 'non_recoverable_ledger_account_id',
        'cisMaterials' => 'cis_materials',
        'cisLabour' => 'cis_labour',
        'gifiCode' => 'gifi_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'ledgerAccountTypeId' => 'setLedgerAccountTypeId',
        'includedInChart' => 'setIncludedInChart',
        'name' => 'setName',
        'displayName' => 'setDisplayName',
        'nominalCode' => 'setNominalCode',
        'ledgerAccountClassificationId' => 'setLedgerAccountClassificationId',
        'taxRateId' => 'setTaxRateId',
        'fixedTaxRate' => 'setFixedTaxRate',
        'visibleInBanking' => 'setVisibleInBanking',
        'visibleInExpenses' => 'setVisibleInExpenses',
        'visibleInJournals' => 'setVisibleInJournals',
        'visibleInOtherPayments' => 'setVisibleInOtherPayments',
        'visibleInOtherReceipts' => 'setVisibleInOtherReceipts',
        'visibleInReporting' => 'setVisibleInReporting',
        'visibleInSales' => 'setVisibleInSales',
        'controlName' => 'setControlName',
        'taxRecoverable' => 'setTaxRecoverable',
        'recoverablePercentage' => 'setRecoverablePercentage',
        'nonRecoverableLedgerAccountId' => 'setNonRecoverableLedgerAccountId',
        'cisMaterials' => 'setCisMaterials',
        'cisLabour' => 'setCisLabour',
        'gifiCode' => 'setGifiCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'ledgerAccountTypeId' => 'getLedgerAccountTypeId',
        'includedInChart' => 'getIncludedInChart',
        'name' => 'getName',
        'displayName' => 'getDisplayName',
        'nominalCode' => 'getNominalCode',
        'ledgerAccountClassificationId' => 'getLedgerAccountClassificationId',
        'taxRateId' => 'getTaxRateId',
        'fixedTaxRate' => 'getFixedTaxRate',
        'visibleInBanking' => 'getVisibleInBanking',
        'visibleInExpenses' => 'getVisibleInExpenses',
        'visibleInJournals' => 'getVisibleInJournals',
        'visibleInOtherPayments' => 'getVisibleInOtherPayments',
        'visibleInOtherReceipts' => 'getVisibleInOtherReceipts',
        'visibleInReporting' => 'getVisibleInReporting',
        'visibleInSales' => 'getVisibleInSales',
        'controlName' => 'getControlName',
        'taxRecoverable' => 'getTaxRecoverable',
        'recoverablePercentage' => 'getRecoverablePercentage',
        'nonRecoverableLedgerAccountId' => 'getNonRecoverableLedgerAccountId',
        'cisMaterials' => 'getCisMaterials',
        'cisLabour' => 'getCisLabour',
        'gifiCode' => 'getGifiCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ledgerAccountTypeId', $data ?? [], null);
        $this->setIfExists('includedInChart', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('nominalCode', $data ?? [], null);
        $this->setIfExists('ledgerAccountClassificationId', $data ?? [], null);
        $this->setIfExists('taxRateId', $data ?? [], null);
        $this->setIfExists('fixedTaxRate', $data ?? [], null);
        $this->setIfExists('visibleInBanking', $data ?? [], null);
        $this->setIfExists('visibleInExpenses', $data ?? [], null);
        $this->setIfExists('visibleInJournals', $data ?? [], null);
        $this->setIfExists('visibleInOtherPayments', $data ?? [], null);
        $this->setIfExists('visibleInOtherReceipts', $data ?? [], null);
        $this->setIfExists('visibleInReporting', $data ?? [], null);
        $this->setIfExists('visibleInSales', $data ?? [], null);
        $this->setIfExists('controlName', $data ?? [], null);
        $this->setIfExists('taxRecoverable', $data ?? [], null);
        $this->setIfExists('recoverablePercentage', $data ?? [], null);
        $this->setIfExists('nonRecoverableLedgerAccountId', $data ?? [], null);
        $this->setIfExists('cisMaterials', $data ?? [], null);
        $this->setIfExists('cisLabour', $data ?? [], null);
        $this->setIfExists('gifiCode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['ledgerAccountTypeId'] === null) {
            $invalidProperties[] = "'ledgerAccountTypeId' can't be null";
        }
        if ($this->container['includedInChart'] === null) {
            $invalidProperties[] = "'includedInChart' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['displayName'] === null) {
            $invalidProperties[] = "'displayName' can't be null";
        }
        if ($this->container['nominalCode'] === null) {
            $invalidProperties[] = "'nominalCode' can't be null";
        }
        if (($this->container['nominalCode'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'nominalCode', must be smaller than or equal to 99999999.";
        }

        if (($this->container['nominalCode'] < 1)) {
            $invalidProperties[] = "invalid value for 'nominalCode', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['gifiCode']) && ($this->container['gifiCode'] > 9999)) {
            $invalidProperties[] = "invalid value for 'gifiCode', must be smaller than or equal to 9999.";
        }

        if (!is_null($this->container['gifiCode']) && ($this->container['gifiCode'] < 1000)) {
            $invalidProperties[] = "invalid value for 'gifiCode', must be bigger than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ledgerAccountTypeId
     *
     * @return string
     */
    public function getLedgerAccountTypeId(): string
    {
        return $this->container['ledgerAccountTypeId'];
    }

    /**
     * Sets ledgerAccountTypeId
     *
     * @param string $ledgerAccountTypeId The ledger account type for the ledger account
     *
     * @return $this
     */
    public function setLedgerAccountTypeId(string $ledgerAccountTypeId): static
    {
        if (is_null($ledgerAccountTypeId)) {
            throw new InvalidArgumentException('non-nullable ledgerAccountTypeId cannot be null');
        }
        $this->container['ledgerAccountTypeId'] = $ledgerAccountTypeId;

        return $this;
    }

    /**
     * Gets includedInChart
     *
     * @return bool
     */
    public function getIncludedInChart(): bool
    {
        return $this->container['includedInChart'];
    }

    /**
     * Sets includedInChart
     *
     * @param bool $includedInChart Indicates whether the ledger account is included in the chart of accounts
     *
     * @return $this
     */
    public function setIncludedInChart(bool $includedInChart): static
    {
        if (is_null($includedInChart)) {
            throw new InvalidArgumentException('non-nullable includedInChart cannot be null');
        }
        $this->container['includedInChart'] = $includedInChart;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name for the ledger account.  Changes to this field do not propagate to other resources, namely not to the name of the associated bank_account (unlike the behaviour of the UI).
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName(): string
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName The display name for the ledger account
     *
     * @return $this
     */
    public function setDisplayName(string $displayName): static
    {
        if (is_null($displayName)) {
            throw new InvalidArgumentException('non-nullable displayName cannot be null');
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets nominalCode
     *
     * @return int
     */
    public function getNominalCode(): int
    {
        return $this->container['nominalCode'];
    }

    /**
     * Sets nominalCode
     *
     * @param int $nominalCode The nominal code of the ledger account
     *
     * @return $this
     */
    public function setNominalCode(int $nominalCode): static
    {
        if (is_null($nominalCode)) {
            throw new InvalidArgumentException('non-nullable nominalCode cannot be null');
        }

        if (($nominalCode > 99999999)) {
            throw new InvalidArgumentException('invalid value for $nominalCode when calling PostLedgerAccountsLedgerAccount., must be smaller than or equal to 99999999.');
        }
        if (($nominalCode < 1)) {
            throw new InvalidArgumentException('invalid value for $nominalCode when calling PostLedgerAccountsLedgerAccount., must be bigger than or equal to 1.');
        }

        $this->container['nominalCode'] = $nominalCode;

        return $this;
    }

    /**
     * Gets ledgerAccountClassificationId
     *
     * @return string|null
     */
    public function getLedgerAccountClassificationId(): ?string
    {
        return $this->container['ledgerAccountClassificationId'];
    }

    /**
     * Sets ledgerAccountClassificationId
     *
     * @param string|null $ledgerAccountClassificationId The ID of the Ledger Account Classification.
     *
     * @return $this
     */
    public function setLedgerAccountClassificationId(?string $ledgerAccountClassificationId): static
    {
        if (is_null($ledgerAccountClassificationId)) {
            throw new InvalidArgumentException('non-nullable ledgerAccountClassificationId cannot be null');
        }
        $this->container['ledgerAccountClassificationId'] = $ledgerAccountClassificationId;

        return $this;
    }

    /**
     * Gets taxRateId
     *
     * @return string|null
     */
    public function getTaxRateId(): ?string
    {
        return $this->container['taxRateId'];
    }

    /**
     * Sets taxRateId
     *
     * @param string|null $taxRateId The ID of the Tax Rate.
     *
     * @return $this
     */
    public function setTaxRateId(?string $taxRateId): static
    {
        if (is_null($taxRateId)) {
            throw new InvalidArgumentException('non-nullable taxRateId cannot be null');
        }
        $this->container['taxRateId'] = $taxRateId;

        return $this;
    }

    /**
     * Gets fixedTaxRate
     *
     * @return bool|null
     */
    public function getFixedTaxRate(): ?bool
    {
        return $this->container['fixedTaxRate'];
    }

    /**
     * Sets fixedTaxRate
     *
     * @param bool|null $fixedTaxRate Indicates whether the default tax rate is fixed or may be changed per transaction
     *
     * @return $this
     */
    public function setFixedTaxRate(?bool $fixedTaxRate): static
    {
        if (is_null($fixedTaxRate)) {
            throw new InvalidArgumentException('non-nullable fixedTaxRate cannot be null');
        }
        $this->container['fixedTaxRate'] = $fixedTaxRate;

        return $this;
    }

    /**
     * Gets visibleInBanking
     *
     * @return bool|null
     */
    public function getVisibleInBanking(): ?bool
    {
        return $this->container['visibleInBanking'];
    }

    /**
     * Sets visibleInBanking
     *
     * @param bool|null $visibleInBanking Indicates whether the ledger account is displayed in the banking area of the application
     *
     * @return $this
     */
    public function setVisibleInBanking(?bool $visibleInBanking): static
    {
        if (is_null($visibleInBanking)) {
            throw new InvalidArgumentException('non-nullable visibleInBanking cannot be null');
        }
        $this->container['visibleInBanking'] = $visibleInBanking;

        return $this;
    }

    /**
     * Gets visibleInExpenses
     *
     * @return bool|null
     */
    public function getVisibleInExpenses(): ?bool
    {
        return $this->container['visibleInExpenses'];
    }

    /**
     * Sets visibleInExpenses
     *
     * @param bool|null $visibleInExpenses Indicates whether the ledger account is displayed in the purchases area of the application
     *
     * @return $this
     */
    public function setVisibleInExpenses(?bool $visibleInExpenses): static
    {
        if (is_null($visibleInExpenses)) {
            throw new InvalidArgumentException('non-nullable visibleInExpenses cannot be null');
        }
        $this->container['visibleInExpenses'] = $visibleInExpenses;

        return $this;
    }

    /**
     * Gets visibleInJournals
     *
     * @return bool|null
     */
    public function getVisibleInJournals(): ?bool
    {
        return $this->container['visibleInJournals'];
    }

    /**
     * Sets visibleInJournals
     *
     * @param bool|null $visibleInJournals Indicates whether the ledger account is displayed in the journals area of the application
     *
     * @return $this
     */
    public function setVisibleInJournals(?bool $visibleInJournals): static
    {
        if (is_null($visibleInJournals)) {
            throw new InvalidArgumentException('non-nullable visibleInJournals cannot be null');
        }
        $this->container['visibleInJournals'] = $visibleInJournals;

        return $this;
    }

    /**
     * Gets visibleInOtherPayments
     *
     * @return bool|null
     */
    public function getVisibleInOtherPayments(): ?bool
    {
        return $this->container['visibleInOtherPayments'];
    }

    /**
     * Sets visibleInOtherPayments
     *
     * @param bool|null $visibleInOtherPayments Indicates whether the ledger account is displayed in the other payments area of the application
     *
     * @return $this
     */
    public function setVisibleInOtherPayments(?bool $visibleInOtherPayments): static
    {
        if (is_null($visibleInOtherPayments)) {
            throw new InvalidArgumentException('non-nullable visibleInOtherPayments cannot be null');
        }
        $this->container['visibleInOtherPayments'] = $visibleInOtherPayments;

        return $this;
    }

    /**
     * Gets visibleInOtherReceipts
     *
     * @return bool|null
     */
    public function getVisibleInOtherReceipts(): ?bool
    {
        return $this->container['visibleInOtherReceipts'];
    }

    /**
     * Sets visibleInOtherReceipts
     *
     * @param bool|null $visibleInOtherReceipts Indicates whether the ledger account is displayed in the other receipts area of the application
     *
     * @return $this
     */
    public function setVisibleInOtherReceipts(?bool $visibleInOtherReceipts): static
    {
        if (is_null($visibleInOtherReceipts)) {
            throw new InvalidArgumentException('non-nullable visibleInOtherReceipts cannot be null');
        }
        $this->container['visibleInOtherReceipts'] = $visibleInOtherReceipts;

        return $this;
    }

    /**
     * Gets visibleInReporting
     *
     * @return bool|null
     */
    public function getVisibleInReporting(): ?bool
    {
        return $this->container['visibleInReporting'];
    }

    /**
     * Sets visibleInReporting
     *
     * @param bool|null $visibleInReporting Indicates whether the ledger account is displayed in the reporting area of the application
     *
     * @return $this
     */
    public function setVisibleInReporting(?bool $visibleInReporting): static
    {
        if (is_null($visibleInReporting)) {
            throw new InvalidArgumentException('non-nullable visibleInReporting cannot be null');
        }
        $this->container['visibleInReporting'] = $visibleInReporting;

        return $this;
    }

    /**
     * Gets visibleInSales
     *
     * @return bool|null
     */
    public function getVisibleInSales(): ?bool
    {
        return $this->container['visibleInSales'];
    }

    /**
     * Sets visibleInSales
     *
     * @param bool|null $visibleInSales Indicates whether the ledger account is displayed in the sales area of the application
     *
     * @return $this
     */
    public function setVisibleInSales(?bool $visibleInSales): static
    {
        if (is_null($visibleInSales)) {
            throw new InvalidArgumentException('non-nullable visibleInSales cannot be null');
        }
        $this->container['visibleInSales'] = $visibleInSales;

        return $this;
    }

    /**
     * Gets controlName
     *
     * @return string|null
     */
    public function getControlName(): ?string
    {
        return $this->container['controlName'];
    }

    /**
     * Sets controlName
     *
     * @param string|null $controlName The control name for the ledger account.  This is used internally by Accounting to identify the correct ledger account for booking taxes etc. You cannot add ledger accounts with control name and you cannot modify the control name of existing ledger accounts.
     *
     * @return $this
     */
    public function setControlName(?string $controlName): static
    {
        if (is_null($controlName)) {
            throw new InvalidArgumentException('non-nullable controlName cannot be null');
        }
        $this->container['controlName'] = $controlName;

        return $this;
    }

    /**
     * Gets taxRecoverable
     *
     * @return bool|null
     */
    public function getTaxRecoverable(): ?bool
    {
        return $this->container['taxRecoverable'];
    }

    /**
     * Sets taxRecoverable
     *
     * @param bool|null $taxRecoverable Indicates that transactions posted to this ledger account have part recoverable taxes (Canada only)
     *
     * @return $this
     */
    public function setTaxRecoverable(?bool $taxRecoverable): static
    {
        if (is_null($taxRecoverable)) {
            throw new InvalidArgumentException('non-nullable taxRecoverable cannot be null');
        }
        $this->container['taxRecoverable'] = $taxRecoverable;

        return $this;
    }

    /**
     * Gets recoverablePercentage
     *
     * @return float|null
     */
    public function getRecoverablePercentage(): ?float
    {
        return $this->container['recoverablePercentage'];
    }

    /**
     * Sets recoverablePercentage
     *
     * @param float|null $recoverablePercentage The partial recoverable tax rate (Canada only)
     *
     * @return $this
     */
    public function setRecoverablePercentage(?float $recoverablePercentage): static
    {
        if (is_null($recoverablePercentage)) {
            throw new InvalidArgumentException('non-nullable recoverablePercentage cannot be null');
        }
        $this->container['recoverablePercentage'] = $recoverablePercentage;

        return $this;
    }

    /**
     * Gets nonRecoverableLedgerAccountId
     *
     * @return string|null
     */
    public function getNonRecoverableLedgerAccountId(): ?string
    {
        return $this->container['nonRecoverableLedgerAccountId'];
    }

    /**
     * Sets nonRecoverableLedgerAccountId
     *
     * @param string|null $nonRecoverableLedgerAccountId The ID of the Non Recoverable Ledger Account.
     *
     * @return $this
     */
    public function setNonRecoverableLedgerAccountId(?string $nonRecoverableLedgerAccountId): static
    {
        if (is_null($nonRecoverableLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable nonRecoverableLedgerAccountId cannot be null');
        }
        $this->container['nonRecoverableLedgerAccountId'] = $nonRecoverableLedgerAccountId;

        return $this;
    }

    /**
     * Gets cisMaterials
     *
     * @return bool|null
     */
    public function getCisMaterials(): ?bool
    {
        return $this->container['cisMaterials'];
    }

    /**
     * Sets cisMaterials
     *
     * @param bool|null $cisMaterials Indicates whether the ledger account is flagged for CIS Materials
     *
     * @return $this
     */
    public function setCisMaterials(?bool $cisMaterials): static
    {
        if (is_null($cisMaterials)) {
            throw new InvalidArgumentException('non-nullable cisMaterials cannot be null');
        }
        $this->container['cisMaterials'] = $cisMaterials;

        return $this;
    }

    /**
     * Gets cisLabour
     *
     * @return bool|null
     */
    public function getCisLabour(): ?bool
    {
        return $this->container['cisLabour'];
    }

    /**
     * Sets cisLabour
     *
     * @param bool|null $cisLabour Indicates whether the ledger account is flagged for CIS Labour
     *
     * @return $this
     */
    public function setCisLabour(?bool $cisLabour): static
    {
        if (is_null($cisLabour)) {
            throw new InvalidArgumentException('non-nullable cisLabour cannot be null');
        }
        $this->container['cisLabour'] = $cisLabour;

        return $this;
    }

    /**
     * Gets gifiCode
     *
     * @return int|null
     */
    public function getGifiCode(): ?int
    {
        return $this->container['gifiCode'];
    }

    /**
     * Sets gifiCode
     *
     * @param int|null $gifiCode The GIFI code of the ledger account.  GIFI is short for The General Index of Financial Information and it lets the CRA validate tax information electronically instead of manually. Information from financial statements is categorized under the appropriate 4-digit-long GIFI code and entered on corporate income tax returns. GIFI is needed when filing a T2 income tax return.  _Canada only_
     *
     * @return $this
     */
    public function setGifiCode(?int $gifiCode): static
    {
        if (is_null($gifiCode)) {
            throw new InvalidArgumentException('non-nullable gifiCode cannot be null');
        }

        if (($gifiCode > 9999)) {
            throw new InvalidArgumentException('invalid value for $gifiCode when calling PostLedgerAccountsLedgerAccount., must be smaller than or equal to 9999.');
        }
        if (($gifiCode < 1000)) {
            throw new InvalidArgumentException('invalid value for $gifiCode when calling PostLedgerAccountsLedgerAccount., must be bigger than or equal to 1000.');
        }

        $this->container['gifiCode'] = $gifiCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


