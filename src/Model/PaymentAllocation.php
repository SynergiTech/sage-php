<?php
/**
 * PaymentAllocation
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage Business Cloud Accounting - Accounts
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 3.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * PaymentAllocation Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PaymentAllocation implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PaymentAllocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'links' => '\SynergiTech\Sage\Model\Link[]',
        'date' => '\DateTime',
        'type' => 'string',
        'reference' => 'string',
        'amount' => 'float',
        'discount' => 'float',
        'stripeTransactionId' => 'string',
        'contactAllocation' => '\SynergiTech\Sage\Model\ContactAllocation',
        'artefact' => '\SynergiTech\Sage\Model\Generic',
        'contactPayment' => '\SynergiTech\Sage\Model\ContactPayment',
        'displayedAs' => 'string',
        'negativePayment' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'links' => null,
        'date' => 'date',
        'type' => null,
        'reference' => null,
        'amount' => 'double',
        'discount' => 'double',
        'stripeTransactionId' => null,
        'contactAllocation' => null,
        'artefact' => null,
        'contactPayment' => null,
        'displayedAs' => null,
        'negativePayment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'links' => false,
        'date' => false,
        'type' => false,
        'reference' => false,
        'amount' => false,
        'discount' => false,
        'stripeTransactionId' => false,
        'contactAllocation' => false,
        'artefact' => false,
        'contactPayment' => false,
        'displayedAs' => false,
        'negativePayment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'links' => 'links',
        'date' => 'date',
        'type' => 'type',
        'reference' => 'reference',
        'amount' => 'amount',
        'discount' => 'discount',
        'stripeTransactionId' => 'stripe_transaction_id',
        'contactAllocation' => 'contact_allocation',
        'artefact' => 'artefact',
        'contactPayment' => 'contact_payment',
        'displayedAs' => 'displayed_as',
        'negativePayment' => 'negative_payment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'links' => 'setLinks',
        'date' => 'setDate',
        'type' => 'setType',
        'reference' => 'setReference',
        'amount' => 'setAmount',
        'discount' => 'setDiscount',
        'stripeTransactionId' => 'setStripeTransactionId',
        'contactAllocation' => 'setContactAllocation',
        'artefact' => 'setArtefact',
        'contactPayment' => 'setContactPayment',
        'displayedAs' => 'setDisplayedAs',
        'negativePayment' => 'setNegativePayment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'links' => 'getLinks',
        'date' => 'getDate',
        'type' => 'getType',
        'reference' => 'getReference',
        'amount' => 'getAmount',
        'discount' => 'getDiscount',
        'stripeTransactionId' => 'getStripeTransactionId',
        'contactAllocation' => 'getContactAllocation',
        'artefact' => 'getArtefact',
        'contactPayment' => 'getContactPayment',
        'displayedAs' => 'getDisplayedAs',
        'negativePayment' => 'getNegativePayment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('stripeTransactionId', $data ?? [], null);
        $this->setIfExists('contactAllocation', $data ?? [], null);
        $this->setIfExists('artefact', $data ?? [], null);
        $this->setIfExists('contactPayment', $data ?? [], null);
        $this->setIfExists('displayedAs', $data ?? [], null);
        $this->setIfExists('negativePayment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \SynergiTech\Sage\Model\Link[]|null
     */
    public function getLinks(): ?array
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \SynergiTech\Sage\Model\Link[]|null $links Links for the resource
     *
     * @return $this
     */
    public function setLinks(?array $links): static
    {
        if (is_null($links)) {
            throw new InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate(): ?\DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The date for the payment/allocation
     *
     * @return $this
     */
    public function setDate(?\DateTime $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of the payment/allocation
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference The reference for the payment/allocation
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount(): ?float
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The allocated amount of the payment/allocation
     *
     * @return $this
     */
    public function setAmount(?float $amount): static
    {
        if (is_null($amount)) {
            throw new InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount(): ?float
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount The discount amount of the payment/allocation
     *
     * @return $this
     */
    public function setDiscount(?float $discount): static
    {
        if (is_null($discount)) {
            throw new InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets stripeTransactionId
     *
     * @return string|null
     */
    public function getStripeTransactionId(): ?string
    {
        return $this->container['stripeTransactionId'];
    }

    /**
     * Sets stripeTransactionId
     *
     * @param string|null $stripeTransactionId stripeTransactionId
     *
     * @return $this
     */
    public function setStripeTransactionId(?string $stripeTransactionId): static
    {
        if (is_null($stripeTransactionId)) {
            throw new InvalidArgumentException('non-nullable stripeTransactionId cannot be null');
        }
        $this->container['stripeTransactionId'] = $stripeTransactionId;

        return $this;
    }

    /**
     * Gets contactAllocation
     *
     * @return \SynergiTech\Sage\Model\ContactAllocation|null
     */
    public function getContactAllocation(): ?\SynergiTech\Sage\Model\ContactAllocation
    {
        return $this->container['contactAllocation'];
    }

    /**
     * Sets contactAllocation
     *
     * @param \SynergiTech\Sage\Model\ContactAllocation|null $contactAllocation contactAllocation
     *
     * @return $this
     */
    public function setContactAllocation(?\SynergiTech\Sage\Model\ContactAllocation $contactAllocation): static
    {
        if (is_null($contactAllocation)) {
            throw new InvalidArgumentException('non-nullable contactAllocation cannot be null');
        }
        $this->container['contactAllocation'] = $contactAllocation;

        return $this;
    }

    /**
     * Gets artefact
     *
     * @return \SynergiTech\Sage\Model\Generic|null
     */
    public function getArtefact(): ?\SynergiTech\Sage\Model\Generic
    {
        return $this->container['artefact'];
    }

    /**
     * Sets artefact
     *
     * @param \SynergiTech\Sage\Model\Generic|null $artefact artefact
     *
     * @return $this
     */
    public function setArtefact(?\SynergiTech\Sage\Model\Generic $artefact): static
    {
        if (is_null($artefact)) {
            throw new InvalidArgumentException('non-nullable artefact cannot be null');
        }
        $this->container['artefact'] = $artefact;

        return $this;
    }

    /**
     * Gets contactPayment
     *
     * @return \SynergiTech\Sage\Model\ContactPayment|null
     */
    public function getContactPayment(): ?\SynergiTech\Sage\Model\ContactPayment
    {
        return $this->container['contactPayment'];
    }

    /**
     * Sets contactPayment
     *
     * @param \SynergiTech\Sage\Model\ContactPayment|null $contactPayment contactPayment
     *
     * @return $this
     */
    public function setContactPayment(?\SynergiTech\Sage\Model\ContactPayment $contactPayment): static
    {
        if (is_null($contactPayment)) {
            throw new InvalidArgumentException('non-nullable contactPayment cannot be null');
        }
        $this->container['contactPayment'] = $contactPayment;

        return $this;
    }

    /**
     * Gets displayedAs
     *
     * @return string|null
     */
    public function getDisplayedAs(): ?string
    {
        return $this->container['displayedAs'];
    }

    /**
     * Sets displayedAs
     *
     * @param string|null $displayedAs Display text for the item
     *
     * @return $this
     */
    public function setDisplayedAs(?string $displayedAs): static
    {
        if (is_null($displayedAs)) {
            throw new InvalidArgumentException('non-nullable displayedAs cannot be null');
        }
        $this->container['displayedAs'] = $displayedAs;

        return $this;
    }

    /**
     * Gets negativePayment
     *
     * @return bool|null
     */
    public function getNegativePayment(): ?bool
    {
        return $this->container['negativePayment'];
    }

    /**
     * Sets negativePayment
     *
     * @param bool|null $negativePayment This is a negative payment
     *
     * @return $this
     */
    public function setNegativePayment(?bool $negativePayment): static
    {
        if (is_null($negativePayment)) {
            throw new InvalidArgumentException('non-nullable negativePayment cannot be null');
        }
        $this->container['negativePayment'] = $negativePayment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


