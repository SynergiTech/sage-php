<?php
/**
 * PutOtherPaymentsOtherPayment
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * PutOtherPaymentsOtherPayment Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PutOtherPaymentsOtherPayment implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'putOtherPayments_other_payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'transactionTypeId' => 'string',
        'date' => '\DateTime',
        'totalAmount' => 'float',
        'baseCurrencyTotalItcAmount' => 'float',
        'totalItcAmount' => 'float',
        'baseCurrencyTotalItrAmount' => 'float',
        'totalItrAmount' => 'float',
        'partRecoverable' => 'bool',
        'paymentMethodId' => 'string',
        'contactId' => 'string',
        'bankAccountId' => 'string',
        'taxAddressRegionId' => 'string',
        'netAmount' => 'float',
        'taxAmount' => 'float',
        'reference' => 'string',
        'withholdingTaxRate' => 'float',
        'withholdingTaxAmount' => 'float',
        'paymentLines' => '\SynergiTech\Sage\Model\PutOtherPaymentsOtherPaymentPaymentLinesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'transactionTypeId' => null,
        'date' => 'date',
        'totalAmount' => 'double',
        'baseCurrencyTotalItcAmount' => 'double',
        'totalItcAmount' => 'double',
        'baseCurrencyTotalItrAmount' => 'double',
        'totalItrAmount' => 'double',
        'partRecoverable' => null,
        'paymentMethodId' => null,
        'contactId' => null,
        'bankAccountId' => null,
        'taxAddressRegionId' => null,
        'netAmount' => 'double',
        'taxAmount' => 'double',
        'reference' => null,
        'withholdingTaxRate' => 'double',
        'withholdingTaxAmount' => 'double',
        'paymentLines' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'transactionTypeId' => false,
        'date' => false,
        'totalAmount' => false,
        'baseCurrencyTotalItcAmount' => false,
        'totalItcAmount' => false,
        'baseCurrencyTotalItrAmount' => false,
        'totalItrAmount' => false,
        'partRecoverable' => false,
        'paymentMethodId' => false,
        'contactId' => false,
        'bankAccountId' => false,
        'taxAddressRegionId' => false,
        'netAmount' => false,
        'taxAmount' => false,
        'reference' => false,
        'withholdingTaxRate' => false,
        'withholdingTaxAmount' => false,
        'paymentLines' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'transactionTypeId' => 'transaction_type_id',
        'date' => 'date',
        'totalAmount' => 'total_amount',
        'baseCurrencyTotalItcAmount' => 'base_currency_total_itc_amount',
        'totalItcAmount' => 'total_itc_amount',
        'baseCurrencyTotalItrAmount' => 'base_currency_total_itr_amount',
        'totalItrAmount' => 'total_itr_amount',
        'partRecoverable' => 'part_recoverable',
        'paymentMethodId' => 'payment_method_id',
        'contactId' => 'contact_id',
        'bankAccountId' => 'bank_account_id',
        'taxAddressRegionId' => 'tax_address_region_id',
        'netAmount' => 'net_amount',
        'taxAmount' => 'tax_amount',
        'reference' => 'reference',
        'withholdingTaxRate' => 'withholding_tax_rate',
        'withholdingTaxAmount' => 'withholding_tax_amount',
        'paymentLines' => 'payment_lines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'transactionTypeId' => 'setTransactionTypeId',
        'date' => 'setDate',
        'totalAmount' => 'setTotalAmount',
        'baseCurrencyTotalItcAmount' => 'setBaseCurrencyTotalItcAmount',
        'totalItcAmount' => 'setTotalItcAmount',
        'baseCurrencyTotalItrAmount' => 'setBaseCurrencyTotalItrAmount',
        'totalItrAmount' => 'setTotalItrAmount',
        'partRecoverable' => 'setPartRecoverable',
        'paymentMethodId' => 'setPaymentMethodId',
        'contactId' => 'setContactId',
        'bankAccountId' => 'setBankAccountId',
        'taxAddressRegionId' => 'setTaxAddressRegionId',
        'netAmount' => 'setNetAmount',
        'taxAmount' => 'setTaxAmount',
        'reference' => 'setReference',
        'withholdingTaxRate' => 'setWithholdingTaxRate',
        'withholdingTaxAmount' => 'setWithholdingTaxAmount',
        'paymentLines' => 'setPaymentLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'transactionTypeId' => 'getTransactionTypeId',
        'date' => 'getDate',
        'totalAmount' => 'getTotalAmount',
        'baseCurrencyTotalItcAmount' => 'getBaseCurrencyTotalItcAmount',
        'totalItcAmount' => 'getTotalItcAmount',
        'baseCurrencyTotalItrAmount' => 'getBaseCurrencyTotalItrAmount',
        'totalItrAmount' => 'getTotalItrAmount',
        'partRecoverable' => 'getPartRecoverable',
        'paymentMethodId' => 'getPaymentMethodId',
        'contactId' => 'getContactId',
        'bankAccountId' => 'getBankAccountId',
        'taxAddressRegionId' => 'getTaxAddressRegionId',
        'netAmount' => 'getNetAmount',
        'taxAmount' => 'getTaxAmount',
        'reference' => 'getReference',
        'withholdingTaxRate' => 'getWithholdingTaxRate',
        'withholdingTaxAmount' => 'getWithholdingTaxAmount',
        'paymentLines' => 'getPaymentLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('transactionTypeId', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('totalAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalItcAmount', $data ?? [], null);
        $this->setIfExists('totalItcAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalItrAmount', $data ?? [], null);
        $this->setIfExists('totalItrAmount', $data ?? [], null);
        $this->setIfExists('partRecoverable', $data ?? [], null);
        $this->setIfExists('paymentMethodId', $data ?? [], null);
        $this->setIfExists('contactId', $data ?? [], null);
        $this->setIfExists('bankAccountId', $data ?? [], null);
        $this->setIfExists('taxAddressRegionId', $data ?? [], null);
        $this->setIfExists('netAmount', $data ?? [], null);
        $this->setIfExists('taxAmount', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('withholdingTaxRate', $data ?? [], null);
        $this->setIfExists('withholdingTaxAmount', $data ?? [], null);
        $this->setIfExists('paymentLines', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transactionTypeId
     *
     * @return string|null
     */
    public function getTransactionTypeId(): ?string
    {
        return $this->container['transactionTypeId'];
    }

    /**
     * Sets transactionTypeId
     *
     * @param string|null $transactionTypeId The transaction type of the payment
     *
     * @return $this
     */
    public function setTransactionTypeId(?string $transactionTypeId): static
    {
        if (is_null($transactionTypeId)) {
            throw new InvalidArgumentException('non-nullable transactionTypeId cannot be null');
        }
        $this->container['transactionTypeId'] = $transactionTypeId;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate(): ?\DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The date of the payment
     *
     * @return $this
     */
    public function setDate(?\DateTime $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets totalAmount
     *
     * @return float|null
     */
    public function getTotalAmount(): ?float
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     *
     * @param float|null $totalAmount The total amount of the payment
     *
     * @return $this
     */
    public function setTotalAmount(?float $totalAmount): static
    {
        if (is_null($totalAmount)) {
            throw new InvalidArgumentException('non-nullable totalAmount cannot be null');
        }
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalItcAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalItcAmount(): ?float
    {
        return $this->container['baseCurrencyTotalItcAmount'];
    }

    /**
     * Sets baseCurrencyTotalItcAmount
     *
     * @param float|null $baseCurrencyTotalItcAmount The total amount of input tax credit in base currency for the                      Other Payment (Canada only)
     *
     * @return $this
     */
    public function setBaseCurrencyTotalItcAmount(?float $baseCurrencyTotalItcAmount): static
    {
        if (is_null($baseCurrencyTotalItcAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalItcAmount cannot be null');
        }
        $this->container['baseCurrencyTotalItcAmount'] = $baseCurrencyTotalItcAmount;

        return $this;
    }

    /**
     * Gets totalItcAmount
     *
     * @return float|null
     */
    public function getTotalItcAmount(): ?float
    {
        return $this->container['totalItcAmount'];
    }

    /**
     * Sets totalItcAmount
     *
     * @param float|null $totalItcAmount The total amount of input tax credit for the Other Payment (Canada only)
     *
     * @return $this
     */
    public function setTotalItcAmount(?float $totalItcAmount): static
    {
        if (is_null($totalItcAmount)) {
            throw new InvalidArgumentException('non-nullable totalItcAmount cannot be null');
        }
        $this->container['totalItcAmount'] = $totalItcAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalItrAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalItrAmount(): ?float
    {
        return $this->container['baseCurrencyTotalItrAmount'];
    }

    /**
     * Sets baseCurrencyTotalItrAmount
     *
     * @param float|null $baseCurrencyTotalItrAmount The total amount of input tax refund in base currency for the                      Other Payment (Canada only)
     *
     * @return $this
     */
    public function setBaseCurrencyTotalItrAmount(?float $baseCurrencyTotalItrAmount): static
    {
        if (is_null($baseCurrencyTotalItrAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalItrAmount cannot be null');
        }
        $this->container['baseCurrencyTotalItrAmount'] = $baseCurrencyTotalItrAmount;

        return $this;
    }

    /**
     * Gets totalItrAmount
     *
     * @return float|null
     */
    public function getTotalItrAmount(): ?float
    {
        return $this->container['totalItrAmount'];
    }

    /**
     * Sets totalItrAmount
     *
     * @param float|null $totalItrAmount The total amount of input tax refund for the Other Payment (Canada only)
     *
     * @return $this
     */
    public function setTotalItrAmount(?float $totalItrAmount): static
    {
        if (is_null($totalItrAmount)) {
            throw new InvalidArgumentException('non-nullable totalItrAmount cannot be null');
        }
        $this->container['totalItrAmount'] = $totalItrAmount;

        return $this;
    }

    /**
     * Gets partRecoverable
     *
     * @return bool|null
     */
    public function getPartRecoverable(): ?bool
    {
        return $this->container['partRecoverable'];
    }

    /**
     * Sets partRecoverable
     *
     * @param bool|null $partRecoverable Indicates if the Other Payment is part recoverable or not (Canada only)
     *
     * @return $this
     */
    public function setPartRecoverable(?bool $partRecoverable): static
    {
        if (is_null($partRecoverable)) {
            throw new InvalidArgumentException('non-nullable partRecoverable cannot be null');
        }
        $this->container['partRecoverable'] = $partRecoverable;

        return $this;
    }

    /**
     * Gets paymentMethodId
     *
     * @return string|null
     */
    public function getPaymentMethodId(): ?string
    {
        return $this->container['paymentMethodId'];
    }

    /**
     * Sets paymentMethodId
     *
     * @param string|null $paymentMethodId The ID of the Payment Method.
     *
     * @return $this
     */
    public function setPaymentMethodId(?string $paymentMethodId): static
    {
        if (is_null($paymentMethodId)) {
            throw new InvalidArgumentException('non-nullable paymentMethodId cannot be null');
        }
        $this->container['paymentMethodId'] = $paymentMethodId;

        return $this;
    }

    /**
     * Gets contactId
     *
     * @return string|null
     */
    public function getContactId(): ?string
    {
        return $this->container['contactId'];
    }

    /**
     * Sets contactId
     *
     * @param string|null $contactId The ID of the Contact.
     *
     * @return $this
     */
    public function setContactId(?string $contactId): static
    {
        if (is_null($contactId)) {
            throw new InvalidArgumentException('non-nullable contactId cannot be null');
        }
        $this->container['contactId'] = $contactId;

        return $this;
    }

    /**
     * Gets bankAccountId
     *
     * @return string|null
     */
    public function getBankAccountId(): ?string
    {
        return $this->container['bankAccountId'];
    }

    /**
     * Sets bankAccountId
     *
     * @param string|null $bankAccountId The ID of the Bank Account.
     *
     * @return $this
     */
    public function setBankAccountId(?string $bankAccountId): static
    {
        if (is_null($bankAccountId)) {
            throw new InvalidArgumentException('non-nullable bankAccountId cannot be null');
        }
        $this->container['bankAccountId'] = $bankAccountId;

        return $this;
    }

    /**
     * Gets taxAddressRegionId
     *
     * @return string|null
     */
    public function getTaxAddressRegionId(): ?string
    {
        return $this->container['taxAddressRegionId'];
    }

    /**
     * Sets taxAddressRegionId
     *
     * @param string|null $taxAddressRegionId The ID of the Tax Address Region. (Canada only)
     *
     * @return $this
     */
    public function setTaxAddressRegionId(?string $taxAddressRegionId): static
    {
        if (is_null($taxAddressRegionId)) {
            throw new InvalidArgumentException('non-nullable taxAddressRegionId cannot be null');
        }
        $this->container['taxAddressRegionId'] = $taxAddressRegionId;

        return $this;
    }

    /**
     * Gets netAmount
     *
     * @return float|null
     */
    public function getNetAmount(): ?float
    {
        return $this->container['netAmount'];
    }

    /**
     * Sets netAmount
     *
     * @param float|null $netAmount The net amount of the payment
     *
     * @return $this
     */
    public function setNetAmount(?float $netAmount): static
    {
        if (is_null($netAmount)) {
            throw new InvalidArgumentException('non-nullable netAmount cannot be null');
        }
        $this->container['netAmount'] = $netAmount;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return float|null
     */
    public function getTaxAmount(): ?float
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param float|null $taxAmount The tax amount of the payment
     *
     * @return $this
     */
    public function setTaxAmount(?float $taxAmount): static
    {
        if (is_null($taxAmount)) {
            throw new InvalidArgumentException('non-nullable taxAmount cannot be null');
        }
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A reference of the payment
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets withholdingTaxRate
     *
     * @return float|null
     */
    public function getWithholdingTaxRate(): ?float
    {
        return $this->container['withholdingTaxRate'];
    }

    /**
     * Sets withholdingTaxRate
     *
     * @param float|null $withholdingTaxRate IRPF withheld tax rate
     *
     * @return $this
     */
    public function setWithholdingTaxRate(?float $withholdingTaxRate): static
    {
        if (is_null($withholdingTaxRate)) {
            throw new InvalidArgumentException('non-nullable withholdingTaxRate cannot be null');
        }
        $this->container['withholdingTaxRate'] = $withholdingTaxRate;

        return $this;
    }

    /**
     * Gets withholdingTaxAmount
     *
     * @return float|null
     */
    public function getWithholdingTaxAmount(): ?float
    {
        return $this->container['withholdingTaxAmount'];
    }

    /**
     * Sets withholdingTaxAmount
     *
     * @param float|null $withholdingTaxAmount IRPF withheld tax amount
     *
     * @return $this
     */
    public function setWithholdingTaxAmount(?float $withholdingTaxAmount): static
    {
        if (is_null($withholdingTaxAmount)) {
            throw new InvalidArgumentException('non-nullable withholdingTaxAmount cannot be null');
        }
        $this->container['withholdingTaxAmount'] = $withholdingTaxAmount;

        return $this;
    }

    /**
     * Gets paymentLines
     *
     * @return \SynergiTech\Sage\Model\PutOtherPaymentsOtherPaymentPaymentLinesInner[]|null
     */
    public function getPaymentLines(): ?array
    {
        return $this->container['paymentLines'];
    }

    /**
     * Sets paymentLines
     *
     * @param \SynergiTech\Sage\Model\PutOtherPaymentsOtherPaymentPaymentLinesInner[]|null $paymentLines paymentLines
     *
     * @return $this
     */
    public function setPaymentLines(?array $paymentLines): static
    {
        if (is_null($paymentLines)) {
            throw new InvalidArgumentException('non-nullable paymentLines cannot be null');
        }
        $this->container['paymentLines'] = $paymentLines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


