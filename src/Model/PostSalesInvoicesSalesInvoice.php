<?php
/**
 * PostSalesInvoicesSalesInvoice
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * PostSalesInvoicesSalesInvoice Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PostSalesInvoicesSalesInvoice implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'postSalesInvoices_sales_invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'contactId' => 'string',
        'date' => '\DateTime',
        'vatReverseCharge' => 'bool',
        'destinationConsignment' => 'bool',
        'cisApplicableAmount' => 'float',
        'baseCurrencyCisApplicableAmount' => 'float',
        'totalAfterCisDeduction' => 'float',
        'baseCurrencyTotalAfterCisDeduction' => 'float',
        'invoiceNumberPrefix' => 'string',
        'invoiceNumber' => 'string',
        'contactName' => 'string',
        'contactReference' => 'string',
        'dueDate' => '\DateTime',
        'reference' => 'string',
        'notes' => 'string',
        'termsAndConditions' => 'string',
        'shippingNetAmount' => 'float',
        'shippingTaxRateId' => 'string',
        'shippingTaxAmount' => 'float',
        'shippingTotalAmount' => 'float',
        'netAmount' => 'float',
        'taxAmount' => 'float',
        'totalAmount' => 'float',
        'currencyId' => 'string',
        'exchangeRate' => 'float',
        'inverseExchangeRate' => 'float',
        'baseCurrencyShippingNetAmount' => 'float',
        'baseCurrencyShippingTaxAmount' => 'float',
        'baseCurrencyShippingTotalAmount' => 'float',
        'totalQuantity' => 'float',
        'totalDiscountAmount' => 'float',
        'baseCurrencyTotalDiscountAmount' => 'float',
        'baseCurrencyNetAmount' => 'float',
        'baseCurrencyTaxAmount' => 'float',
        'baseCurrencyTotalAmount' => 'float',
        'statusId' => 'string',
        'sent' => 'bool',
        'originalQuoteEstimateId' => 'string',
        'taxAddressRegionId' => 'string',
        'deliveryPerformanceDate' => 'string',
        'withholdingTaxRate' => 'float',
        'withholdingTaxAmount' => 'float',
        'baseCurrencyWithholdingTaxAmount' => 'float',
        'recurringInvoice' => '\SynergiTech\Sage\Model\PostSalesInvoicesSalesInvoiceRecurringInvoice',
        'mainAddress' => '\SynergiTech\Sage\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress',
        'deliveryAddress' => '\SynergiTech\Sage\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress',
        'invoiceLines' => '\SynergiTech\Sage\Model\PostSalesCreditNotesSalesCreditNoteCreditNoteLinesInner[]',
        'taxAnalysis' => '\SynergiTech\Sage\Model\PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysisInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'contactId' => null,
        'date' => 'date',
        'vatReverseCharge' => null,
        'destinationConsignment' => null,
        'cisApplicableAmount' => 'double',
        'baseCurrencyCisApplicableAmount' => 'double',
        'totalAfterCisDeduction' => 'double',
        'baseCurrencyTotalAfterCisDeduction' => 'double',
        'invoiceNumberPrefix' => null,
        'invoiceNumber' => null,
        'contactName' => null,
        'contactReference' => null,
        'dueDate' => 'date',
        'reference' => null,
        'notes' => null,
        'termsAndConditions' => null,
        'shippingNetAmount' => 'double',
        'shippingTaxRateId' => null,
        'shippingTaxAmount' => 'double',
        'shippingTotalAmount' => 'double',
        'netAmount' => 'double',
        'taxAmount' => 'double',
        'totalAmount' => 'double',
        'currencyId' => null,
        'exchangeRate' => 'double',
        'inverseExchangeRate' => 'double',
        'baseCurrencyShippingNetAmount' => 'double',
        'baseCurrencyShippingTaxAmount' => 'double',
        'baseCurrencyShippingTotalAmount' => 'double',
        'totalQuantity' => 'double',
        'totalDiscountAmount' => 'double',
        'baseCurrencyTotalDiscountAmount' => 'double',
        'baseCurrencyNetAmount' => 'double',
        'baseCurrencyTaxAmount' => 'double',
        'baseCurrencyTotalAmount' => 'double',
        'statusId' => null,
        'sent' => null,
        'originalQuoteEstimateId' => null,
        'taxAddressRegionId' => null,
        'deliveryPerformanceDate' => null,
        'withholdingTaxRate' => 'double',
        'withholdingTaxAmount' => 'double',
        'baseCurrencyWithholdingTaxAmount' => 'double',
        'recurringInvoice' => null,
        'mainAddress' => null,
        'deliveryAddress' => null,
        'invoiceLines' => null,
        'taxAnalysis' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'contactId' => false,
        'date' => false,
        'vatReverseCharge' => false,
        'destinationConsignment' => false,
        'cisApplicableAmount' => false,
        'baseCurrencyCisApplicableAmount' => false,
        'totalAfterCisDeduction' => false,
        'baseCurrencyTotalAfterCisDeduction' => false,
        'invoiceNumberPrefix' => false,
        'invoiceNumber' => false,
        'contactName' => false,
        'contactReference' => false,
        'dueDate' => false,
        'reference' => false,
        'notes' => false,
        'termsAndConditions' => false,
        'shippingNetAmount' => false,
        'shippingTaxRateId' => false,
        'shippingTaxAmount' => false,
        'shippingTotalAmount' => false,
        'netAmount' => false,
        'taxAmount' => false,
        'totalAmount' => false,
        'currencyId' => false,
        'exchangeRate' => false,
        'inverseExchangeRate' => false,
        'baseCurrencyShippingNetAmount' => false,
        'baseCurrencyShippingTaxAmount' => false,
        'baseCurrencyShippingTotalAmount' => false,
        'totalQuantity' => false,
        'totalDiscountAmount' => false,
        'baseCurrencyTotalDiscountAmount' => false,
        'baseCurrencyNetAmount' => false,
        'baseCurrencyTaxAmount' => false,
        'baseCurrencyTotalAmount' => false,
        'statusId' => false,
        'sent' => false,
        'originalQuoteEstimateId' => false,
        'taxAddressRegionId' => false,
        'deliveryPerformanceDate' => false,
        'withholdingTaxRate' => false,
        'withholdingTaxAmount' => false,
        'baseCurrencyWithholdingTaxAmount' => false,
        'recurringInvoice' => false,
        'mainAddress' => false,
        'deliveryAddress' => false,
        'invoiceLines' => false,
        'taxAnalysis' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'contactId' => 'contact_id',
        'date' => 'date',
        'vatReverseCharge' => 'vat_reverse_charge',
        'destinationConsignment' => 'destination_consignment',
        'cisApplicableAmount' => 'cis_applicable_amount',
        'baseCurrencyCisApplicableAmount' => 'base_currency_cis_applicable_amount',
        'totalAfterCisDeduction' => 'total_after_cis_deduction',
        'baseCurrencyTotalAfterCisDeduction' => 'base_currency_total_after_cis_deduction',
        'invoiceNumberPrefix' => 'invoice_number_prefix',
        'invoiceNumber' => 'invoice_number',
        'contactName' => 'contact_name',
        'contactReference' => 'contact_reference',
        'dueDate' => 'due_date',
        'reference' => 'reference',
        'notes' => 'notes',
        'termsAndConditions' => 'terms_and_conditions',
        'shippingNetAmount' => 'shipping_net_amount',
        'shippingTaxRateId' => 'shipping_tax_rate_id',
        'shippingTaxAmount' => 'shipping_tax_amount',
        'shippingTotalAmount' => 'shipping_total_amount',
        'netAmount' => 'net_amount',
        'taxAmount' => 'tax_amount',
        'totalAmount' => 'total_amount',
        'currencyId' => 'currency_id',
        'exchangeRate' => 'exchange_rate',
        'inverseExchangeRate' => 'inverse_exchange_rate',
        'baseCurrencyShippingNetAmount' => 'base_currency_shipping_net_amount',
        'baseCurrencyShippingTaxAmount' => 'base_currency_shipping_tax_amount',
        'baseCurrencyShippingTotalAmount' => 'base_currency_shipping_total_amount',
        'totalQuantity' => 'total_quantity',
        'totalDiscountAmount' => 'total_discount_amount',
        'baseCurrencyTotalDiscountAmount' => 'base_currency_total_discount_amount',
        'baseCurrencyNetAmount' => 'base_currency_net_amount',
        'baseCurrencyTaxAmount' => 'base_currency_tax_amount',
        'baseCurrencyTotalAmount' => 'base_currency_total_amount',
        'statusId' => 'status_id',
        'sent' => 'sent',
        'originalQuoteEstimateId' => 'original_quote_estimate_id',
        'taxAddressRegionId' => 'tax_address_region_id',
        'deliveryPerformanceDate' => 'delivery_performance_date',
        'withholdingTaxRate' => 'withholding_tax_rate',
        'withholdingTaxAmount' => 'withholding_tax_amount',
        'baseCurrencyWithholdingTaxAmount' => 'base_currency_withholding_tax_amount',
        'recurringInvoice' => 'recurring_invoice',
        'mainAddress' => 'main_address',
        'deliveryAddress' => 'delivery_address',
        'invoiceLines' => 'invoice_lines',
        'taxAnalysis' => 'tax_analysis'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'contactId' => 'setContactId',
        'date' => 'setDate',
        'vatReverseCharge' => 'setVatReverseCharge',
        'destinationConsignment' => 'setDestinationConsignment',
        'cisApplicableAmount' => 'setCisApplicableAmount',
        'baseCurrencyCisApplicableAmount' => 'setBaseCurrencyCisApplicableAmount',
        'totalAfterCisDeduction' => 'setTotalAfterCisDeduction',
        'baseCurrencyTotalAfterCisDeduction' => 'setBaseCurrencyTotalAfterCisDeduction',
        'invoiceNumberPrefix' => 'setInvoiceNumberPrefix',
        'invoiceNumber' => 'setInvoiceNumber',
        'contactName' => 'setContactName',
        'contactReference' => 'setContactReference',
        'dueDate' => 'setDueDate',
        'reference' => 'setReference',
        'notes' => 'setNotes',
        'termsAndConditions' => 'setTermsAndConditions',
        'shippingNetAmount' => 'setShippingNetAmount',
        'shippingTaxRateId' => 'setShippingTaxRateId',
        'shippingTaxAmount' => 'setShippingTaxAmount',
        'shippingTotalAmount' => 'setShippingTotalAmount',
        'netAmount' => 'setNetAmount',
        'taxAmount' => 'setTaxAmount',
        'totalAmount' => 'setTotalAmount',
        'currencyId' => 'setCurrencyId',
        'exchangeRate' => 'setExchangeRate',
        'inverseExchangeRate' => 'setInverseExchangeRate',
        'baseCurrencyShippingNetAmount' => 'setBaseCurrencyShippingNetAmount',
        'baseCurrencyShippingTaxAmount' => 'setBaseCurrencyShippingTaxAmount',
        'baseCurrencyShippingTotalAmount' => 'setBaseCurrencyShippingTotalAmount',
        'totalQuantity' => 'setTotalQuantity',
        'totalDiscountAmount' => 'setTotalDiscountAmount',
        'baseCurrencyTotalDiscountAmount' => 'setBaseCurrencyTotalDiscountAmount',
        'baseCurrencyNetAmount' => 'setBaseCurrencyNetAmount',
        'baseCurrencyTaxAmount' => 'setBaseCurrencyTaxAmount',
        'baseCurrencyTotalAmount' => 'setBaseCurrencyTotalAmount',
        'statusId' => 'setStatusId',
        'sent' => 'setSent',
        'originalQuoteEstimateId' => 'setOriginalQuoteEstimateId',
        'taxAddressRegionId' => 'setTaxAddressRegionId',
        'deliveryPerformanceDate' => 'setDeliveryPerformanceDate',
        'withholdingTaxRate' => 'setWithholdingTaxRate',
        'withholdingTaxAmount' => 'setWithholdingTaxAmount',
        'baseCurrencyWithholdingTaxAmount' => 'setBaseCurrencyWithholdingTaxAmount',
        'recurringInvoice' => 'setRecurringInvoice',
        'mainAddress' => 'setMainAddress',
        'deliveryAddress' => 'setDeliveryAddress',
        'invoiceLines' => 'setInvoiceLines',
        'taxAnalysis' => 'setTaxAnalysis'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'contactId' => 'getContactId',
        'date' => 'getDate',
        'vatReverseCharge' => 'getVatReverseCharge',
        'destinationConsignment' => 'getDestinationConsignment',
        'cisApplicableAmount' => 'getCisApplicableAmount',
        'baseCurrencyCisApplicableAmount' => 'getBaseCurrencyCisApplicableAmount',
        'totalAfterCisDeduction' => 'getTotalAfterCisDeduction',
        'baseCurrencyTotalAfterCisDeduction' => 'getBaseCurrencyTotalAfterCisDeduction',
        'invoiceNumberPrefix' => 'getInvoiceNumberPrefix',
        'invoiceNumber' => 'getInvoiceNumber',
        'contactName' => 'getContactName',
        'contactReference' => 'getContactReference',
        'dueDate' => 'getDueDate',
        'reference' => 'getReference',
        'notes' => 'getNotes',
        'termsAndConditions' => 'getTermsAndConditions',
        'shippingNetAmount' => 'getShippingNetAmount',
        'shippingTaxRateId' => 'getShippingTaxRateId',
        'shippingTaxAmount' => 'getShippingTaxAmount',
        'shippingTotalAmount' => 'getShippingTotalAmount',
        'netAmount' => 'getNetAmount',
        'taxAmount' => 'getTaxAmount',
        'totalAmount' => 'getTotalAmount',
        'currencyId' => 'getCurrencyId',
        'exchangeRate' => 'getExchangeRate',
        'inverseExchangeRate' => 'getInverseExchangeRate',
        'baseCurrencyShippingNetAmount' => 'getBaseCurrencyShippingNetAmount',
        'baseCurrencyShippingTaxAmount' => 'getBaseCurrencyShippingTaxAmount',
        'baseCurrencyShippingTotalAmount' => 'getBaseCurrencyShippingTotalAmount',
        'totalQuantity' => 'getTotalQuantity',
        'totalDiscountAmount' => 'getTotalDiscountAmount',
        'baseCurrencyTotalDiscountAmount' => 'getBaseCurrencyTotalDiscountAmount',
        'baseCurrencyNetAmount' => 'getBaseCurrencyNetAmount',
        'baseCurrencyTaxAmount' => 'getBaseCurrencyTaxAmount',
        'baseCurrencyTotalAmount' => 'getBaseCurrencyTotalAmount',
        'statusId' => 'getStatusId',
        'sent' => 'getSent',
        'originalQuoteEstimateId' => 'getOriginalQuoteEstimateId',
        'taxAddressRegionId' => 'getTaxAddressRegionId',
        'deliveryPerformanceDate' => 'getDeliveryPerformanceDate',
        'withholdingTaxRate' => 'getWithholdingTaxRate',
        'withholdingTaxAmount' => 'getWithholdingTaxAmount',
        'baseCurrencyWithholdingTaxAmount' => 'getBaseCurrencyWithholdingTaxAmount',
        'recurringInvoice' => 'getRecurringInvoice',
        'mainAddress' => 'getMainAddress',
        'deliveryAddress' => 'getDeliveryAddress',
        'invoiceLines' => 'getInvoiceLines',
        'taxAnalysis' => 'getTaxAnalysis'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('contactId', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('vatReverseCharge', $data ?? [], null);
        $this->setIfExists('destinationConsignment', $data ?? [], null);
        $this->setIfExists('cisApplicableAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyCisApplicableAmount', $data ?? [], null);
        $this->setIfExists('totalAfterCisDeduction', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalAfterCisDeduction', $data ?? [], null);
        $this->setIfExists('invoiceNumberPrefix', $data ?? [], null);
        $this->setIfExists('invoiceNumber', $data ?? [], null);
        $this->setIfExists('contactName', $data ?? [], null);
        $this->setIfExists('contactReference', $data ?? [], null);
        $this->setIfExists('dueDate', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('termsAndConditions', $data ?? [], null);
        $this->setIfExists('shippingNetAmount', $data ?? [], null);
        $this->setIfExists('shippingTaxRateId', $data ?? [], null);
        $this->setIfExists('shippingTaxAmount', $data ?? [], null);
        $this->setIfExists('shippingTotalAmount', $data ?? [], null);
        $this->setIfExists('netAmount', $data ?? [], null);
        $this->setIfExists('taxAmount', $data ?? [], null);
        $this->setIfExists('totalAmount', $data ?? [], null);
        $this->setIfExists('currencyId', $data ?? [], null);
        $this->setIfExists('exchangeRate', $data ?? [], null);
        $this->setIfExists('inverseExchangeRate', $data ?? [], null);
        $this->setIfExists('baseCurrencyShippingNetAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyShippingTaxAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyShippingTotalAmount', $data ?? [], null);
        $this->setIfExists('totalQuantity', $data ?? [], null);
        $this->setIfExists('totalDiscountAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalDiscountAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyNetAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTaxAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalAmount', $data ?? [], null);
        $this->setIfExists('statusId', $data ?? [], null);
        $this->setIfExists('sent', $data ?? [], null);
        $this->setIfExists('originalQuoteEstimateId', $data ?? [], null);
        $this->setIfExists('taxAddressRegionId', $data ?? [], null);
        $this->setIfExists('deliveryPerformanceDate', $data ?? [], null);
        $this->setIfExists('withholdingTaxRate', $data ?? [], null);
        $this->setIfExists('withholdingTaxAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyWithholdingTaxAmount', $data ?? [], null);
        $this->setIfExists('recurringInvoice', $data ?? [], null);
        $this->setIfExists('mainAddress', $data ?? [], null);
        $this->setIfExists('deliveryAddress', $data ?? [], null);
        $this->setIfExists('invoiceLines', $data ?? [], null);
        $this->setIfExists('taxAnalysis', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['contactId'] === null) {
            $invalidProperties[] = "'contactId' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['invoiceLines'] === null) {
            $invalidProperties[] = "'invoiceLines' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contactId
     *
     * @return string
     */
    public function getContactId(): string
    {
        return $this->container['contactId'];
    }

    /**
     * Sets contactId
     *
     * @param string $contactId The [contact](./#tag/contacts) the sales invoice relates to
     *
     * @return $this
     */
    public function setContactId(string $contactId): static
    {
        if (is_null($contactId)) {
            throw new InvalidArgumentException('non-nullable contactId cannot be null');
        }
        $this->container['contactId'] = $contactId;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate(): \DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The date of the invoice
     *
     * @return $this
     */
    public function setDate(\DateTime $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets vatReverseCharge
     *
     * @return bool|null
     */
    public function getVatReverseCharge(): ?bool
    {
        return $this->container['vatReverseCharge'];
    }

    /**
     * Sets vatReverseCharge
     *
     * @param bool|null $vatReverseCharge Indicates whether Domestic Reverser Charge is applied to the artefact. Only used for a UK business.
     *
     * @return $this
     */
    public function setVatReverseCharge(?bool $vatReverseCharge): static
    {
        if (is_null($vatReverseCharge)) {
            throw new InvalidArgumentException('non-nullable vatReverseCharge cannot be null');
        }
        $this->container['vatReverseCharge'] = $vatReverseCharge;

        return $this;
    }

    /**
     * Gets destinationConsignment
     *
     * @return bool|null
     */
    public function getDestinationConsignment(): ?bool
    {
        return $this->container['destinationConsignment'];
    }

    /**
     * Sets destinationConsignment
     *
     * @param bool|null $destinationConsignment Indicates whether consignment checkbox for destination VAT is checked on the artefact. Only used for an UK business, where destination VAT was enabled in the settings.
     *
     * @return $this
     */
    public function setDestinationConsignment(?bool $destinationConsignment): static
    {
        if (is_null($destinationConsignment)) {
            throw new InvalidArgumentException('non-nullable destinationConsignment cannot be null');
        }
        $this->container['destinationConsignment'] = $destinationConsignment;

        return $this;
    }

    /**
     * Gets cisApplicableAmount
     *
     * @return float|null
     */
    public function getCisApplicableAmount(): ?float
    {
        return $this->container['cisApplicableAmount'];
    }

    /**
     * Sets cisApplicableAmount
     *
     * @param float|null $cisApplicableAmount The total amount of CIS deductible labour - only applicable in UK
     *
     * @return $this
     */
    public function setCisApplicableAmount(?float $cisApplicableAmount): static
    {
        if (is_null($cisApplicableAmount)) {
            throw new InvalidArgumentException('non-nullable cisApplicableAmount cannot be null');
        }
        $this->container['cisApplicableAmount'] = $cisApplicableAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyCisApplicableAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyCisApplicableAmount(): ?float
    {
        return $this->container['baseCurrencyCisApplicableAmount'];
    }

    /**
     * Sets baseCurrencyCisApplicableAmount
     *
     * @param float|null $baseCurrencyCisApplicableAmount The total amount of CIS deductible labour in the base currency - only applicable in UK
     *
     * @return $this
     */
    public function setBaseCurrencyCisApplicableAmount(?float $baseCurrencyCisApplicableAmount): static
    {
        if (is_null($baseCurrencyCisApplicableAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyCisApplicableAmount cannot be null');
        }
        $this->container['baseCurrencyCisApplicableAmount'] = $baseCurrencyCisApplicableAmount;

        return $this;
    }

    /**
     * Gets totalAfterCisDeduction
     *
     * @return float|null
     */
    public function getTotalAfterCisDeduction(): ?float
    {
        return $this->container['totalAfterCisDeduction'];
    }

    /**
     * Sets totalAfterCisDeduction
     *
     * @param float|null $totalAfterCisDeduction The total of the artefact with the total of CIS deducted - only applicable in UK
     *
     * @return $this
     */
    public function setTotalAfterCisDeduction(?float $totalAfterCisDeduction): static
    {
        if (is_null($totalAfterCisDeduction)) {
            throw new InvalidArgumentException('non-nullable totalAfterCisDeduction cannot be null');
        }
        $this->container['totalAfterCisDeduction'] = $totalAfterCisDeduction;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalAfterCisDeduction
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalAfterCisDeduction(): ?float
    {
        return $this->container['baseCurrencyTotalAfterCisDeduction'];
    }

    /**
     * Sets baseCurrencyTotalAfterCisDeduction
     *
     * @param float|null $baseCurrencyTotalAfterCisDeduction The total of the artefact with the total of CIS deducted in the base currency - only applicable in UK
     *
     * @return $this
     */
    public function setBaseCurrencyTotalAfterCisDeduction(?float $baseCurrencyTotalAfterCisDeduction): static
    {
        if (is_null($baseCurrencyTotalAfterCisDeduction)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalAfterCisDeduction cannot be null');
        }
        $this->container['baseCurrencyTotalAfterCisDeduction'] = $baseCurrencyTotalAfterCisDeduction;

        return $this;
    }

    /**
     * Gets invoiceNumberPrefix
     *
     * @return string|null
     */
    public function getInvoiceNumberPrefix(): ?string
    {
        return $this->container['invoiceNumberPrefix'];
    }

    /**
     * Sets invoiceNumberPrefix
     *
     * @param string|null $invoiceNumberPrefix The invoice number prefix
     *
     * @return $this
     */
    public function setInvoiceNumberPrefix(?string $invoiceNumberPrefix): static
    {
        if (is_null($invoiceNumberPrefix)) {
            throw new InvalidArgumentException('non-nullable invoiceNumberPrefix cannot be null');
        }
        $this->container['invoiceNumberPrefix'] = $invoiceNumberPrefix;

        return $this;
    }

    /**
     * Gets invoiceNumber
     *
     * @return string|null
     */
    public function getInvoiceNumber(): ?string
    {
        return $this->container['invoiceNumber'];
    }

    /**
     * Sets invoiceNumber
     *
     * @param string|null $invoiceNumber The generated invoice number
     *
     * @return $this
     */
    public function setInvoiceNumber(?string $invoiceNumber): static
    {
        if (is_null($invoiceNumber)) {
            throw new InvalidArgumentException('non-nullable invoiceNumber cannot be null');
        }
        $this->container['invoiceNumber'] = $invoiceNumber;

        return $this;
    }

    /**
     * Gets contactName
     *
     * @return string|null
     */
    public function getContactName(): ?string
    {
        return $this->container['contactName'];
    }

    /**
     * Sets contactName
     *
     * @param string|null $contactName The name of the contact when the invoice was created
     *
     * @return $this
     */
    public function setContactName(?string $contactName): static
    {
        if (is_null($contactName)) {
            throw new InvalidArgumentException('non-nullable contactName cannot be null');
        }
        $this->container['contactName'] = $contactName;

        return $this;
    }

    /**
     * Gets contactReference
     *
     * @return string|null
     */
    public function getContactReference(): ?string
    {
        return $this->container['contactReference'];
    }

    /**
     * Sets contactReference
     *
     * @param string|null $contactReference The reference of the contact when the invoice was created
     *
     * @return $this
     */
    public function setContactReference(?string $contactReference): static
    {
        if (is_null($contactReference)) {
            throw new InvalidArgumentException('non-nullable contactReference cannot be null');
        }
        $this->container['contactReference'] = $contactReference;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime|null
     */
    public function getDueDate(): ?\DateTime
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime|null $dueDate The due date of the invoice
     *
     * @return $this
     */
    public function setDueDate(?\DateTime $dueDate): static
    {
        if (is_null($dueDate)) {
            throw new InvalidArgumentException('non-nullable dueDate cannot be null');
        }
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference The reference for the invoice
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes(): ?string
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Invoice notes
     *
     * @return $this
     */
    public function setNotes(?string $notes): static
    {
        if (is_null($notes)) {
            throw new InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets termsAndConditions
     *
     * @return string|null
     */
    public function getTermsAndConditions(): ?string
    {
        return $this->container['termsAndConditions'];
    }

    /**
     * Sets termsAndConditions
     *
     * @param string|null $termsAndConditions Invoice terms and conditions
     *
     * @return $this
     */
    public function setTermsAndConditions(?string $termsAndConditions): static
    {
        if (is_null($termsAndConditions)) {
            throw new InvalidArgumentException('non-nullable termsAndConditions cannot be null');
        }
        $this->container['termsAndConditions'] = $termsAndConditions;

        return $this;
    }

    /**
     * Gets shippingNetAmount
     *
     * @return float|null
     */
    public function getShippingNetAmount(): ?float
    {
        return $this->container['shippingNetAmount'];
    }

    /**
     * Sets shippingNetAmount
     *
     * @param float|null $shippingNetAmount The net shipping amount
     *
     * @return $this
     */
    public function setShippingNetAmount(?float $shippingNetAmount): static
    {
        if (is_null($shippingNetAmount)) {
            throw new InvalidArgumentException('non-nullable shippingNetAmount cannot be null');
        }
        $this->container['shippingNetAmount'] = $shippingNetAmount;

        return $this;
    }

    /**
     * Gets shippingTaxRateId
     *
     * @return string|null
     */
    public function getShippingTaxRateId(): ?string
    {
        return $this->container['shippingTaxRateId'];
    }

    /**
     * Sets shippingTaxRateId
     *
     * @param string|null $shippingTaxRateId The ID of the Shipping Tax Rate.
     *
     * @return $this
     */
    public function setShippingTaxRateId(?string $shippingTaxRateId): static
    {
        if (is_null($shippingTaxRateId)) {
            throw new InvalidArgumentException('non-nullable shippingTaxRateId cannot be null');
        }
        $this->container['shippingTaxRateId'] = $shippingTaxRateId;

        return $this;
    }

    /**
     * Gets shippingTaxAmount
     *
     * @return float|null
     */
    public function getShippingTaxAmount(): ?float
    {
        return $this->container['shippingTaxAmount'];
    }

    /**
     * Sets shippingTaxAmount
     *
     * @param float|null $shippingTaxAmount The tax shipping amount. NOTE: This is not required for POST/PUT requests as the shipping tax is calculated based on the shipping_net_amount and the shipping_tax_rate.
     *
     * @return $this
     */
    public function setShippingTaxAmount(?float $shippingTaxAmount): static
    {
        if (is_null($shippingTaxAmount)) {
            throw new InvalidArgumentException('non-nullable shippingTaxAmount cannot be null');
        }
        $this->container['shippingTaxAmount'] = $shippingTaxAmount;

        return $this;
    }

    /**
     * Gets shippingTotalAmount
     *
     * @return float|null
     */
    public function getShippingTotalAmount(): ?float
    {
        return $this->container['shippingTotalAmount'];
    }

    /**
     * Sets shippingTotalAmount
     *
     * @param float|null $shippingTotalAmount The total shipping amount
     *
     * @return $this
     */
    public function setShippingTotalAmount(?float $shippingTotalAmount): static
    {
        if (is_null($shippingTotalAmount)) {
            throw new InvalidArgumentException('non-nullable shippingTotalAmount cannot be null');
        }
        $this->container['shippingTotalAmount'] = $shippingTotalAmount;

        return $this;
    }

    /**
     * Gets netAmount
     *
     * @return float|null
     */
    public function getNetAmount(): ?float
    {
        return $this->container['netAmount'];
    }

    /**
     * Sets netAmount
     *
     * @param float|null $netAmount The net amount of the invoice
     *
     * @return $this
     */
    public function setNetAmount(?float $netAmount): static
    {
        if (is_null($netAmount)) {
            throw new InvalidArgumentException('non-nullable netAmount cannot be null');
        }
        $this->container['netAmount'] = $netAmount;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return float|null
     */
    public function getTaxAmount(): ?float
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param float|null $taxAmount The tax amount of the invoice
     *
     * @return $this
     */
    public function setTaxAmount(?float $taxAmount): static
    {
        if (is_null($taxAmount)) {
            throw new InvalidArgumentException('non-nullable taxAmount cannot be null');
        }
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets totalAmount
     *
     * @return float|null
     */
    public function getTotalAmount(): ?float
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     *
     * @param float|null $totalAmount The total amount of the invoice
     *
     * @return $this
     */
    public function setTotalAmount(?float $totalAmount): static
    {
        if (is_null($totalAmount)) {
            throw new InvalidArgumentException('non-nullable totalAmount cannot be null');
        }
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets currencyId
     *
     * @return string|null
     */
    public function getCurrencyId(): ?string
    {
        return $this->container['currencyId'];
    }

    /**
     * Sets currencyId
     *
     * @param string|null $currencyId The ID of the Currency.
     *
     * @return $this
     */
    public function setCurrencyId(?string $currencyId): static
    {
        if (is_null($currencyId)) {
            throw new InvalidArgumentException('non-nullable currencyId cannot be null');
        }
        $this->container['currencyId'] = $currencyId;

        return $this;
    }

    /**
     * Gets exchangeRate
     *
     * @return float|null
     */
    public function getExchangeRate(): ?float
    {
        return $this->container['exchangeRate'];
    }

    /**
     * Sets exchangeRate
     *
     * @param float|null $exchangeRate The exchange rate for the invoice
     *
     * @return $this
     */
    public function setExchangeRate(?float $exchangeRate): static
    {
        if (is_null($exchangeRate)) {
            throw new InvalidArgumentException('non-nullable exchangeRate cannot be null');
        }
        $this->container['exchangeRate'] = $exchangeRate;

        return $this;
    }

    /**
     * Gets inverseExchangeRate
     *
     * @return float|null
     */
    public function getInverseExchangeRate(): ?float
    {
        return $this->container['inverseExchangeRate'];
    }

    /**
     * Sets inverseExchangeRate
     *
     * @param float|null $inverseExchangeRate The inverse exchange rate for the invoice
     *
     * @return $this
     */
    public function setInverseExchangeRate(?float $inverseExchangeRate): static
    {
        if (is_null($inverseExchangeRate)) {
            throw new InvalidArgumentException('non-nullable inverseExchangeRate cannot be null');
        }
        $this->container['inverseExchangeRate'] = $inverseExchangeRate;

        return $this;
    }

    /**
     * Gets baseCurrencyShippingNetAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyShippingNetAmount(): ?float
    {
        return $this->container['baseCurrencyShippingNetAmount'];
    }

    /**
     * Sets baseCurrencyShippingNetAmount
     *
     * @param float|null $baseCurrencyShippingNetAmount The net shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingNetAmount(?float $baseCurrencyShippingNetAmount): static
    {
        if (is_null($baseCurrencyShippingNetAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyShippingNetAmount cannot be null');
        }
        $this->container['baseCurrencyShippingNetAmount'] = $baseCurrencyShippingNetAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyShippingTaxAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyShippingTaxAmount(): ?float
    {
        return $this->container['baseCurrencyShippingTaxAmount'];
    }

    /**
     * Sets baseCurrencyShippingTaxAmount
     *
     * @param float|null $baseCurrencyShippingTaxAmount The tax shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingTaxAmount(?float $baseCurrencyShippingTaxAmount): static
    {
        if (is_null($baseCurrencyShippingTaxAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyShippingTaxAmount cannot be null');
        }
        $this->container['baseCurrencyShippingTaxAmount'] = $baseCurrencyShippingTaxAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyShippingTotalAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyShippingTotalAmount(): ?float
    {
        return $this->container['baseCurrencyShippingTotalAmount'];
    }

    /**
     * Sets baseCurrencyShippingTotalAmount
     *
     * @param float|null $baseCurrencyShippingTotalAmount The total shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingTotalAmount(?float $baseCurrencyShippingTotalAmount): static
    {
        if (is_null($baseCurrencyShippingTotalAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyShippingTotalAmount cannot be null');
        }
        $this->container['baseCurrencyShippingTotalAmount'] = $baseCurrencyShippingTotalAmount;

        return $this;
    }

    /**
     * Gets totalQuantity
     *
     * @return float|null
     */
    public function getTotalQuantity(): ?float
    {
        return $this->container['totalQuantity'];
    }

    /**
     * Sets totalQuantity
     *
     * @param float|null $totalQuantity The total quantity of the invoice
     *
     * @return $this
     */
    public function setTotalQuantity(?float $totalQuantity): static
    {
        if (is_null($totalQuantity)) {
            throw new InvalidArgumentException('non-nullable totalQuantity cannot be null');
        }
        $this->container['totalQuantity'] = $totalQuantity;

        return $this;
    }

    /**
     * Gets totalDiscountAmount
     *
     * @return float|null
     */
    public function getTotalDiscountAmount(): ?float
    {
        return $this->container['totalDiscountAmount'];
    }

    /**
     * Sets totalDiscountAmount
     *
     * @param float|null $totalDiscountAmount The discount amount on the invoice
     *
     * @return $this
     */
    public function setTotalDiscountAmount(?float $totalDiscountAmount): static
    {
        if (is_null($totalDiscountAmount)) {
            throw new InvalidArgumentException('non-nullable totalDiscountAmount cannot be null');
        }
        $this->container['totalDiscountAmount'] = $totalDiscountAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalDiscountAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalDiscountAmount(): ?float
    {
        return $this->container['baseCurrencyTotalDiscountAmount'];
    }

    /**
     * Sets baseCurrencyTotalDiscountAmount
     *
     * @param float|null $baseCurrencyTotalDiscountAmount The discount amount on the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTotalDiscountAmount(?float $baseCurrencyTotalDiscountAmount): static
    {
        if (is_null($baseCurrencyTotalDiscountAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalDiscountAmount cannot be null');
        }
        $this->container['baseCurrencyTotalDiscountAmount'] = $baseCurrencyTotalDiscountAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyNetAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyNetAmount(): ?float
    {
        return $this->container['baseCurrencyNetAmount'];
    }

    /**
     * Sets baseCurrencyNetAmount
     *
     * @param float|null $baseCurrencyNetAmount The net amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyNetAmount(?float $baseCurrencyNetAmount): static
    {
        if (is_null($baseCurrencyNetAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyNetAmount cannot be null');
        }
        $this->container['baseCurrencyNetAmount'] = $baseCurrencyNetAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTaxAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTaxAmount(): ?float
    {
        return $this->container['baseCurrencyTaxAmount'];
    }

    /**
     * Sets baseCurrencyTaxAmount
     *
     * @param float|null $baseCurrencyTaxAmount The tax amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTaxAmount(?float $baseCurrencyTaxAmount): static
    {
        if (is_null($baseCurrencyTaxAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTaxAmount cannot be null');
        }
        $this->container['baseCurrencyTaxAmount'] = $baseCurrencyTaxAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalAmount(): ?float
    {
        return $this->container['baseCurrencyTotalAmount'];
    }

    /**
     * Sets baseCurrencyTotalAmount
     *
     * @param float|null $baseCurrencyTotalAmount The total amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTotalAmount(?float $baseCurrencyTotalAmount): static
    {
        if (is_null($baseCurrencyTotalAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalAmount cannot be null');
        }
        $this->container['baseCurrencyTotalAmount'] = $baseCurrencyTotalAmount;

        return $this;
    }

    /**
     * Gets statusId
     *
     * @return string|null
     */
    public function getStatusId(): ?string
    {
        return $this->container['statusId'];
    }

    /**
     * Sets statusId
     *
     * @param string|null $statusId The ID of the Status.
     *
     * @return $this
     */
    public function setStatusId(?string $statusId): static
    {
        if (is_null($statusId)) {
            throw new InvalidArgumentException('non-nullable statusId cannot be null');
        }
        $this->container['statusId'] = $statusId;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return bool|null
     */
    public function getSent(): ?bool
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param bool|null $sent Indicates whether the invoice has been sent
     *
     * @return $this
     */
    public function setSent(?bool $sent): static
    {
        if (is_null($sent)) {
            throw new InvalidArgumentException('non-nullable sent cannot be null');
        }
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets originalQuoteEstimateId
     *
     * @return string|null
     */
    public function getOriginalQuoteEstimateId(): ?string
    {
        return $this->container['originalQuoteEstimateId'];
    }

    /**
     * Sets originalQuoteEstimateId
     *
     * @param string|null $originalQuoteEstimateId The ID of the Original Quote Estimate.
     *
     * @return $this
     */
    public function setOriginalQuoteEstimateId(?string $originalQuoteEstimateId): static
    {
        if (is_null($originalQuoteEstimateId)) {
            throw new InvalidArgumentException('non-nullable originalQuoteEstimateId cannot be null');
        }
        $this->container['originalQuoteEstimateId'] = $originalQuoteEstimateId;

        return $this;
    }

    /**
     * Gets taxAddressRegionId
     *
     * @return string|null
     */
    public function getTaxAddressRegionId(): ?string
    {
        return $this->container['taxAddressRegionId'];
    }

    /**
     * Sets taxAddressRegionId
     *
     * @param string|null $taxAddressRegionId The ID of the Tax Address Region. (Canada only)
     *
     * @return $this
     */
    public function setTaxAddressRegionId(?string $taxAddressRegionId): static
    {
        if (is_null($taxAddressRegionId)) {
            throw new InvalidArgumentException('non-nullable taxAddressRegionId cannot be null');
        }
        $this->container['taxAddressRegionId'] = $taxAddressRegionId;

        return $this;
    }

    /**
     * Gets deliveryPerformanceDate
     *
     * @return string|null
     */
    public function getDeliveryPerformanceDate(): ?string
    {
        return $this->container['deliveryPerformanceDate'];
    }

    /**
     * Sets deliveryPerformanceDate
     *
     * @param string|null $deliveryPerformanceDate Delivery/Performance Date (Germany only)
     *
     * @return $this
     */
    public function setDeliveryPerformanceDate(?string $deliveryPerformanceDate): static
    {
        if (is_null($deliveryPerformanceDate)) {
            throw new InvalidArgumentException('non-nullable deliveryPerformanceDate cannot be null');
        }
        $this->container['deliveryPerformanceDate'] = $deliveryPerformanceDate;

        return $this;
    }

    /**
     * Gets withholdingTaxRate
     *
     * @return float|null
     */
    public function getWithholdingTaxRate(): ?float
    {
        return $this->container['withholdingTaxRate'];
    }

    /**
     * Sets withholdingTaxRate
     *
     * @param float|null $withholdingTaxRate The withheld Tax Rate - only applicable in UK (CIS subcontractor tax rate) and Spain (IRPF)
     *
     * @return $this
     */
    public function setWithholdingTaxRate(?float $withholdingTaxRate): static
    {
        if (is_null($withholdingTaxRate)) {
            throw new InvalidArgumentException('non-nullable withholdingTaxRate cannot be null');
        }
        $this->container['withholdingTaxRate'] = $withholdingTaxRate;

        return $this;
    }

    /**
     * Gets withholdingTaxAmount
     *
     * @return float|null
     */
    public function getWithholdingTaxAmount(): ?float
    {
        return $this->container['withholdingTaxAmount'];
    }

    /**
     * Sets withholdingTaxAmount
     *
     * @param float|null $withholdingTaxAmount The withheld Tax Amount - only applicable in UK (CIS subcontractor tax) and Spain (IRPF)
     *
     * @return $this
     */
    public function setWithholdingTaxAmount(?float $withholdingTaxAmount): static
    {
        if (is_null($withholdingTaxAmount)) {
            throw new InvalidArgumentException('non-nullable withholdingTaxAmount cannot be null');
        }
        $this->container['withholdingTaxAmount'] = $withholdingTaxAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyWithholdingTaxAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyWithholdingTaxAmount(): ?float
    {
        return $this->container['baseCurrencyWithholdingTaxAmount'];
    }

    /**
     * Sets baseCurrencyWithholdingTaxAmount
     *
     * @param float|null $baseCurrencyWithholdingTaxAmount The withheld Tax Amount in the base currency - only applicable in UK (CIS subcontractor tax) and Spain (IRPF)
     *
     * @return $this
     */
    public function setBaseCurrencyWithholdingTaxAmount(?float $baseCurrencyWithholdingTaxAmount): static
    {
        if (is_null($baseCurrencyWithholdingTaxAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyWithholdingTaxAmount cannot be null');
        }
        $this->container['baseCurrencyWithholdingTaxAmount'] = $baseCurrencyWithholdingTaxAmount;

        return $this;
    }

    /**
     * Gets recurringInvoice
     *
     * @return \SynergiTech\Sage\Model\PostSalesInvoicesSalesInvoiceRecurringInvoice|null
     */
    public function getRecurringInvoice(): ?\SynergiTech\Sage\Model\PostSalesInvoicesSalesInvoiceRecurringInvoice
    {
        return $this->container['recurringInvoice'];
    }

    /**
     * Sets recurringInvoice
     *
     * @param \SynergiTech\Sage\Model\PostSalesInvoicesSalesInvoiceRecurringInvoice|null $recurringInvoice recurringInvoice
     *
     * @return $this
     */
    public function setRecurringInvoice(?\SynergiTech\Sage\Model\PostSalesInvoicesSalesInvoiceRecurringInvoice $recurringInvoice): static
    {
        if (is_null($recurringInvoice)) {
            throw new InvalidArgumentException('non-nullable recurringInvoice cannot be null');
        }
        $this->container['recurringInvoice'] = $recurringInvoice;

        return $this;
    }

    /**
     * Gets mainAddress
     *
     * @return \SynergiTech\Sage\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress|null
     */
    public function getMainAddress(): ?\SynergiTech\Sage\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress
    {
        return $this->container['mainAddress'];
    }

    /**
     * Sets mainAddress
     *
     * @param \SynergiTech\Sage\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress|null $mainAddress mainAddress
     *
     * @return $this
     */
    public function setMainAddress(?\SynergiTech\Sage\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress $mainAddress): static
    {
        if (is_null($mainAddress)) {
            throw new InvalidArgumentException('non-nullable mainAddress cannot be null');
        }
        $this->container['mainAddress'] = $mainAddress;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return \SynergiTech\Sage\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress|null
     */
    public function getDeliveryAddress(): ?\SynergiTech\Sage\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param \SynergiTech\Sage\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress|null $deliveryAddress deliveryAddress
     *
     * @return $this
     */
    public function setDeliveryAddress(?\SynergiTech\Sage\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress $deliveryAddress): static
    {
        if (is_null($deliveryAddress)) {
            throw new InvalidArgumentException('non-nullable deliveryAddress cannot be null');
        }
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets invoiceLines
     *
     * @return \SynergiTech\Sage\Model\PostSalesCreditNotesSalesCreditNoteCreditNoteLinesInner[]
     */
    public function getInvoiceLines(): array
    {
        return $this->container['invoiceLines'];
    }

    /**
     * Sets invoiceLines
     *
     * @param \SynergiTech\Sage\Model\PostSalesCreditNotesSalesCreditNoteCreditNoteLinesInner[] $invoiceLines The invoice lines of the invoice
     *
     * @return $this
     */
    public function setInvoiceLines(array $invoiceLines): static
    {
        if (is_null($invoiceLines)) {
            throw new InvalidArgumentException('non-nullable invoiceLines cannot be null');
        }
        $this->container['invoiceLines'] = $invoiceLines;

        return $this;
    }

    /**
     * Gets taxAnalysis
     *
     * @return \SynergiTech\Sage\Model\PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysisInner[]|null
     */
    public function getTaxAnalysis(): ?array
    {
        return $this->container['taxAnalysis'];
    }

    /**
     * Sets taxAnalysis
     *
     * @param \SynergiTech\Sage\Model\PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysisInner[]|null $taxAnalysis taxAnalysis
     *
     * @return $this
     */
    public function setTaxAnalysis(?array $taxAnalysis): static
    {
        if (is_null($taxAnalysis)) {
            throw new InvalidArgumentException('non-nullable taxAnalysis cannot be null');
        }
        $this->container['taxAnalysis'] = $taxAnalysis;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


