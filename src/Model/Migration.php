<?php
/**
 * Migration
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * Migration Class Doc Comment
 *
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Standard: ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª * Accounting Start: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any mentioned role in one of the listed areas: * Area: &#x60;Settings&#x60;: Full Access
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Migration implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Migration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'legacyId' => 'int',
        'id' => 'string',
        'path' => 'string',
        'status' => '\SynergiTech\Sage\Model\MigrationStatus',
        'startedAt' => '\DateTime',
        'completedAt' => '\DateTime',
        'sourceProduct' => 'string',
        'sourceProductVersion' => 'string',
        'sourceLicense' => 'string',
        'sourceTool' => 'string',
        'sourceToolVersion' => 'string',
        'schemaId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'legacyId' => 'int32',
        'id' => null,
        'path' => null,
        'status' => null,
        'startedAt' => 'date-time',
        'completedAt' => 'date-time',
        'sourceProduct' => null,
        'sourceProductVersion' => null,
        'sourceLicense' => null,
        'sourceTool' => null,
        'sourceToolVersion' => null,
        'schemaId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'legacyId' => false,
        'id' => false,
        'path' => false,
        'status' => false,
        'startedAt' => false,
        'completedAt' => false,
        'sourceProduct' => false,
        'sourceProductVersion' => false,
        'sourceLicense' => false,
        'sourceTool' => false,
        'sourceToolVersion' => false,
        'schemaId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'legacyId' => 'legacy_id',
        'id' => 'id',
        'path' => '$path',
        'status' => 'status',
        'startedAt' => 'started_at',
        'completedAt' => 'completed_at',
        'sourceProduct' => 'source_product',
        'sourceProductVersion' => 'source_product_version',
        'sourceLicense' => 'source_license',
        'sourceTool' => 'source_tool',
        'sourceToolVersion' => 'source_tool_version',
        'schemaId' => 'schema_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'legacyId' => 'setLegacyId',
        'id' => 'setId',
        'path' => 'setPath',
        'status' => 'setStatus',
        'startedAt' => 'setStartedAt',
        'completedAt' => 'setCompletedAt',
        'sourceProduct' => 'setSourceProduct',
        'sourceProductVersion' => 'setSourceProductVersion',
        'sourceLicense' => 'setSourceLicense',
        'sourceTool' => 'setSourceTool',
        'sourceToolVersion' => 'setSourceToolVersion',
        'schemaId' => 'setSchemaId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'legacyId' => 'getLegacyId',
        'id' => 'getId',
        'path' => 'getPath',
        'status' => 'getStatus',
        'startedAt' => 'getStartedAt',
        'completedAt' => 'getCompletedAt',
        'sourceProduct' => 'getSourceProduct',
        'sourceProductVersion' => 'getSourceProductVersion',
        'sourceLicense' => 'getSourceLicense',
        'sourceTool' => 'getSourceTool',
        'sourceToolVersion' => 'getSourceToolVersion',
        'schemaId' => 'getSchemaId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('legacyId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('startedAt', $data ?? [], null);
        $this->setIfExists('completedAt', $data ?? [], null);
        $this->setIfExists('sourceProduct', $data ?? [], null);
        $this->setIfExists('sourceProductVersion', $data ?? [], null);
        $this->setIfExists('sourceLicense', $data ?? [], null);
        $this->setIfExists('sourceTool', $data ?? [], null);
        $this->setIfExists('sourceToolVersion', $data ?? [], null);
        $this->setIfExists('schemaId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) > 32)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['sourceProduct']) && (mb_strlen($this->container['sourceProduct']) > 50)) {
            $invalidProperties[] = "invalid value for 'sourceProduct', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['sourceProductVersion']) && (mb_strlen($this->container['sourceProductVersion']) > 50)) {
            $invalidProperties[] = "invalid value for 'sourceProductVersion', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['sourceLicense']) && (mb_strlen($this->container['sourceLicense']) > 50)) {
            $invalidProperties[] = "invalid value for 'sourceLicense', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['sourceTool']) && (mb_strlen($this->container['sourceTool']) > 50)) {
            $invalidProperties[] = "invalid value for 'sourceTool', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['sourceToolVersion']) && (mb_strlen($this->container['sourceToolVersion']) > 50)) {
            $invalidProperties[] = "invalid value for 'sourceToolVersion', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['schemaId']) && (mb_strlen($this->container['schemaId']) > 100)) {
            $invalidProperties[] = "invalid value for 'schemaId', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacyId
     *
     * @return int|null
     */
    public function getLegacyId(): ?int
    {
        return $this->container['legacyId'];
    }

    /**
     * Sets legacyId
     *
     * @param int|null $legacyId The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId(?int $legacyId): static
    {
        if (is_null($legacyId)) {
            throw new InvalidArgumentException('non-nullable legacyId cannot be null');
        }
        $this->container['legacyId'] = $legacyId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the migration
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        if ((mb_strlen($id) > 32)) {
            throw new InvalidArgumentException('invalid length for $id when calling Migration., must be smaller than or equal to 32.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath(): ?string
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The api path for this item
     *
     * @return $this
     */
    public function setPath(?string $path): static
    {
        if (is_null($path)) {
            throw new InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SynergiTech\Sage\Model\MigrationStatus|null
     */
    public function getStatus(): ?\SynergiTech\Sage\Model\MigrationStatus
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SynergiTech\Sage\Model\MigrationStatus|null $status status
     *
     * @return $this
     */
    public function setStatus(?\SynergiTech\Sage\Model\MigrationStatus $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets startedAt
     *
     * @return \DateTime|null
     */
    public function getStartedAt(): ?\DateTime
    {
        return $this->container['startedAt'];
    }

    /**
     * Sets startedAt
     *
     * @param \DateTime|null $startedAt The date/time the migration started
     *
     * @return $this
     */
    public function setStartedAt(?\DateTime $startedAt): static
    {
        if (is_null($startedAt)) {
            throw new InvalidArgumentException('non-nullable startedAt cannot be null');
        }
        $this->container['startedAt'] = $startedAt;

        return $this;
    }

    /**
     * Gets completedAt
     *
     * @return \DateTime|null
     */
    public function getCompletedAt(): ?\DateTime
    {
        return $this->container['completedAt'];
    }

    /**
     * Sets completedAt
     *
     * @param \DateTime|null $completedAt The date/time the migration completed
     *
     * @return $this
     */
    public function setCompletedAt(?\DateTime $completedAt): static
    {
        if (is_null($completedAt)) {
            throw new InvalidArgumentException('non-nullable completedAt cannot be null');
        }
        $this->container['completedAt'] = $completedAt;

        return $this;
    }

    /**
     * Gets sourceProduct
     *
     * @return string|null
     */
    public function getSourceProduct(): ?string
    {
        return $this->container['sourceProduct'];
    }

    /**
     * Sets sourceProduct
     *
     * @param string|null $sourceProduct The source product for the migration
     *
     * @return $this
     */
    public function setSourceProduct(?string $sourceProduct): static
    {
        if (is_null($sourceProduct)) {
            throw new InvalidArgumentException('non-nullable sourceProduct cannot be null');
        }
        if ((mb_strlen($sourceProduct) > 50)) {
            throw new InvalidArgumentException('invalid length for $sourceProduct when calling Migration., must be smaller than or equal to 50.');
        }

        $this->container['sourceProduct'] = $sourceProduct;

        return $this;
    }

    /**
     * Gets sourceProductVersion
     *
     * @return string|null
     */
    public function getSourceProductVersion(): ?string
    {
        return $this->container['sourceProductVersion'];
    }

    /**
     * Sets sourceProductVersion
     *
     * @param string|null $sourceProductVersion The source product version for the migration
     *
     * @return $this
     */
    public function setSourceProductVersion(?string $sourceProductVersion): static
    {
        if (is_null($sourceProductVersion)) {
            throw new InvalidArgumentException('non-nullable sourceProductVersion cannot be null');
        }
        if ((mb_strlen($sourceProductVersion) > 50)) {
            throw new InvalidArgumentException('invalid length for $sourceProductVersion when calling Migration., must be smaller than or equal to 50.');
        }

        $this->container['sourceProductVersion'] = $sourceProductVersion;

        return $this;
    }

    /**
     * Gets sourceLicense
     *
     * @return string|null
     */
    public function getSourceLicense(): ?string
    {
        return $this->container['sourceLicense'];
    }

    /**
     * Sets sourceLicense
     *
     * @param string|null $sourceLicense The source product license for the migration
     *
     * @return $this
     */
    public function setSourceLicense(?string $sourceLicense): static
    {
        if (is_null($sourceLicense)) {
            throw new InvalidArgumentException('non-nullable sourceLicense cannot be null');
        }
        if ((mb_strlen($sourceLicense) > 50)) {
            throw new InvalidArgumentException('invalid length for $sourceLicense when calling Migration., must be smaller than or equal to 50.');
        }

        $this->container['sourceLicense'] = $sourceLicense;

        return $this;
    }

    /**
     * Gets sourceTool
     *
     * @return string|null
     */
    public function getSourceTool(): ?string
    {
        return $this->container['sourceTool'];
    }

    /**
     * Sets sourceTool
     *
     * @param string|null $sourceTool The source product extract tool for the migration
     *
     * @return $this
     */
    public function setSourceTool(?string $sourceTool): static
    {
        if (is_null($sourceTool)) {
            throw new InvalidArgumentException('non-nullable sourceTool cannot be null');
        }
        if ((mb_strlen($sourceTool) > 50)) {
            throw new InvalidArgumentException('invalid length for $sourceTool when calling Migration., must be smaller than or equal to 50.');
        }

        $this->container['sourceTool'] = $sourceTool;

        return $this;
    }

    /**
     * Gets sourceToolVersion
     *
     * @return string|null
     */
    public function getSourceToolVersion(): ?string
    {
        return $this->container['sourceToolVersion'];
    }

    /**
     * Sets sourceToolVersion
     *
     * @param string|null $sourceToolVersion The source product extract tool version for the migration
     *
     * @return $this
     */
    public function setSourceToolVersion(?string $sourceToolVersion): static
    {
        if (is_null($sourceToolVersion)) {
            throw new InvalidArgumentException('non-nullable sourceToolVersion cannot be null');
        }
        if ((mb_strlen($sourceToolVersion) > 50)) {
            throw new InvalidArgumentException('invalid length for $sourceToolVersion when calling Migration., must be smaller than or equal to 50.');
        }

        $this->container['sourceToolVersion'] = $sourceToolVersion;

        return $this;
    }

    /**
     * Gets schemaId
     *
     * @return string|null
     */
    public function getSchemaId(): ?string
    {
        return $this->container['schemaId'];
    }

    /**
     * Sets schemaId
     *
     * @param string|null $schemaId The schema id used for the migration
     *
     * @return $this
     */
    public function setSchemaId(?string $schemaId): static
    {
        if (is_null($schemaId)) {
            throw new InvalidArgumentException('non-nullable schemaId cannot be null');
        }
        if ((mb_strlen($schemaId) > 100)) {
            throw new InvalidArgumentException('invalid length for $schemaId when calling Migration., must be smaller than or equal to 100.');
        }

        $this->container['schemaId'] = $schemaId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


