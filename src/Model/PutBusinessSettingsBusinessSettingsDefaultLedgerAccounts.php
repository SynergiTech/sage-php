<?php
/**
 * PutBusinessSettingsBusinessSettingsDefaultLedgerAccounts
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * PutBusinessSettingsBusinessSettingsDefaultLedgerAccounts Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PutBusinessSettingsBusinessSettingsDefaultLedgerAccounts implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'putBusinessSettings_business_settings_default_ledger_accounts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'bankChargesLedgerAccountId' => 'string',
        'bankInterestReceivedLedgerAccountId' => 'string',
        'bankInterestChargesPaidLedgerAccountId' => 'string',
        'exchangeRateGainsLedgerAccountId' => 'string',
        'exchangeRateLossesLedgerAccountId' => 'string',
        'salesLedgerAccountId' => 'string',
        'salesDiscountLedgerAccountId' => 'string',
        'purchaseLedgerAccountId' => 'string',
        'purchaseDiscountLedgerAccountId' => 'string',
        'productSalesLedgerAccountId' => 'string',
        'productPurchaseLedgerAccountId' => 'string',
        'serviceSalesLedgerAccountId' => 'string',
        'servicePurchaseLedgerAccountId' => 'string',
        'stockPurchaseLedgerAccountId' => 'string',
        'otherReceiptLedgerAccountId' => 'string',
        'otherPaymentLedgerAccountId' => 'string',
        'customerReceiptDiscountLedgerAccountId' => 'string',
        'vendorPaymentDiscountLedgerAccountId' => 'string',
        'carriageLedgerAccountId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'bankChargesLedgerAccountId' => null,
        'bankInterestReceivedLedgerAccountId' => null,
        'bankInterestChargesPaidLedgerAccountId' => null,
        'exchangeRateGainsLedgerAccountId' => null,
        'exchangeRateLossesLedgerAccountId' => null,
        'salesLedgerAccountId' => null,
        'salesDiscountLedgerAccountId' => null,
        'purchaseLedgerAccountId' => null,
        'purchaseDiscountLedgerAccountId' => null,
        'productSalesLedgerAccountId' => null,
        'productPurchaseLedgerAccountId' => null,
        'serviceSalesLedgerAccountId' => null,
        'servicePurchaseLedgerAccountId' => null,
        'stockPurchaseLedgerAccountId' => null,
        'otherReceiptLedgerAccountId' => null,
        'otherPaymentLedgerAccountId' => null,
        'customerReceiptDiscountLedgerAccountId' => null,
        'vendorPaymentDiscountLedgerAccountId' => null,
        'carriageLedgerAccountId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'bankChargesLedgerAccountId' => false,
        'bankInterestReceivedLedgerAccountId' => false,
        'bankInterestChargesPaidLedgerAccountId' => false,
        'exchangeRateGainsLedgerAccountId' => false,
        'exchangeRateLossesLedgerAccountId' => false,
        'salesLedgerAccountId' => false,
        'salesDiscountLedgerAccountId' => false,
        'purchaseLedgerAccountId' => false,
        'purchaseDiscountLedgerAccountId' => false,
        'productSalesLedgerAccountId' => false,
        'productPurchaseLedgerAccountId' => false,
        'serviceSalesLedgerAccountId' => false,
        'servicePurchaseLedgerAccountId' => false,
        'stockPurchaseLedgerAccountId' => false,
        'otherReceiptLedgerAccountId' => false,
        'otherPaymentLedgerAccountId' => false,
        'customerReceiptDiscountLedgerAccountId' => false,
        'vendorPaymentDiscountLedgerAccountId' => false,
        'carriageLedgerAccountId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'bankChargesLedgerAccountId' => 'bank_charges_ledger_account_id',
        'bankInterestReceivedLedgerAccountId' => 'bank_interest_received_ledger_account_id',
        'bankInterestChargesPaidLedgerAccountId' => 'bank_interest_charges_paid_ledger_account_id',
        'exchangeRateGainsLedgerAccountId' => 'exchange_rate_gains_ledger_account_id',
        'exchangeRateLossesLedgerAccountId' => 'exchange_rate_losses_ledger_account_id',
        'salesLedgerAccountId' => 'sales_ledger_account_id',
        'salesDiscountLedgerAccountId' => 'sales_discount_ledger_account_id',
        'purchaseLedgerAccountId' => 'purchase_ledger_account_id',
        'purchaseDiscountLedgerAccountId' => 'purchase_discount_ledger_account_id',
        'productSalesLedgerAccountId' => 'product_sales_ledger_account_id',
        'productPurchaseLedgerAccountId' => 'product_purchase_ledger_account_id',
        'serviceSalesLedgerAccountId' => 'service_sales_ledger_account_id',
        'servicePurchaseLedgerAccountId' => 'service_purchase_ledger_account_id',
        'stockPurchaseLedgerAccountId' => 'stock_purchase_ledger_account_id',
        'otherReceiptLedgerAccountId' => 'other_receipt_ledger_account_id',
        'otherPaymentLedgerAccountId' => 'other_payment_ledger_account_id',
        'customerReceiptDiscountLedgerAccountId' => 'customer_receipt_discount_ledger_account_id',
        'vendorPaymentDiscountLedgerAccountId' => 'vendor_payment_discount_ledger_account_id',
        'carriageLedgerAccountId' => 'carriage_ledger_account_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'bankChargesLedgerAccountId' => 'setBankChargesLedgerAccountId',
        'bankInterestReceivedLedgerAccountId' => 'setBankInterestReceivedLedgerAccountId',
        'bankInterestChargesPaidLedgerAccountId' => 'setBankInterestChargesPaidLedgerAccountId',
        'exchangeRateGainsLedgerAccountId' => 'setExchangeRateGainsLedgerAccountId',
        'exchangeRateLossesLedgerAccountId' => 'setExchangeRateLossesLedgerAccountId',
        'salesLedgerAccountId' => 'setSalesLedgerAccountId',
        'salesDiscountLedgerAccountId' => 'setSalesDiscountLedgerAccountId',
        'purchaseLedgerAccountId' => 'setPurchaseLedgerAccountId',
        'purchaseDiscountLedgerAccountId' => 'setPurchaseDiscountLedgerAccountId',
        'productSalesLedgerAccountId' => 'setProductSalesLedgerAccountId',
        'productPurchaseLedgerAccountId' => 'setProductPurchaseLedgerAccountId',
        'serviceSalesLedgerAccountId' => 'setServiceSalesLedgerAccountId',
        'servicePurchaseLedgerAccountId' => 'setServicePurchaseLedgerAccountId',
        'stockPurchaseLedgerAccountId' => 'setStockPurchaseLedgerAccountId',
        'otherReceiptLedgerAccountId' => 'setOtherReceiptLedgerAccountId',
        'otherPaymentLedgerAccountId' => 'setOtherPaymentLedgerAccountId',
        'customerReceiptDiscountLedgerAccountId' => 'setCustomerReceiptDiscountLedgerAccountId',
        'vendorPaymentDiscountLedgerAccountId' => 'setVendorPaymentDiscountLedgerAccountId',
        'carriageLedgerAccountId' => 'setCarriageLedgerAccountId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'bankChargesLedgerAccountId' => 'getBankChargesLedgerAccountId',
        'bankInterestReceivedLedgerAccountId' => 'getBankInterestReceivedLedgerAccountId',
        'bankInterestChargesPaidLedgerAccountId' => 'getBankInterestChargesPaidLedgerAccountId',
        'exchangeRateGainsLedgerAccountId' => 'getExchangeRateGainsLedgerAccountId',
        'exchangeRateLossesLedgerAccountId' => 'getExchangeRateLossesLedgerAccountId',
        'salesLedgerAccountId' => 'getSalesLedgerAccountId',
        'salesDiscountLedgerAccountId' => 'getSalesDiscountLedgerAccountId',
        'purchaseLedgerAccountId' => 'getPurchaseLedgerAccountId',
        'purchaseDiscountLedgerAccountId' => 'getPurchaseDiscountLedgerAccountId',
        'productSalesLedgerAccountId' => 'getProductSalesLedgerAccountId',
        'productPurchaseLedgerAccountId' => 'getProductPurchaseLedgerAccountId',
        'serviceSalesLedgerAccountId' => 'getServiceSalesLedgerAccountId',
        'servicePurchaseLedgerAccountId' => 'getServicePurchaseLedgerAccountId',
        'stockPurchaseLedgerAccountId' => 'getStockPurchaseLedgerAccountId',
        'otherReceiptLedgerAccountId' => 'getOtherReceiptLedgerAccountId',
        'otherPaymentLedgerAccountId' => 'getOtherPaymentLedgerAccountId',
        'customerReceiptDiscountLedgerAccountId' => 'getCustomerReceiptDiscountLedgerAccountId',
        'vendorPaymentDiscountLedgerAccountId' => 'getVendorPaymentDiscountLedgerAccountId',
        'carriageLedgerAccountId' => 'getCarriageLedgerAccountId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bankChargesLedgerAccountId', $data ?? [], null);
        $this->setIfExists('bankInterestReceivedLedgerAccountId', $data ?? [], null);
        $this->setIfExists('bankInterestChargesPaidLedgerAccountId', $data ?? [], null);
        $this->setIfExists('exchangeRateGainsLedgerAccountId', $data ?? [], null);
        $this->setIfExists('exchangeRateLossesLedgerAccountId', $data ?? [], null);
        $this->setIfExists('salesLedgerAccountId', $data ?? [], null);
        $this->setIfExists('salesDiscountLedgerAccountId', $data ?? [], null);
        $this->setIfExists('purchaseLedgerAccountId', $data ?? [], null);
        $this->setIfExists('purchaseDiscountLedgerAccountId', $data ?? [], null);
        $this->setIfExists('productSalesLedgerAccountId', $data ?? [], null);
        $this->setIfExists('productPurchaseLedgerAccountId', $data ?? [], null);
        $this->setIfExists('serviceSalesLedgerAccountId', $data ?? [], null);
        $this->setIfExists('servicePurchaseLedgerAccountId', $data ?? [], null);
        $this->setIfExists('stockPurchaseLedgerAccountId', $data ?? [], null);
        $this->setIfExists('otherReceiptLedgerAccountId', $data ?? [], null);
        $this->setIfExists('otherPaymentLedgerAccountId', $data ?? [], null);
        $this->setIfExists('customerReceiptDiscountLedgerAccountId', $data ?? [], null);
        $this->setIfExists('vendorPaymentDiscountLedgerAccountId', $data ?? [], null);
        $this->setIfExists('carriageLedgerAccountId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bankChargesLedgerAccountId
     *
     * @return string|null
     */
    public function getBankChargesLedgerAccountId(): ?string
    {
        return $this->container['bankChargesLedgerAccountId'];
    }

    /**
     * Sets bankChargesLedgerAccountId
     *
     * @param string|null $bankChargesLedgerAccountId The ID of the Bank Charges Ledger Account.
     *
     * @return $this
     */
    public function setBankChargesLedgerAccountId(?string $bankChargesLedgerAccountId): static
    {
        if (is_null($bankChargesLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable bankChargesLedgerAccountId cannot be null');
        }
        $this->container['bankChargesLedgerAccountId'] = $bankChargesLedgerAccountId;

        return $this;
    }

    /**
     * Gets bankInterestReceivedLedgerAccountId
     *
     * @return string|null
     */
    public function getBankInterestReceivedLedgerAccountId(): ?string
    {
        return $this->container['bankInterestReceivedLedgerAccountId'];
    }

    /**
     * Sets bankInterestReceivedLedgerAccountId
     *
     * @param string|null $bankInterestReceivedLedgerAccountId The ID of the Bank Interest Received Ledger Account.
     *
     * @return $this
     */
    public function setBankInterestReceivedLedgerAccountId(?string $bankInterestReceivedLedgerAccountId): static
    {
        if (is_null($bankInterestReceivedLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable bankInterestReceivedLedgerAccountId cannot be null');
        }
        $this->container['bankInterestReceivedLedgerAccountId'] = $bankInterestReceivedLedgerAccountId;

        return $this;
    }

    /**
     * Gets bankInterestChargesPaidLedgerAccountId
     *
     * @return string|null
     */
    public function getBankInterestChargesPaidLedgerAccountId(): ?string
    {
        return $this->container['bankInterestChargesPaidLedgerAccountId'];
    }

    /**
     * Sets bankInterestChargesPaidLedgerAccountId
     *
     * @param string|null $bankInterestChargesPaidLedgerAccountId The ID of the Bank Interest Charges Paid Ledger Account.
     *
     * @return $this
     */
    public function setBankInterestChargesPaidLedgerAccountId(?string $bankInterestChargesPaidLedgerAccountId): static
    {
        if (is_null($bankInterestChargesPaidLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable bankInterestChargesPaidLedgerAccountId cannot be null');
        }
        $this->container['bankInterestChargesPaidLedgerAccountId'] = $bankInterestChargesPaidLedgerAccountId;

        return $this;
    }

    /**
     * Gets exchangeRateGainsLedgerAccountId
     *
     * @return string|null
     */
    public function getExchangeRateGainsLedgerAccountId(): ?string
    {
        return $this->container['exchangeRateGainsLedgerAccountId'];
    }

    /**
     * Sets exchangeRateGainsLedgerAccountId
     *
     * @param string|null $exchangeRateGainsLedgerAccountId The ID of the Exchange Rate Gains Ledger Account.
     *
     * @return $this
     */
    public function setExchangeRateGainsLedgerAccountId(?string $exchangeRateGainsLedgerAccountId): static
    {
        if (is_null($exchangeRateGainsLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable exchangeRateGainsLedgerAccountId cannot be null');
        }
        $this->container['exchangeRateGainsLedgerAccountId'] = $exchangeRateGainsLedgerAccountId;

        return $this;
    }

    /**
     * Gets exchangeRateLossesLedgerAccountId
     *
     * @return string|null
     */
    public function getExchangeRateLossesLedgerAccountId(): ?string
    {
        return $this->container['exchangeRateLossesLedgerAccountId'];
    }

    /**
     * Sets exchangeRateLossesLedgerAccountId
     *
     * @param string|null $exchangeRateLossesLedgerAccountId The ID of the Exchange Rate Losses Ledger Account.
     *
     * @return $this
     */
    public function setExchangeRateLossesLedgerAccountId(?string $exchangeRateLossesLedgerAccountId): static
    {
        if (is_null($exchangeRateLossesLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable exchangeRateLossesLedgerAccountId cannot be null');
        }
        $this->container['exchangeRateLossesLedgerAccountId'] = $exchangeRateLossesLedgerAccountId;

        return $this;
    }

    /**
     * Gets salesLedgerAccountId
     *
     * @return string|null
     */
    public function getSalesLedgerAccountId(): ?string
    {
        return $this->container['salesLedgerAccountId'];
    }

    /**
     * Sets salesLedgerAccountId
     *
     * @param string|null $salesLedgerAccountId The ID of the Sales Ledger Account.
     *
     * @return $this
     */
    public function setSalesLedgerAccountId(?string $salesLedgerAccountId): static
    {
        if (is_null($salesLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable salesLedgerAccountId cannot be null');
        }
        $this->container['salesLedgerAccountId'] = $salesLedgerAccountId;

        return $this;
    }

    /**
     * Gets salesDiscountLedgerAccountId
     *
     * @return string|null
     */
    public function getSalesDiscountLedgerAccountId(): ?string
    {
        return $this->container['salesDiscountLedgerAccountId'];
    }

    /**
     * Sets salesDiscountLedgerAccountId
     *
     * @param string|null $salesDiscountLedgerAccountId The ID of the Sales Discount Ledger Account.
     *
     * @return $this
     */
    public function setSalesDiscountLedgerAccountId(?string $salesDiscountLedgerAccountId): static
    {
        if (is_null($salesDiscountLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable salesDiscountLedgerAccountId cannot be null');
        }
        $this->container['salesDiscountLedgerAccountId'] = $salesDiscountLedgerAccountId;

        return $this;
    }

    /**
     * Gets purchaseLedgerAccountId
     *
     * @return string|null
     */
    public function getPurchaseLedgerAccountId(): ?string
    {
        return $this->container['purchaseLedgerAccountId'];
    }

    /**
     * Sets purchaseLedgerAccountId
     *
     * @param string|null $purchaseLedgerAccountId The ID of the Purchase Ledger Account.
     *
     * @return $this
     */
    public function setPurchaseLedgerAccountId(?string $purchaseLedgerAccountId): static
    {
        if (is_null($purchaseLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable purchaseLedgerAccountId cannot be null');
        }
        $this->container['purchaseLedgerAccountId'] = $purchaseLedgerAccountId;

        return $this;
    }

    /**
     * Gets purchaseDiscountLedgerAccountId
     *
     * @return string|null
     */
    public function getPurchaseDiscountLedgerAccountId(): ?string
    {
        return $this->container['purchaseDiscountLedgerAccountId'];
    }

    /**
     * Sets purchaseDiscountLedgerAccountId
     *
     * @param string|null $purchaseDiscountLedgerAccountId The ID of the Purchase Discount Ledger Account.
     *
     * @return $this
     */
    public function setPurchaseDiscountLedgerAccountId(?string $purchaseDiscountLedgerAccountId): static
    {
        if (is_null($purchaseDiscountLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable purchaseDiscountLedgerAccountId cannot be null');
        }
        $this->container['purchaseDiscountLedgerAccountId'] = $purchaseDiscountLedgerAccountId;

        return $this;
    }

    /**
     * Gets productSalesLedgerAccountId
     *
     * @return string|null
     */
    public function getProductSalesLedgerAccountId(): ?string
    {
        return $this->container['productSalesLedgerAccountId'];
    }

    /**
     * Sets productSalesLedgerAccountId
     *
     * @param string|null $productSalesLedgerAccountId The ID of the Product Sales Ledger Account.
     *
     * @return $this
     */
    public function setProductSalesLedgerAccountId(?string $productSalesLedgerAccountId): static
    {
        if (is_null($productSalesLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable productSalesLedgerAccountId cannot be null');
        }
        $this->container['productSalesLedgerAccountId'] = $productSalesLedgerAccountId;

        return $this;
    }

    /**
     * Gets productPurchaseLedgerAccountId
     *
     * @return string|null
     */
    public function getProductPurchaseLedgerAccountId(): ?string
    {
        return $this->container['productPurchaseLedgerAccountId'];
    }

    /**
     * Sets productPurchaseLedgerAccountId
     *
     * @param string|null $productPurchaseLedgerAccountId The ID of the Product Purchase Ledger Account.
     *
     * @return $this
     */
    public function setProductPurchaseLedgerAccountId(?string $productPurchaseLedgerAccountId): static
    {
        if (is_null($productPurchaseLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable productPurchaseLedgerAccountId cannot be null');
        }
        $this->container['productPurchaseLedgerAccountId'] = $productPurchaseLedgerAccountId;

        return $this;
    }

    /**
     * Gets serviceSalesLedgerAccountId
     *
     * @return string|null
     */
    public function getServiceSalesLedgerAccountId(): ?string
    {
        return $this->container['serviceSalesLedgerAccountId'];
    }

    /**
     * Sets serviceSalesLedgerAccountId
     *
     * @param string|null $serviceSalesLedgerAccountId The ID of the Service Sales Ledger Account.
     *
     * @return $this
     */
    public function setServiceSalesLedgerAccountId(?string $serviceSalesLedgerAccountId): static
    {
        if (is_null($serviceSalesLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable serviceSalesLedgerAccountId cannot be null');
        }
        $this->container['serviceSalesLedgerAccountId'] = $serviceSalesLedgerAccountId;

        return $this;
    }

    /**
     * Gets servicePurchaseLedgerAccountId
     *
     * @return string|null
     */
    public function getServicePurchaseLedgerAccountId(): ?string
    {
        return $this->container['servicePurchaseLedgerAccountId'];
    }

    /**
     * Sets servicePurchaseLedgerAccountId
     *
     * @param string|null $servicePurchaseLedgerAccountId The ID of the Service Purchase Ledger Account.
     *
     * @return $this
     */
    public function setServicePurchaseLedgerAccountId(?string $servicePurchaseLedgerAccountId): static
    {
        if (is_null($servicePurchaseLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable servicePurchaseLedgerAccountId cannot be null');
        }
        $this->container['servicePurchaseLedgerAccountId'] = $servicePurchaseLedgerAccountId;

        return $this;
    }

    /**
     * Gets stockPurchaseLedgerAccountId
     *
     * @return string|null
     */
    public function getStockPurchaseLedgerAccountId(): ?string
    {
        return $this->container['stockPurchaseLedgerAccountId'];
    }

    /**
     * Sets stockPurchaseLedgerAccountId
     *
     * @param string|null $stockPurchaseLedgerAccountId The ID of the Stock Purchase Ledger Account.
     *
     * @return $this
     */
    public function setStockPurchaseLedgerAccountId(?string $stockPurchaseLedgerAccountId): static
    {
        if (is_null($stockPurchaseLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable stockPurchaseLedgerAccountId cannot be null');
        }
        $this->container['stockPurchaseLedgerAccountId'] = $stockPurchaseLedgerAccountId;

        return $this;
    }

    /**
     * Gets otherReceiptLedgerAccountId
     *
     * @return string|null
     */
    public function getOtherReceiptLedgerAccountId(): ?string
    {
        return $this->container['otherReceiptLedgerAccountId'];
    }

    /**
     * Sets otherReceiptLedgerAccountId
     *
     * @param string|null $otherReceiptLedgerAccountId The ID of the Other Receipt Ledger Account.
     *
     * @return $this
     */
    public function setOtherReceiptLedgerAccountId(?string $otherReceiptLedgerAccountId): static
    {
        if (is_null($otherReceiptLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable otherReceiptLedgerAccountId cannot be null');
        }
        $this->container['otherReceiptLedgerAccountId'] = $otherReceiptLedgerAccountId;

        return $this;
    }

    /**
     * Gets otherPaymentLedgerAccountId
     *
     * @return string|null
     */
    public function getOtherPaymentLedgerAccountId(): ?string
    {
        return $this->container['otherPaymentLedgerAccountId'];
    }

    /**
     * Sets otherPaymentLedgerAccountId
     *
     * @param string|null $otherPaymentLedgerAccountId The ID of the Other Payment Ledger Account.
     *
     * @return $this
     */
    public function setOtherPaymentLedgerAccountId(?string $otherPaymentLedgerAccountId): static
    {
        if (is_null($otherPaymentLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable otherPaymentLedgerAccountId cannot be null');
        }
        $this->container['otherPaymentLedgerAccountId'] = $otherPaymentLedgerAccountId;

        return $this;
    }

    /**
     * Gets customerReceiptDiscountLedgerAccountId
     *
     * @return string|null
     */
    public function getCustomerReceiptDiscountLedgerAccountId(): ?string
    {
        return $this->container['customerReceiptDiscountLedgerAccountId'];
    }

    /**
     * Sets customerReceiptDiscountLedgerAccountId
     *
     * @param string|null $customerReceiptDiscountLedgerAccountId The ID of the Customer Receipt Discount Ledger Account.
     *
     * @return $this
     */
    public function setCustomerReceiptDiscountLedgerAccountId(?string $customerReceiptDiscountLedgerAccountId): static
    {
        if (is_null($customerReceiptDiscountLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable customerReceiptDiscountLedgerAccountId cannot be null');
        }
        $this->container['customerReceiptDiscountLedgerAccountId'] = $customerReceiptDiscountLedgerAccountId;

        return $this;
    }

    /**
     * Gets vendorPaymentDiscountLedgerAccountId
     *
     * @return string|null
     */
    public function getVendorPaymentDiscountLedgerAccountId(): ?string
    {
        return $this->container['vendorPaymentDiscountLedgerAccountId'];
    }

    /**
     * Sets vendorPaymentDiscountLedgerAccountId
     *
     * @param string|null $vendorPaymentDiscountLedgerAccountId The ID of the Vendor Payment Discount Ledger Account.
     *
     * @return $this
     */
    public function setVendorPaymentDiscountLedgerAccountId(?string $vendorPaymentDiscountLedgerAccountId): static
    {
        if (is_null($vendorPaymentDiscountLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable vendorPaymentDiscountLedgerAccountId cannot be null');
        }
        $this->container['vendorPaymentDiscountLedgerAccountId'] = $vendorPaymentDiscountLedgerAccountId;

        return $this;
    }

    /**
     * Gets carriageLedgerAccountId
     *
     * @return string|null
     */
    public function getCarriageLedgerAccountId(): ?string
    {
        return $this->container['carriageLedgerAccountId'];
    }

    /**
     * Sets carriageLedgerAccountId
     *
     * @param string|null $carriageLedgerAccountId The ID of the Carriage Ledger Account.
     *
     * @return $this
     */
    public function setCarriageLedgerAccountId(?string $carriageLedgerAccountId): static
    {
        if (is_null($carriageLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable carriageLedgerAccountId cannot be null');
        }
        $this->container['carriageLedgerAccountId'] = $carriageLedgerAccountId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


