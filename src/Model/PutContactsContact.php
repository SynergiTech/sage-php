<?php
/**
 * PutContactsContact
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage Business Cloud Accounting - Accounts
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 3.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * PutContactsContact Class Doc Comment
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PutContactsContact implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'putContacts_contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'contactTypeIds' => 'string[]',
        'reference' => 'string',
        'defaultSalesLedgerAccountId' => 'string',
        'defaultSalesTaxRateId' => 'string',
        'defaultPurchaseLedgerAccountId' => 'string',
        'taxNumber' => 'string',
        'notes' => 'string',
        'locale' => 'string',
        'creditLimit' => 'float',
        'creditDays' => 'int',
        'creditTerms' => 'string',
        'creditTermsAndConditions' => 'string',
        'productSalesPriceTypeId' => 'string',
        'sourceGuid' => 'string',
        'currencyId' => 'string',
        'auxReference' => 'string',
        'registeredNumber' => 'string',
        'taxCalculation' => 'string',
        'auxiliaryAccount' => 'string',
        'destinationVatBlocking' => 'bool',
        'mainAddress' => '\SynergiTech\Sage\Model\PostBankAccountsBankAccountMainAddress',
        'deliveryAddress' => '\SynergiTech\Sage\Model\PostBankAccountsBankAccountMainAddress',
        'mainContactPerson' => '\SynergiTech\Sage\Model\PostContactsContactMainContactPerson',
        'bankAccountDetails' => '\SynergiTech\Sage\Model\PutBankAccountsBankAccountBankAccountDetails',
        'taxTreatment' => '\SynergiTech\Sage\Model\PostContactsContactTaxTreatment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'contactTypeIds' => null,
        'reference' => null,
        'defaultSalesLedgerAccountId' => null,
        'defaultSalesTaxRateId' => null,
        'defaultPurchaseLedgerAccountId' => null,
        'taxNumber' => null,
        'notes' => null,
        'locale' => null,
        'creditLimit' => 'double',
        'creditDays' => 'int32',
        'creditTerms' => null,
        'creditTermsAndConditions' => null,
        'productSalesPriceTypeId' => null,
        'sourceGuid' => null,
        'currencyId' => null,
        'auxReference' => null,
        'registeredNumber' => null,
        'taxCalculation' => null,
        'auxiliaryAccount' => null,
        'destinationVatBlocking' => null,
        'mainAddress' => null,
        'deliveryAddress' => null,
        'mainContactPerson' => null,
        'bankAccountDetails' => null,
        'taxTreatment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'contactTypeIds' => false,
        'reference' => false,
        'defaultSalesLedgerAccountId' => false,
        'defaultSalesTaxRateId' => false,
        'defaultPurchaseLedgerAccountId' => false,
        'taxNumber' => false,
        'notes' => false,
        'locale' => false,
        'creditLimit' => false,
        'creditDays' => false,
        'creditTerms' => false,
        'creditTermsAndConditions' => false,
        'productSalesPriceTypeId' => false,
        'sourceGuid' => false,
        'currencyId' => false,
        'auxReference' => false,
        'registeredNumber' => false,
        'taxCalculation' => false,
        'auxiliaryAccount' => false,
        'destinationVatBlocking' => false,
        'mainAddress' => false,
        'deliveryAddress' => false,
        'mainContactPerson' => false,
        'bankAccountDetails' => false,
        'taxTreatment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'contactTypeIds' => 'contact_type_ids',
        'reference' => 'reference',
        'defaultSalesLedgerAccountId' => 'default_sales_ledger_account_id',
        'defaultSalesTaxRateId' => 'default_sales_tax_rate_id',
        'defaultPurchaseLedgerAccountId' => 'default_purchase_ledger_account_id',
        'taxNumber' => 'tax_number',
        'notes' => 'notes',
        'locale' => 'locale',
        'creditLimit' => 'credit_limit',
        'creditDays' => 'credit_days',
        'creditTerms' => 'credit_terms',
        'creditTermsAndConditions' => 'credit_terms_and_conditions',
        'productSalesPriceTypeId' => 'product_sales_price_type_id',
        'sourceGuid' => 'source_guid',
        'currencyId' => 'currency_id',
        'auxReference' => 'aux_reference',
        'registeredNumber' => 'registered_number',
        'taxCalculation' => 'tax_calculation',
        'auxiliaryAccount' => 'auxiliary_account',
        'destinationVatBlocking' => 'destination_vat_blocking',
        'mainAddress' => 'main_address',
        'deliveryAddress' => 'delivery_address',
        'mainContactPerson' => 'main_contact_person',
        'bankAccountDetails' => 'bank_account_details',
        'taxTreatment' => 'tax_treatment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'contactTypeIds' => 'setContactTypeIds',
        'reference' => 'setReference',
        'defaultSalesLedgerAccountId' => 'setDefaultSalesLedgerAccountId',
        'defaultSalesTaxRateId' => 'setDefaultSalesTaxRateId',
        'defaultPurchaseLedgerAccountId' => 'setDefaultPurchaseLedgerAccountId',
        'taxNumber' => 'setTaxNumber',
        'notes' => 'setNotes',
        'locale' => 'setLocale',
        'creditLimit' => 'setCreditLimit',
        'creditDays' => 'setCreditDays',
        'creditTerms' => 'setCreditTerms',
        'creditTermsAndConditions' => 'setCreditTermsAndConditions',
        'productSalesPriceTypeId' => 'setProductSalesPriceTypeId',
        'sourceGuid' => 'setSourceGuid',
        'currencyId' => 'setCurrencyId',
        'auxReference' => 'setAuxReference',
        'registeredNumber' => 'setRegisteredNumber',
        'taxCalculation' => 'setTaxCalculation',
        'auxiliaryAccount' => 'setAuxiliaryAccount',
        'destinationVatBlocking' => 'setDestinationVatBlocking',
        'mainAddress' => 'setMainAddress',
        'deliveryAddress' => 'setDeliveryAddress',
        'mainContactPerson' => 'setMainContactPerson',
        'bankAccountDetails' => 'setBankAccountDetails',
        'taxTreatment' => 'setTaxTreatment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'contactTypeIds' => 'getContactTypeIds',
        'reference' => 'getReference',
        'defaultSalesLedgerAccountId' => 'getDefaultSalesLedgerAccountId',
        'defaultSalesTaxRateId' => 'getDefaultSalesTaxRateId',
        'defaultPurchaseLedgerAccountId' => 'getDefaultPurchaseLedgerAccountId',
        'taxNumber' => 'getTaxNumber',
        'notes' => 'getNotes',
        'locale' => 'getLocale',
        'creditLimit' => 'getCreditLimit',
        'creditDays' => 'getCreditDays',
        'creditTerms' => 'getCreditTerms',
        'creditTermsAndConditions' => 'getCreditTermsAndConditions',
        'productSalesPriceTypeId' => 'getProductSalesPriceTypeId',
        'sourceGuid' => 'getSourceGuid',
        'currencyId' => 'getCurrencyId',
        'auxReference' => 'getAuxReference',
        'registeredNumber' => 'getRegisteredNumber',
        'taxCalculation' => 'getTaxCalculation',
        'auxiliaryAccount' => 'getAuxiliaryAccount',
        'destinationVatBlocking' => 'getDestinationVatBlocking',
        'mainAddress' => 'getMainAddress',
        'deliveryAddress' => 'getDeliveryAddress',
        'mainContactPerson' => 'getMainContactPerson',
        'bankAccountDetails' => 'getBankAccountDetails',
        'taxTreatment' => 'getTaxTreatment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const CREDIT_TERMS_MONTH_END_INVOICE = 'month_end_invoice';
    public const CREDIT_TERMS_DATE_FROM_INVOICE = 'date_from_invoice';
    public const CREDIT_TERMS_IMMEDIATE_INVOICE = 'immediate_invoice';
    public const CREDIT_TERMS_MONTH_END_PAYMENT = 'month_end_payment';
    public const CREDIT_TERMS_DATE_FROM_PAYMENT = 'date_from_payment';
    public const CREDIT_TERMS_IMMEDIATE_PAYMENT = 'immediate_payment';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreditTermsAllowableValues()
    {
        return [
            self::CREDIT_TERMS_MONTH_END_INVOICE,
            self::CREDIT_TERMS_DATE_FROM_INVOICE,
            self::CREDIT_TERMS_IMMEDIATE_INVOICE,
            self::CREDIT_TERMS_MONTH_END_PAYMENT,
            self::CREDIT_TERMS_DATE_FROM_PAYMENT,
            self::CREDIT_TERMS_IMMEDIATE_PAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('contactTypeIds', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('defaultSalesLedgerAccountId', $data ?? [], null);
        $this->setIfExists('defaultSalesTaxRateId', $data ?? [], null);
        $this->setIfExists('defaultPurchaseLedgerAccountId', $data ?? [], null);
        $this->setIfExists('taxNumber', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('creditLimit', $data ?? [], null);
        $this->setIfExists('creditDays', $data ?? [], null);
        $this->setIfExists('creditTerms', $data ?? [], null);
        $this->setIfExists('creditTermsAndConditions', $data ?? [], null);
        $this->setIfExists('productSalesPriceTypeId', $data ?? [], null);
        $this->setIfExists('sourceGuid', $data ?? [], null);
        $this->setIfExists('currencyId', $data ?? [], null);
        $this->setIfExists('auxReference', $data ?? [], null);
        $this->setIfExists('registeredNumber', $data ?? [], null);
        $this->setIfExists('taxCalculation', $data ?? [], null);
        $this->setIfExists('auxiliaryAccount', $data ?? [], null);
        $this->setIfExists('destinationVatBlocking', $data ?? [], null);
        $this->setIfExists('mainAddress', $data ?? [], null);
        $this->setIfExists('deliveryAddress', $data ?? [], null);
        $this->setIfExists('mainContactPerson', $data ?? [], null);
        $this->setIfExists('bankAccountDetails', $data ?? [], null);
        $this->setIfExists('taxTreatment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['creditDays']) && ($this->container['creditDays'] > 365)) {
            $invalidProperties[] = "invalid value for 'creditDays', must be smaller than or equal to 365.";
        }

        if (!is_null($this->container['creditDays']) && ($this->container['creditDays'] < 0)) {
            $invalidProperties[] = "invalid value for 'creditDays', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getCreditTermsAllowableValues();
        if (!is_null($this->container['creditTerms']) && !in_array($this->container['creditTerms'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'creditTerms', must be one of '%s'",
                $this->container['creditTerms'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The contact's full name or business name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets contactTypeIds
     *
     * @return string[]|null
     */
    public function getContactTypeIds(): ?array
    {
        return $this->container['contactTypeIds'];
    }

    /**
     * Sets contactTypeIds
     *
     * @param string[]|null $contactTypeIds The IDs of the Contact Types.
     *
     * @return $this
     */
    public function setContactTypeIds(?array $contactTypeIds): static
    {
        if (is_null($contactTypeIds)) {
            throw new InvalidArgumentException('non-nullable contactTypeIds cannot be null');
        }
        $this->container['contactTypeIds'] = $contactTypeIds;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Unique reference for the contact
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets defaultSalesLedgerAccountId
     *
     * @return string|null
     */
    public function getDefaultSalesLedgerAccountId(): ?string
    {
        return $this->container['defaultSalesLedgerAccountId'];
    }

    /**
     * Sets defaultSalesLedgerAccountId
     *
     * @param string|null $defaultSalesLedgerAccountId The ID of the Default Sales Ledger Account.
     *
     * @return $this
     */
    public function setDefaultSalesLedgerAccountId(?string $defaultSalesLedgerAccountId): static
    {
        if (is_null($defaultSalesLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable defaultSalesLedgerAccountId cannot be null');
        }
        $this->container['defaultSalesLedgerAccountId'] = $defaultSalesLedgerAccountId;

        return $this;
    }

    /**
     * Gets defaultSalesTaxRateId
     *
     * @return string|null
     */
    public function getDefaultSalesTaxRateId(): ?string
    {
        return $this->container['defaultSalesTaxRateId'];
    }

    /**
     * Sets defaultSalesTaxRateId
     *
     * @param string|null $defaultSalesTaxRateId The ID of the Default Sales Tax Rate.
     *
     * @return $this
     */
    public function setDefaultSalesTaxRateId(?string $defaultSalesTaxRateId): static
    {
        if (is_null($defaultSalesTaxRateId)) {
            throw new InvalidArgumentException('non-nullable defaultSalesTaxRateId cannot be null');
        }
        $this->container['defaultSalesTaxRateId'] = $defaultSalesTaxRateId;

        return $this;
    }

    /**
     * Gets defaultPurchaseLedgerAccountId
     *
     * @return string|null
     */
    public function getDefaultPurchaseLedgerAccountId(): ?string
    {
        return $this->container['defaultPurchaseLedgerAccountId'];
    }

    /**
     * Sets defaultPurchaseLedgerAccountId
     *
     * @param string|null $defaultPurchaseLedgerAccountId The ID of the Default Purchase Ledger Account.
     *
     * @return $this
     */
    public function setDefaultPurchaseLedgerAccountId(?string $defaultPurchaseLedgerAccountId): static
    {
        if (is_null($defaultPurchaseLedgerAccountId)) {
            throw new InvalidArgumentException('non-nullable defaultPurchaseLedgerAccountId cannot be null');
        }
        $this->container['defaultPurchaseLedgerAccountId'] = $defaultPurchaseLedgerAccountId;

        return $this;
    }

    /**
     * Gets taxNumber
     *
     * @return string|null
     */
    public function getTaxNumber(): ?string
    {
        return $this->container['taxNumber'];
    }

    /**
     * Sets taxNumber
     *
     * @param string|null $taxNumber The VAT registration number of the contact. The format will be validated.
     *
     * @return $this
     */
    public function setTaxNumber(?string $taxNumber): static
    {
        if (is_null($taxNumber)) {
            throw new InvalidArgumentException('non-nullable taxNumber cannot be null');
        }
        $this->container['taxNumber'] = $taxNumber;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes(): ?string
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes The notes for the contact
     *
     * @return $this
     */
    public function setNotes(?string $notes): static
    {
        if (is_null($notes)) {
            throw new InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale(): ?string
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale The locale for the contact
     *
     * @return $this
     */
    public function setLocale(?string $locale): static
    {
        if (is_null($locale)) {
            throw new InvalidArgumentException('non-nullable locale cannot be null');
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets creditLimit
     *
     * @return float|null
     */
    public function getCreditLimit(): ?float
    {
        return $this->container['creditLimit'];
    }

    /**
     * Sets creditLimit
     *
     * @param float|null $creditLimit Custom credit limit amount for the contact <br><i>not applicable to Start</i>
     *
     * @return $this
     */
    public function setCreditLimit(?float $creditLimit): static
    {
        if (is_null($creditLimit)) {
            throw new InvalidArgumentException('non-nullable creditLimit cannot be null');
        }
        $this->container['creditLimit'] = $creditLimit;

        return $this;
    }

    /**
     * Gets creditDays
     *
     * @return int|null
     */
    public function getCreditDays(): ?int
    {
        return $this->container['creditDays'];
    }

    /**
     * Sets creditDays
     *
     * @param int|null $creditDays Custom credit days for the contact.<br> If returned as null in a GET response, you may want to GET /invoice_settings and use 'customer_credit_days'/'vendor_credit_days' as default/fallback according to your use case.
     *
     * @return $this
     */
    public function setCreditDays(?int $creditDays): static
    {
        if (is_null($creditDays)) {
            throw new InvalidArgumentException('non-nullable creditDays cannot be null');
        }

        if (($creditDays > 365)) {
            throw new InvalidArgumentException('invalid value for $creditDays when calling PutContactsContact., must be smaller than or equal to 365.');
        }
        if (($creditDays < 0)) {
            throw new InvalidArgumentException('invalid value for $creditDays when calling PutContactsContact., must be bigger than or equal to 0.');
        }

        $this->container['creditDays'] = $creditDays;

        return $this;
    }

    /**
     * Gets creditTerms
     *
     * @return string|null
     */
    public function getCreditTerms(): ?string
    {
        return $this->container['creditTerms'];
    }

    /**
     * Sets creditTerms
     *
     * @param string|null $creditTerms Credit terms options determine how invoice due dates are calculated. Options include: end of next month, a delay of supplier credit_days and immediately. Only: month_end_invoice, date_from_invoice, immediate_invoice, month_end_payment, date_from_payment, immediate_payment are valid values. If returned as null in a GET response, you may want to GET /invoice_settings and use 'customer_credit_terms'/'vendor_credit_terms' as default.
     *
     * @return $this
     */
    public function setCreditTerms(?string $creditTerms): static
    {
        if (is_null($creditTerms)) {
            throw new InvalidArgumentException('non-nullable creditTerms cannot be null');
        }
        $allowedValues = $this->getCreditTermsAllowableValues();
        if (!in_array($creditTerms, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'creditTerms', must be one of '%s'",
                    $creditTerms,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['creditTerms'] = $creditTerms;

        return $this;
    }

    /**
     * Gets creditTermsAndConditions
     *
     * @return string|null
     */
    public function getCreditTermsAndConditions(): ?string
    {
        return $this->container['creditTermsAndConditions'];
    }

    /**
     * Sets creditTermsAndConditions
     *
     * @param string|null $creditTermsAndConditions Custom terms and conditions for the contact. If set will override global /invoice_settings default terms and conditions. <br><i>Customers only</i>
     *
     * @return $this
     */
    public function setCreditTermsAndConditions(?string $creditTermsAndConditions): static
    {
        if (is_null($creditTermsAndConditions)) {
            throw new InvalidArgumentException('non-nullable creditTermsAndConditions cannot be null');
        }
        $this->container['creditTermsAndConditions'] = $creditTermsAndConditions;

        return $this;
    }

    /**
     * Gets productSalesPriceTypeId
     *
     * @return string|null
     */
    public function getProductSalesPriceTypeId(): ?string
    {
        return $this->container['productSalesPriceTypeId'];
    }

    /**
     * Sets productSalesPriceTypeId
     *
     * @param string|null $productSalesPriceTypeId The ID of the Product Sales Price Type.
     *
     * @return $this
     */
    public function setProductSalesPriceTypeId(?string $productSalesPriceTypeId): static
    {
        if (is_null($productSalesPriceTypeId)) {
            throw new InvalidArgumentException('non-nullable productSalesPriceTypeId cannot be null');
        }
        $this->container['productSalesPriceTypeId'] = $productSalesPriceTypeId;

        return $this;
    }

    /**
     * Gets sourceGuid
     *
     * @return string|null
     */
    public function getSourceGuid(): ?string
    {
        return $this->container['sourceGuid'];
    }

    /**
     * Sets sourceGuid
     *
     * @param string|null $sourceGuid Used when importing contacts from external sources
     *
     * @return $this
     */
    public function setSourceGuid(?string $sourceGuid): static
    {
        if (is_null($sourceGuid)) {
            throw new InvalidArgumentException('non-nullable sourceGuid cannot be null');
        }
        $this->container['sourceGuid'] = $sourceGuid;

        return $this;
    }

    /**
     * Gets currencyId
     *
     * @return string|null
     */
    public function getCurrencyId(): ?string
    {
        return $this->container['currencyId'];
    }

    /**
     * Sets currencyId
     *
     * @param string|null $currencyId The ID of the Currency.
     *
     * @return $this
     */
    public function setCurrencyId(?string $currencyId): static
    {
        if (is_null($currencyId)) {
            throw new InvalidArgumentException('non-nullable currencyId cannot be null');
        }
        $this->container['currencyId'] = $currencyId;

        return $this;
    }

    /**
     * Gets auxReference
     *
     * @return string|null
     */
    public function getAuxReference(): ?string
    {
        return $this->container['auxReference'];
    }

    /**
     * Sets auxReference
     *
     * @param string|null $auxReference Auxiliary reference. Used for German \"Kreditorennummer\" and \"Debitorennummer\". <br> <a href=\"https://developer.sage.com/accounting/reference/settings/#tag/Datev-Settings\">   See Datev Settings endpoint reference </a>
     *
     * @return $this
     */
    public function setAuxReference(?string $auxReference): static
    {
        if (is_null($auxReference)) {
            throw new InvalidArgumentException('non-nullable auxReference cannot be null');
        }
        $this->container['auxReference'] = $auxReference;

        return $this;
    }

    /**
     * Gets registeredNumber
     *
     * @return string|null
     */
    public function getRegisteredNumber(): ?string
    {
        return $this->container['registeredNumber'];
    }

    /**
     * Sets registeredNumber
     *
     * @param string|null $registeredNumber The registered number of the contact's business. Only used for German businesses and represents the \"Steuernummer\" there (not the \"USt-ID\").
     *
     * @return $this
     */
    public function setRegisteredNumber(?string $registeredNumber): static
    {
        if (is_null($registeredNumber)) {
            throw new InvalidArgumentException('non-nullable registeredNumber cannot be null');
        }
        $this->container['registeredNumber'] = $registeredNumber;

        return $this;
    }

    /**
     * Gets taxCalculation
     *
     * @return string|null
     */
    public function getTaxCalculation(): ?string
    {
        return $this->container['taxCalculation'];
    }

    /**
     * Sets taxCalculation
     *
     * @param string|null $taxCalculation <b>France:</b> The tax calculation method used to define tax treatment <i>Vendors only</i> <br> <b>Spain:</b> Defines if contact is a retailer and tax is subject to Recargo de Equivalencia <i>Customers only</i> <b>United Kingdom:</b> Defines if contact tax treatment is domestic reverse charge <i>Customers & Suppliers</i>
     *
     * @return $this
     */
    public function setTaxCalculation(?string $taxCalculation): static
    {
        if (is_null($taxCalculation)) {
            throw new InvalidArgumentException('non-nullable taxCalculation cannot be null');
        }
        $this->container['taxCalculation'] = $taxCalculation;

        return $this;
    }

    /**
     * Gets auxiliaryAccount
     *
     * @return string|null
     */
    public function getAuxiliaryAccount(): ?string
    {
        return $this->container['auxiliaryAccount'];
    }

    /**
     * Sets auxiliaryAccount
     *
     * @param string|null $auxiliaryAccount Auxiliary account - used when auxiliary accounting is enabled in business settings. <br><i>Available only in Spain and France</i>
     *
     * @return $this
     */
    public function setAuxiliaryAccount(?string $auxiliaryAccount): static
    {
        if (is_null($auxiliaryAccount)) {
            throw new InvalidArgumentException('non-nullable auxiliaryAccount cannot be null');
        }
        $this->container['auxiliaryAccount'] = $auxiliaryAccount;

        return $this;
    }

    /**
     * Gets destinationVatBlocking
     *
     * @return bool|null
     */
    public function getDestinationVatBlocking(): ?bool
    {
        return $this->container['destinationVatBlocking'];
    }

    /**
     * Sets destinationVatBlocking
     *
     * @param bool|null $destinationVatBlocking Identifies a contact should be blocked due to destination vat
     *
     * @return $this
     */
    public function setDestinationVatBlocking(?bool $destinationVatBlocking): static
    {
        if (is_null($destinationVatBlocking)) {
            throw new InvalidArgumentException('non-nullable destinationVatBlocking cannot be null');
        }
        $this->container['destinationVatBlocking'] = $destinationVatBlocking;

        return $this;
    }

    /**
     * Gets mainAddress
     *
     * @return \SynergiTech\Sage\Model\PostBankAccountsBankAccountMainAddress|null
     */
    public function getMainAddress(): ?\SynergiTech\Sage\Model\PostBankAccountsBankAccountMainAddress
    {
        return $this->container['mainAddress'];
    }

    /**
     * Sets mainAddress
     *
     * @param \SynergiTech\Sage\Model\PostBankAccountsBankAccountMainAddress|null $mainAddress mainAddress
     *
     * @return $this
     */
    public function setMainAddress(?\SynergiTech\Sage\Model\PostBankAccountsBankAccountMainAddress $mainAddress): static
    {
        if (is_null($mainAddress)) {
            throw new InvalidArgumentException('non-nullable mainAddress cannot be null');
        }
        $this->container['mainAddress'] = $mainAddress;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return \SynergiTech\Sage\Model\PostBankAccountsBankAccountMainAddress|null
     */
    public function getDeliveryAddress(): ?\SynergiTech\Sage\Model\PostBankAccountsBankAccountMainAddress
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param \SynergiTech\Sage\Model\PostBankAccountsBankAccountMainAddress|null $deliveryAddress deliveryAddress
     *
     * @return $this
     */
    public function setDeliveryAddress(?\SynergiTech\Sage\Model\PostBankAccountsBankAccountMainAddress $deliveryAddress): static
    {
        if (is_null($deliveryAddress)) {
            throw new InvalidArgumentException('non-nullable deliveryAddress cannot be null');
        }
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets mainContactPerson
     *
     * @return \SynergiTech\Sage\Model\PostContactsContactMainContactPerson|null
     */
    public function getMainContactPerson(): ?\SynergiTech\Sage\Model\PostContactsContactMainContactPerson
    {
        return $this->container['mainContactPerson'];
    }

    /**
     * Sets mainContactPerson
     *
     * @param \SynergiTech\Sage\Model\PostContactsContactMainContactPerson|null $mainContactPerson mainContactPerson
     *
     * @return $this
     */
    public function setMainContactPerson(?\SynergiTech\Sage\Model\PostContactsContactMainContactPerson $mainContactPerson): static
    {
        if (is_null($mainContactPerson)) {
            throw new InvalidArgumentException('non-nullable mainContactPerson cannot be null');
        }
        $this->container['mainContactPerson'] = $mainContactPerson;

        return $this;
    }

    /**
     * Gets bankAccountDetails
     *
     * @return \SynergiTech\Sage\Model\PutBankAccountsBankAccountBankAccountDetails|null
     */
    public function getBankAccountDetails(): ?\SynergiTech\Sage\Model\PutBankAccountsBankAccountBankAccountDetails
    {
        return $this->container['bankAccountDetails'];
    }

    /**
     * Sets bankAccountDetails
     *
     * @param \SynergiTech\Sage\Model\PutBankAccountsBankAccountBankAccountDetails|null $bankAccountDetails bankAccountDetails
     *
     * @return $this
     */
    public function setBankAccountDetails(?\SynergiTech\Sage\Model\PutBankAccountsBankAccountBankAccountDetails $bankAccountDetails): static
    {
        if (is_null($bankAccountDetails)) {
            throw new InvalidArgumentException('non-nullable bankAccountDetails cannot be null');
        }
        $this->container['bankAccountDetails'] = $bankAccountDetails;

        return $this;
    }

    /**
     * Gets taxTreatment
     *
     * @return \SynergiTech\Sage\Model\PostContactsContactTaxTreatment|null
     */
    public function getTaxTreatment(): ?\SynergiTech\Sage\Model\PostContactsContactTaxTreatment
    {
        return $this->container['taxTreatment'];
    }

    /**
     * Sets taxTreatment
     *
     * @param \SynergiTech\Sage\Model\PostContactsContactTaxTreatment|null $taxTreatment taxTreatment
     *
     * @return $this
     */
    public function setTaxTreatment(?\SynergiTech\Sage\Model\PostContactsContactTaxTreatment $taxTreatment): static
    {
        if (is_null($taxTreatment)) {
            throw new InvalidArgumentException('non-nullable taxTreatment cannot be null');
        }
        $this->container['taxTreatment'] = $taxTreatment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


