<?php
/**
 * InvoiceSettings
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage Business Cloud Accounting - Accounts
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 3.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * InvoiceSettings Class Doc Comment
 *
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Standard: ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª * Accounting Start: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any mentioned role in one of the listed areas: * Area: &#x60;Settings&#x60;: Full Access
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class InvoiceSettings implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'InvoiceSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'path' => 'string',
        'nextInvoiceNumber' => 'int',
        'nextCreditNoteNumber' => 'int',
        'separateInvoiceCreditNoteNumbering' => 'bool',
        'salesInvoiceNumberPrefix' => 'string',
        'salesCreditNoteNumberPrefix' => 'string',
        'invoiceTermsAndConditions' => 'string',
        'defaultNoteOnInvoice' => 'string',
        'defaultNoteOnCreditNote' => 'string',
        'defaultNoteOnEstimate' => 'string',
        'defaultNoteOnQuote' => 'string',
        'nextQuoteNumber' => 'int',
        'quoteNumberPrefix' => 'string',
        'estimateNumberPrefix' => 'string',
        'quoteDefaultDaysToExpiry' => 'int',
        'estimateDefaultDaysToExpiry' => 'int',
        'quoteTermsAndConditions' => 'string',
        'estimateTermsAndConditions' => 'string',
        'deliveryNoteTermsAndConditions' => 'string',
        'deliveryNoteShowSignature' => 'bool',
        'deliveryNoteShowPicked' => 'bool',
        'deliveryNoteShowNotes' => 'bool',
        'deliveryNoteShowContactDetails' => 'bool',
        'quickEntryPrefix' => 'string',
        'latePaymentPercentage' => 'float',
        'promptPaymentPercentage' => 'float',
        'showAutoEntrepreneur' => 'bool',
        'showInsurance' => 'bool',
        'insurer' => '\SynergiTech\Sage\Model\Contact',
        'insuranceArea' => 'string',
        'insuranceType' => 'string',
        'insuranceText' => 'string',
        'paymentBankAccount' => '\SynergiTech\Sage\Model\Base',
        'salesCorrectiveInvoiceNumberPrefix' => 'string',
        'nextSalesCorrectiveInvoiceNumber' => 'int',
        'documentHeadings' => '\SynergiTech\Sage\Model\InvoiceSettingsDocumentHeadings',
        'lineItemTitles' => '\SynergiTech\Sage\Model\InvoiceSettingsLineItemTitles',
        'footerDetails' => '\SynergiTech\Sage\Model\FooterDetails',
        'printContactDetails' => '\SynergiTech\Sage\Model\PrintContactDetails',
        'printStatements' => '\SynergiTech\Sage\Model\PrintStatements',
        'customerCreditDays' => 'int',
        'vendorCreditDays' => 'int',
        'customerCreditTerms' => 'string',
        'vendorCreditTerms' => 'string',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'path' => null,
        'nextInvoiceNumber' => 'int32',
        'nextCreditNoteNumber' => 'int32',
        'separateInvoiceCreditNoteNumbering' => null,
        'salesInvoiceNumberPrefix' => null,
        'salesCreditNoteNumberPrefix' => null,
        'invoiceTermsAndConditions' => null,
        'defaultNoteOnInvoice' => null,
        'defaultNoteOnCreditNote' => null,
        'defaultNoteOnEstimate' => null,
        'defaultNoteOnQuote' => null,
        'nextQuoteNumber' => 'int32',
        'quoteNumberPrefix' => null,
        'estimateNumberPrefix' => null,
        'quoteDefaultDaysToExpiry' => 'int32',
        'estimateDefaultDaysToExpiry' => 'int32',
        'quoteTermsAndConditions' => null,
        'estimateTermsAndConditions' => null,
        'deliveryNoteTermsAndConditions' => null,
        'deliveryNoteShowSignature' => null,
        'deliveryNoteShowPicked' => null,
        'deliveryNoteShowNotes' => null,
        'deliveryNoteShowContactDetails' => null,
        'quickEntryPrefix' => null,
        'latePaymentPercentage' => 'double',
        'promptPaymentPercentage' => 'double',
        'showAutoEntrepreneur' => null,
        'showInsurance' => null,
        'insurer' => null,
        'insuranceArea' => null,
        'insuranceType' => null,
        'insuranceText' => null,
        'paymentBankAccount' => null,
        'salesCorrectiveInvoiceNumberPrefix' => null,
        'nextSalesCorrectiveInvoiceNumber' => 'int32',
        'documentHeadings' => null,
        'lineItemTitles' => null,
        'footerDetails' => null,
        'printContactDetails' => null,
        'printStatements' => null,
        'customerCreditDays' => 'int32',
        'vendorCreditDays' => 'int32',
        'customerCreditTerms' => null,
        'vendorCreditTerms' => null,
        'updatedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'path' => false,
        'nextInvoiceNumber' => false,
        'nextCreditNoteNumber' => false,
        'separateInvoiceCreditNoteNumbering' => false,
        'salesInvoiceNumberPrefix' => false,
        'salesCreditNoteNumberPrefix' => false,
        'invoiceTermsAndConditions' => false,
        'defaultNoteOnInvoice' => false,
        'defaultNoteOnCreditNote' => false,
        'defaultNoteOnEstimate' => false,
        'defaultNoteOnQuote' => false,
        'nextQuoteNumber' => false,
        'quoteNumberPrefix' => false,
        'estimateNumberPrefix' => false,
        'quoteDefaultDaysToExpiry' => false,
        'estimateDefaultDaysToExpiry' => false,
        'quoteTermsAndConditions' => false,
        'estimateTermsAndConditions' => false,
        'deliveryNoteTermsAndConditions' => false,
        'deliveryNoteShowSignature' => false,
        'deliveryNoteShowPicked' => false,
        'deliveryNoteShowNotes' => false,
        'deliveryNoteShowContactDetails' => false,
        'quickEntryPrefix' => false,
        'latePaymentPercentage' => false,
        'promptPaymentPercentage' => false,
        'showAutoEntrepreneur' => false,
        'showInsurance' => false,
        'insurer' => false,
        'insuranceArea' => false,
        'insuranceType' => false,
        'insuranceText' => false,
        'paymentBankAccount' => false,
        'salesCorrectiveInvoiceNumberPrefix' => false,
        'nextSalesCorrectiveInvoiceNumber' => false,
        'documentHeadings' => false,
        'lineItemTitles' => false,
        'footerDetails' => false,
        'printContactDetails' => false,
        'printStatements' => false,
        'customerCreditDays' => false,
        'vendorCreditDays' => false,
        'customerCreditTerms' => false,
        'vendorCreditTerms' => false,
        'updatedAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'path' => '$path',
        'nextInvoiceNumber' => 'next_invoice_number',
        'nextCreditNoteNumber' => 'next_credit_note_number',
        'separateInvoiceCreditNoteNumbering' => 'separate_invoice_credit_note_numbering',
        'salesInvoiceNumberPrefix' => 'sales_invoice_number_prefix',
        'salesCreditNoteNumberPrefix' => 'sales_credit_note_number_prefix',
        'invoiceTermsAndConditions' => 'invoice_terms_and_conditions',
        'defaultNoteOnInvoice' => 'default_note_on_invoice',
        'defaultNoteOnCreditNote' => 'default_note_on_credit_note',
        'defaultNoteOnEstimate' => 'default_note_on_estimate',
        'defaultNoteOnQuote' => 'default_note_on_quote',
        'nextQuoteNumber' => 'next_quote_number',
        'quoteNumberPrefix' => 'quote_number_prefix',
        'estimateNumberPrefix' => 'estimate_number_prefix',
        'quoteDefaultDaysToExpiry' => 'quote_default_days_to_expiry',
        'estimateDefaultDaysToExpiry' => 'estimate_default_days_to_expiry',
        'quoteTermsAndConditions' => 'quote_terms_and_conditions',
        'estimateTermsAndConditions' => 'estimate_terms_and_conditions',
        'deliveryNoteTermsAndConditions' => 'delivery_note_terms_and_conditions',
        'deliveryNoteShowSignature' => 'delivery_note_show_signature',
        'deliveryNoteShowPicked' => 'delivery_note_show_picked',
        'deliveryNoteShowNotes' => 'delivery_note_show_notes',
        'deliveryNoteShowContactDetails' => 'delivery_note_show_contact_details',
        'quickEntryPrefix' => 'quick_entry_prefix',
        'latePaymentPercentage' => 'late_payment_percentage',
        'promptPaymentPercentage' => 'prompt_payment_percentage',
        'showAutoEntrepreneur' => 'show_auto_entrepreneur',
        'showInsurance' => 'show_insurance',
        'insurer' => 'insurer',
        'insuranceArea' => 'insurance_area',
        'insuranceType' => 'insurance_type',
        'insuranceText' => 'insurance_text',
        'paymentBankAccount' => 'payment_bank_account',
        'salesCorrectiveInvoiceNumberPrefix' => 'sales_corrective_invoice_number_prefix',
        'nextSalesCorrectiveInvoiceNumber' => 'next_sales_corrective_invoice_number',
        'documentHeadings' => 'document_headings',
        'lineItemTitles' => 'line_item_titles',
        'footerDetails' => 'footer_details',
        'printContactDetails' => 'print_contact_details',
        'printStatements' => 'print_statements',
        'customerCreditDays' => 'customer_credit_days',
        'vendorCreditDays' => 'vendor_credit_days',
        'customerCreditTerms' => 'customer_credit_terms',
        'vendorCreditTerms' => 'vendor_credit_terms',
        'updatedAt' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'path' => 'setPath',
        'nextInvoiceNumber' => 'setNextInvoiceNumber',
        'nextCreditNoteNumber' => 'setNextCreditNoteNumber',
        'separateInvoiceCreditNoteNumbering' => 'setSeparateInvoiceCreditNoteNumbering',
        'salesInvoiceNumberPrefix' => 'setSalesInvoiceNumberPrefix',
        'salesCreditNoteNumberPrefix' => 'setSalesCreditNoteNumberPrefix',
        'invoiceTermsAndConditions' => 'setInvoiceTermsAndConditions',
        'defaultNoteOnInvoice' => 'setDefaultNoteOnInvoice',
        'defaultNoteOnCreditNote' => 'setDefaultNoteOnCreditNote',
        'defaultNoteOnEstimate' => 'setDefaultNoteOnEstimate',
        'defaultNoteOnQuote' => 'setDefaultNoteOnQuote',
        'nextQuoteNumber' => 'setNextQuoteNumber',
        'quoteNumberPrefix' => 'setQuoteNumberPrefix',
        'estimateNumberPrefix' => 'setEstimateNumberPrefix',
        'quoteDefaultDaysToExpiry' => 'setQuoteDefaultDaysToExpiry',
        'estimateDefaultDaysToExpiry' => 'setEstimateDefaultDaysToExpiry',
        'quoteTermsAndConditions' => 'setQuoteTermsAndConditions',
        'estimateTermsAndConditions' => 'setEstimateTermsAndConditions',
        'deliveryNoteTermsAndConditions' => 'setDeliveryNoteTermsAndConditions',
        'deliveryNoteShowSignature' => 'setDeliveryNoteShowSignature',
        'deliveryNoteShowPicked' => 'setDeliveryNoteShowPicked',
        'deliveryNoteShowNotes' => 'setDeliveryNoteShowNotes',
        'deliveryNoteShowContactDetails' => 'setDeliveryNoteShowContactDetails',
        'quickEntryPrefix' => 'setQuickEntryPrefix',
        'latePaymentPercentage' => 'setLatePaymentPercentage',
        'promptPaymentPercentage' => 'setPromptPaymentPercentage',
        'showAutoEntrepreneur' => 'setShowAutoEntrepreneur',
        'showInsurance' => 'setShowInsurance',
        'insurer' => 'setInsurer',
        'insuranceArea' => 'setInsuranceArea',
        'insuranceType' => 'setInsuranceType',
        'insuranceText' => 'setInsuranceText',
        'paymentBankAccount' => 'setPaymentBankAccount',
        'salesCorrectiveInvoiceNumberPrefix' => 'setSalesCorrectiveInvoiceNumberPrefix',
        'nextSalesCorrectiveInvoiceNumber' => 'setNextSalesCorrectiveInvoiceNumber',
        'documentHeadings' => 'setDocumentHeadings',
        'lineItemTitles' => 'setLineItemTitles',
        'footerDetails' => 'setFooterDetails',
        'printContactDetails' => 'setPrintContactDetails',
        'printStatements' => 'setPrintStatements',
        'customerCreditDays' => 'setCustomerCreditDays',
        'vendorCreditDays' => 'setVendorCreditDays',
        'customerCreditTerms' => 'setCustomerCreditTerms',
        'vendorCreditTerms' => 'setVendorCreditTerms',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'path' => 'getPath',
        'nextInvoiceNumber' => 'getNextInvoiceNumber',
        'nextCreditNoteNumber' => 'getNextCreditNoteNumber',
        'separateInvoiceCreditNoteNumbering' => 'getSeparateInvoiceCreditNoteNumbering',
        'salesInvoiceNumberPrefix' => 'getSalesInvoiceNumberPrefix',
        'salesCreditNoteNumberPrefix' => 'getSalesCreditNoteNumberPrefix',
        'invoiceTermsAndConditions' => 'getInvoiceTermsAndConditions',
        'defaultNoteOnInvoice' => 'getDefaultNoteOnInvoice',
        'defaultNoteOnCreditNote' => 'getDefaultNoteOnCreditNote',
        'defaultNoteOnEstimate' => 'getDefaultNoteOnEstimate',
        'defaultNoteOnQuote' => 'getDefaultNoteOnQuote',
        'nextQuoteNumber' => 'getNextQuoteNumber',
        'quoteNumberPrefix' => 'getQuoteNumberPrefix',
        'estimateNumberPrefix' => 'getEstimateNumberPrefix',
        'quoteDefaultDaysToExpiry' => 'getQuoteDefaultDaysToExpiry',
        'estimateDefaultDaysToExpiry' => 'getEstimateDefaultDaysToExpiry',
        'quoteTermsAndConditions' => 'getQuoteTermsAndConditions',
        'estimateTermsAndConditions' => 'getEstimateTermsAndConditions',
        'deliveryNoteTermsAndConditions' => 'getDeliveryNoteTermsAndConditions',
        'deliveryNoteShowSignature' => 'getDeliveryNoteShowSignature',
        'deliveryNoteShowPicked' => 'getDeliveryNoteShowPicked',
        'deliveryNoteShowNotes' => 'getDeliveryNoteShowNotes',
        'deliveryNoteShowContactDetails' => 'getDeliveryNoteShowContactDetails',
        'quickEntryPrefix' => 'getQuickEntryPrefix',
        'latePaymentPercentage' => 'getLatePaymentPercentage',
        'promptPaymentPercentage' => 'getPromptPaymentPercentage',
        'showAutoEntrepreneur' => 'getShowAutoEntrepreneur',
        'showInsurance' => 'getShowInsurance',
        'insurer' => 'getInsurer',
        'insuranceArea' => 'getInsuranceArea',
        'insuranceType' => 'getInsuranceType',
        'insuranceText' => 'getInsuranceText',
        'paymentBankAccount' => 'getPaymentBankAccount',
        'salesCorrectiveInvoiceNumberPrefix' => 'getSalesCorrectiveInvoiceNumberPrefix',
        'nextSalesCorrectiveInvoiceNumber' => 'getNextSalesCorrectiveInvoiceNumber',
        'documentHeadings' => 'getDocumentHeadings',
        'lineItemTitles' => 'getLineItemTitles',
        'footerDetails' => 'getFooterDetails',
        'printContactDetails' => 'getPrintContactDetails',
        'printStatements' => 'getPrintStatements',
        'customerCreditDays' => 'getCustomerCreditDays',
        'vendorCreditDays' => 'getVendorCreditDays',
        'customerCreditTerms' => 'getCustomerCreditTerms',
        'vendorCreditTerms' => 'getVendorCreditTerms',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const CUSTOMER_CREDIT_TERMS_MONTH_END_INVOICE = 'month_end_invoice';
    public const CUSTOMER_CREDIT_TERMS_DATE_FROM_INVOICE = 'date_from_invoice';
    public const CUSTOMER_CREDIT_TERMS_IMMEDIATE_INVOICE = 'immediate_invoice';
    public const VENDOR_CREDIT_TERMS_MONTH_END_PAYMENT = 'month_end_payment';
    public const VENDOR_CREDIT_TERMS_DATE_FROM_PAYMENT = 'date_from_payment';
    public const VENDOR_CREDIT_TERMS_IMMEDIATE_PAYMENT = 'immediate_payment';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerCreditTermsAllowableValues()
    {
        return [
            self::CUSTOMER_CREDIT_TERMS_MONTH_END_INVOICE,
            self::CUSTOMER_CREDIT_TERMS_DATE_FROM_INVOICE,
            self::CUSTOMER_CREDIT_TERMS_IMMEDIATE_INVOICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVendorCreditTermsAllowableValues()
    {
        return [
            self::VENDOR_CREDIT_TERMS_MONTH_END_PAYMENT,
            self::VENDOR_CREDIT_TERMS_DATE_FROM_PAYMENT,
            self::VENDOR_CREDIT_TERMS_IMMEDIATE_PAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('nextInvoiceNumber', $data ?? [], null);
        $this->setIfExists('nextCreditNoteNumber', $data ?? [], null);
        $this->setIfExists('separateInvoiceCreditNoteNumbering', $data ?? [], null);
        $this->setIfExists('salesInvoiceNumberPrefix', $data ?? [], null);
        $this->setIfExists('salesCreditNoteNumberPrefix', $data ?? [], null);
        $this->setIfExists('invoiceTermsAndConditions', $data ?? [], null);
        $this->setIfExists('defaultNoteOnInvoice', $data ?? [], null);
        $this->setIfExists('defaultNoteOnCreditNote', $data ?? [], null);
        $this->setIfExists('defaultNoteOnEstimate', $data ?? [], null);
        $this->setIfExists('defaultNoteOnQuote', $data ?? [], null);
        $this->setIfExists('nextQuoteNumber', $data ?? [], null);
        $this->setIfExists('quoteNumberPrefix', $data ?? [], null);
        $this->setIfExists('estimateNumberPrefix', $data ?? [], null);
        $this->setIfExists('quoteDefaultDaysToExpiry', $data ?? [], null);
        $this->setIfExists('estimateDefaultDaysToExpiry', $data ?? [], null);
        $this->setIfExists('quoteTermsAndConditions', $data ?? [], null);
        $this->setIfExists('estimateTermsAndConditions', $data ?? [], null);
        $this->setIfExists('deliveryNoteTermsAndConditions', $data ?? [], null);
        $this->setIfExists('deliveryNoteShowSignature', $data ?? [], null);
        $this->setIfExists('deliveryNoteShowPicked', $data ?? [], null);
        $this->setIfExists('deliveryNoteShowNotes', $data ?? [], null);
        $this->setIfExists('deliveryNoteShowContactDetails', $data ?? [], null);
        $this->setIfExists('quickEntryPrefix', $data ?? [], null);
        $this->setIfExists('latePaymentPercentage', $data ?? [], null);
        $this->setIfExists('promptPaymentPercentage', $data ?? [], null);
        $this->setIfExists('showAutoEntrepreneur', $data ?? [], null);
        $this->setIfExists('showInsurance', $data ?? [], null);
        $this->setIfExists('insurer', $data ?? [], null);
        $this->setIfExists('insuranceArea', $data ?? [], null);
        $this->setIfExists('insuranceType', $data ?? [], null);
        $this->setIfExists('insuranceText', $data ?? [], null);
        $this->setIfExists('paymentBankAccount', $data ?? [], null);
        $this->setIfExists('salesCorrectiveInvoiceNumberPrefix', $data ?? [], null);
        $this->setIfExists('nextSalesCorrectiveInvoiceNumber', $data ?? [], null);
        $this->setIfExists('documentHeadings', $data ?? [], null);
        $this->setIfExists('lineItemTitles', $data ?? [], null);
        $this->setIfExists('footerDetails', $data ?? [], null);
        $this->setIfExists('printContactDetails', $data ?? [], null);
        $this->setIfExists('printStatements', $data ?? [], null);
        $this->setIfExists('customerCreditDays', $data ?? [], null);
        $this->setIfExists('vendorCreditDays', $data ?? [], null);
        $this->setIfExists('customerCreditTerms', $data ?? [], null);
        $this->setIfExists('vendorCreditTerms', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['salesInvoiceNumberPrefix']) && (mb_strlen($this->container['salesInvoiceNumberPrefix']) > 6)) {
            $invalidProperties[] = "invalid value for 'salesInvoiceNumberPrefix', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['salesCreditNoteNumberPrefix']) && (mb_strlen($this->container['salesCreditNoteNumberPrefix']) > 6)) {
            $invalidProperties[] = "invalid value for 'salesCreditNoteNumberPrefix', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['invoiceTermsAndConditions']) && (mb_strlen($this->container['invoiceTermsAndConditions']) > 2000)) {
            $invalidProperties[] = "invalid value for 'invoiceTermsAndConditions', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['defaultNoteOnInvoice']) && (mb_strlen($this->container['defaultNoteOnInvoice']) > 2000)) {
            $invalidProperties[] = "invalid value for 'defaultNoteOnInvoice', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['defaultNoteOnCreditNote']) && (mb_strlen($this->container['defaultNoteOnCreditNote']) > 2000)) {
            $invalidProperties[] = "invalid value for 'defaultNoteOnCreditNote', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['defaultNoteOnEstimate']) && (mb_strlen($this->container['defaultNoteOnEstimate']) > 2000)) {
            $invalidProperties[] = "invalid value for 'defaultNoteOnEstimate', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['defaultNoteOnQuote']) && (mb_strlen($this->container['defaultNoteOnQuote']) > 2000)) {
            $invalidProperties[] = "invalid value for 'defaultNoteOnQuote', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['quoteNumberPrefix']) && (mb_strlen($this->container['quoteNumberPrefix']) > 6)) {
            $invalidProperties[] = "invalid value for 'quoteNumberPrefix', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['estimateNumberPrefix']) && (mb_strlen($this->container['estimateNumberPrefix']) > 6)) {
            $invalidProperties[] = "invalid value for 'estimateNumberPrefix', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['quoteTermsAndConditions']) && (mb_strlen($this->container['quoteTermsAndConditions']) > 2000)) {
            $invalidProperties[] = "invalid value for 'quoteTermsAndConditions', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['estimateTermsAndConditions']) && (mb_strlen($this->container['estimateTermsAndConditions']) > 2000)) {
            $invalidProperties[] = "invalid value for 'estimateTermsAndConditions', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['deliveryNoteTermsAndConditions']) && (mb_strlen($this->container['deliveryNoteTermsAndConditions']) > 2000)) {
            $invalidProperties[] = "invalid value for 'deliveryNoteTermsAndConditions', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['quickEntryPrefix']) && (mb_strlen($this->container['quickEntryPrefix']) > 6)) {
            $invalidProperties[] = "invalid value for 'quickEntryPrefix', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['salesCorrectiveInvoiceNumberPrefix']) && (mb_strlen($this->container['salesCorrectiveInvoiceNumberPrefix']) > 255)) {
            $invalidProperties[] = "invalid value for 'salesCorrectiveInvoiceNumberPrefix', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getCustomerCreditTermsAllowableValues();
        if (!is_null($this->container['customerCreditTerms']) && !in_array($this->container['customerCreditTerms'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'customerCreditTerms', must be one of '%s'",
                $this->container['customerCreditTerms'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVendorCreditTermsAllowableValues();
        if (!is_null($this->container['vendorCreditTerms']) && !in_array($this->container['vendorCreditTerms'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vendorCreditTerms', must be one of '%s'",
                $this->container['vendorCreditTerms'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath(): ?string
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The path for the resource
     *
     * @return $this
     */
    public function setPath(?string $path): static
    {
        if (is_null($path)) {
            throw new InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets nextInvoiceNumber
     *
     * @return int|null
     */
    public function getNextInvoiceNumber(): ?int
    {
        return $this->container['nextInvoiceNumber'];
    }

    /**
     * Sets nextInvoiceNumber
     *
     * @param int|null $nextInvoiceNumber The next invoice number
     *
     * @return $this
     */
    public function setNextInvoiceNumber(?int $nextInvoiceNumber): static
    {
        if (is_null($nextInvoiceNumber)) {
            throw new InvalidArgumentException('non-nullable nextInvoiceNumber cannot be null');
        }
        $this->container['nextInvoiceNumber'] = $nextInvoiceNumber;

        return $this;
    }

    /**
     * Gets nextCreditNoteNumber
     *
     * @return int|null
     */
    public function getNextCreditNoteNumber(): ?int
    {
        return $this->container['nextCreditNoteNumber'];
    }

    /**
     * Sets nextCreditNoteNumber
     *
     * @param int|null $nextCreditNoteNumber The next credit note number
     *
     * @return $this
     */
    public function setNextCreditNoteNumber(?int $nextCreditNoteNumber): static
    {
        if (is_null($nextCreditNoteNumber)) {
            throw new InvalidArgumentException('non-nullable nextCreditNoteNumber cannot be null');
        }
        $this->container['nextCreditNoteNumber'] = $nextCreditNoteNumber;

        return $this;
    }

    /**
     * Gets separateInvoiceCreditNoteNumbering
     *
     * @return bool|null
     */
    public function getSeparateInvoiceCreditNoteNumbering(): ?bool
    {
        return $this->container['separateInvoiceCreditNoteNumbering'];
    }

    /**
     * Sets separateInvoiceCreditNoteNumbering
     *
     * @param bool|null $separateInvoiceCreditNoteNumbering Indicates whether to use separate or combined number sequences for invoices and credit notes
     *
     * @return $this
     */
    public function setSeparateInvoiceCreditNoteNumbering(?bool $separateInvoiceCreditNoteNumbering): static
    {
        if (is_null($separateInvoiceCreditNoteNumbering)) {
            throw new InvalidArgumentException('non-nullable separateInvoiceCreditNoteNumbering cannot be null');
        }
        $this->container['separateInvoiceCreditNoteNumbering'] = $separateInvoiceCreditNoteNumbering;

        return $this;
    }

    /**
     * Gets salesInvoiceNumberPrefix
     *
     * @return string|null
     */
    public function getSalesInvoiceNumberPrefix(): ?string
    {
        return $this->container['salesInvoiceNumberPrefix'];
    }

    /**
     * Sets salesInvoiceNumberPrefix
     *
     * @param string|null $salesInvoiceNumberPrefix The prefix to use for sales invoices
     *
     * @return $this
     */
    public function setSalesInvoiceNumberPrefix(?string $salesInvoiceNumberPrefix): static
    {
        if (is_null($salesInvoiceNumberPrefix)) {
            throw new InvalidArgumentException('non-nullable salesInvoiceNumberPrefix cannot be null');
        }
        if ((mb_strlen($salesInvoiceNumberPrefix) > 6)) {
            throw new InvalidArgumentException('invalid length for $salesInvoiceNumberPrefix when calling InvoiceSettings., must be smaller than or equal to 6.');
        }

        $this->container['salesInvoiceNumberPrefix'] = $salesInvoiceNumberPrefix;

        return $this;
    }

    /**
     * Gets salesCreditNoteNumberPrefix
     *
     * @return string|null
     */
    public function getSalesCreditNoteNumberPrefix(): ?string
    {
        return $this->container['salesCreditNoteNumberPrefix'];
    }

    /**
     * Sets salesCreditNoteNumberPrefix
     *
     * @param string|null $salesCreditNoteNumberPrefix The prefix to use for sales credit notes
     *
     * @return $this
     */
    public function setSalesCreditNoteNumberPrefix(?string $salesCreditNoteNumberPrefix): static
    {
        if (is_null($salesCreditNoteNumberPrefix)) {
            throw new InvalidArgumentException('non-nullable salesCreditNoteNumberPrefix cannot be null');
        }
        if ((mb_strlen($salesCreditNoteNumberPrefix) > 6)) {
            throw new InvalidArgumentException('invalid length for $salesCreditNoteNumberPrefix when calling InvoiceSettings., must be smaller than or equal to 6.');
        }

        $this->container['salesCreditNoteNumberPrefix'] = $salesCreditNoteNumberPrefix;

        return $this;
    }

    /**
     * Gets invoiceTermsAndConditions
     *
     * @return string|null
     */
    public function getInvoiceTermsAndConditions(): ?string
    {
        return $this->container['invoiceTermsAndConditions'];
    }

    /**
     * Sets invoiceTermsAndConditions
     *
     * @param string|null $invoiceTermsAndConditions The default terms and conditions to include on invoices
     *
     * @return $this
     */
    public function setInvoiceTermsAndConditions(?string $invoiceTermsAndConditions): static
    {
        if (is_null($invoiceTermsAndConditions)) {
            throw new InvalidArgumentException('non-nullable invoiceTermsAndConditions cannot be null');
        }
        if ((mb_strlen($invoiceTermsAndConditions) > 2000)) {
            throw new InvalidArgumentException('invalid length for $invoiceTermsAndConditions when calling InvoiceSettings., must be smaller than or equal to 2000.');
        }

        $this->container['invoiceTermsAndConditions'] = $invoiceTermsAndConditions;

        return $this;
    }

    /**
     * Gets defaultNoteOnInvoice
     *
     * @return string|null
     */
    public function getDefaultNoteOnInvoice(): ?string
    {
        return $this->container['defaultNoteOnInvoice'];
    }

    /**
     * Sets defaultNoteOnInvoice
     *
     * @param string|null $defaultNoteOnInvoice The default notes to include on invoices
     *
     * @return $this
     */
    public function setDefaultNoteOnInvoice(?string $defaultNoteOnInvoice): static
    {
        if (is_null($defaultNoteOnInvoice)) {
            throw new InvalidArgumentException('non-nullable defaultNoteOnInvoice cannot be null');
        }
        if ((mb_strlen($defaultNoteOnInvoice) > 2000)) {
            throw new InvalidArgumentException('invalid length for $defaultNoteOnInvoice when calling InvoiceSettings., must be smaller than or equal to 2000.');
        }

        $this->container['defaultNoteOnInvoice'] = $defaultNoteOnInvoice;

        return $this;
    }

    /**
     * Gets defaultNoteOnCreditNote
     *
     * @return string|null
     */
    public function getDefaultNoteOnCreditNote(): ?string
    {
        return $this->container['defaultNoteOnCreditNote'];
    }

    /**
     * Sets defaultNoteOnCreditNote
     *
     * @param string|null $defaultNoteOnCreditNote The default notes to include on credit notes
     *
     * @return $this
     */
    public function setDefaultNoteOnCreditNote(?string $defaultNoteOnCreditNote): static
    {
        if (is_null($defaultNoteOnCreditNote)) {
            throw new InvalidArgumentException('non-nullable defaultNoteOnCreditNote cannot be null');
        }
        if ((mb_strlen($defaultNoteOnCreditNote) > 2000)) {
            throw new InvalidArgumentException('invalid length for $defaultNoteOnCreditNote when calling InvoiceSettings., must be smaller than or equal to 2000.');
        }

        $this->container['defaultNoteOnCreditNote'] = $defaultNoteOnCreditNote;

        return $this;
    }

    /**
     * Gets defaultNoteOnEstimate
     *
     * @return string|null
     */
    public function getDefaultNoteOnEstimate(): ?string
    {
        return $this->container['defaultNoteOnEstimate'];
    }

    /**
     * Sets defaultNoteOnEstimate
     *
     * @param string|null $defaultNoteOnEstimate The default notes to include on estimates
     *
     * @return $this
     */
    public function setDefaultNoteOnEstimate(?string $defaultNoteOnEstimate): static
    {
        if (is_null($defaultNoteOnEstimate)) {
            throw new InvalidArgumentException('non-nullable defaultNoteOnEstimate cannot be null');
        }
        if ((mb_strlen($defaultNoteOnEstimate) > 2000)) {
            throw new InvalidArgumentException('invalid length for $defaultNoteOnEstimate when calling InvoiceSettings., must be smaller than or equal to 2000.');
        }

        $this->container['defaultNoteOnEstimate'] = $defaultNoteOnEstimate;

        return $this;
    }

    /**
     * Gets defaultNoteOnQuote
     *
     * @return string|null
     */
    public function getDefaultNoteOnQuote(): ?string
    {
        return $this->container['defaultNoteOnQuote'];
    }

    /**
     * Sets defaultNoteOnQuote
     *
     * @param string|null $defaultNoteOnQuote The default notes to include on quotes
     *
     * @return $this
     */
    public function setDefaultNoteOnQuote(?string $defaultNoteOnQuote): static
    {
        if (is_null($defaultNoteOnQuote)) {
            throw new InvalidArgumentException('non-nullable defaultNoteOnQuote cannot be null');
        }
        if ((mb_strlen($defaultNoteOnQuote) > 2000)) {
            throw new InvalidArgumentException('invalid length for $defaultNoteOnQuote when calling InvoiceSettings., must be smaller than or equal to 2000.');
        }

        $this->container['defaultNoteOnQuote'] = $defaultNoteOnQuote;

        return $this;
    }

    /**
     * Gets nextQuoteNumber
     *
     * @return int|null
     */
    public function getNextQuoteNumber(): ?int
    {
        return $this->container['nextQuoteNumber'];
    }

    /**
     * Sets nextQuoteNumber
     *
     * @param int|null $nextQuoteNumber The next quote number
     *
     * @return $this
     */
    public function setNextQuoteNumber(?int $nextQuoteNumber): static
    {
        if (is_null($nextQuoteNumber)) {
            throw new InvalidArgumentException('non-nullable nextQuoteNumber cannot be null');
        }
        $this->container['nextQuoteNumber'] = $nextQuoteNumber;

        return $this;
    }

    /**
     * Gets quoteNumberPrefix
     *
     * @return string|null
     */
    public function getQuoteNumberPrefix(): ?string
    {
        return $this->container['quoteNumberPrefix'];
    }

    /**
     * Sets quoteNumberPrefix
     *
     * @param string|null $quoteNumberPrefix The prefix to use for sales quotes
     *
     * @return $this
     */
    public function setQuoteNumberPrefix(?string $quoteNumberPrefix): static
    {
        if (is_null($quoteNumberPrefix)) {
            throw new InvalidArgumentException('non-nullable quoteNumberPrefix cannot be null');
        }
        if ((mb_strlen($quoteNumberPrefix) > 6)) {
            throw new InvalidArgumentException('invalid length for $quoteNumberPrefix when calling InvoiceSettings., must be smaller than or equal to 6.');
        }

        $this->container['quoteNumberPrefix'] = $quoteNumberPrefix;

        return $this;
    }

    /**
     * Gets estimateNumberPrefix
     *
     * @return string|null
     */
    public function getEstimateNumberPrefix(): ?string
    {
        return $this->container['estimateNumberPrefix'];
    }

    /**
     * Sets estimateNumberPrefix
     *
     * @param string|null $estimateNumberPrefix The prefix to use for sales estimates
     *
     * @return $this
     */
    public function setEstimateNumberPrefix(?string $estimateNumberPrefix): static
    {
        if (is_null($estimateNumberPrefix)) {
            throw new InvalidArgumentException('non-nullable estimateNumberPrefix cannot be null');
        }
        if ((mb_strlen($estimateNumberPrefix) > 6)) {
            throw new InvalidArgumentException('invalid length for $estimateNumberPrefix when calling InvoiceSettings., must be smaller than or equal to 6.');
        }

        $this->container['estimateNumberPrefix'] = $estimateNumberPrefix;

        return $this;
    }

    /**
     * Gets quoteDefaultDaysToExpiry
     *
     * @return int|null
     */
    public function getQuoteDefaultDaysToExpiry(): ?int
    {
        return $this->container['quoteDefaultDaysToExpiry'];
    }

    /**
     * Sets quoteDefaultDaysToExpiry
     *
     * @param int|null $quoteDefaultDaysToExpiry The default number of days before quotes expire
     *
     * @return $this
     */
    public function setQuoteDefaultDaysToExpiry(?int $quoteDefaultDaysToExpiry): static
    {
        if (is_null($quoteDefaultDaysToExpiry)) {
            throw new InvalidArgumentException('non-nullable quoteDefaultDaysToExpiry cannot be null');
        }
        $this->container['quoteDefaultDaysToExpiry'] = $quoteDefaultDaysToExpiry;

        return $this;
    }

    /**
     * Gets estimateDefaultDaysToExpiry
     *
     * @return int|null
     */
    public function getEstimateDefaultDaysToExpiry(): ?int
    {
        return $this->container['estimateDefaultDaysToExpiry'];
    }

    /**
     * Sets estimateDefaultDaysToExpiry
     *
     * @param int|null $estimateDefaultDaysToExpiry The default number of days before estimates expire
     *
     * @return $this
     */
    public function setEstimateDefaultDaysToExpiry(?int $estimateDefaultDaysToExpiry): static
    {
        if (is_null($estimateDefaultDaysToExpiry)) {
            throw new InvalidArgumentException('non-nullable estimateDefaultDaysToExpiry cannot be null');
        }
        $this->container['estimateDefaultDaysToExpiry'] = $estimateDefaultDaysToExpiry;

        return $this;
    }

    /**
     * Gets quoteTermsAndConditions
     *
     * @return string|null
     */
    public function getQuoteTermsAndConditions(): ?string
    {
        return $this->container['quoteTermsAndConditions'];
    }

    /**
     * Sets quoteTermsAndConditions
     *
     * @param string|null $quoteTermsAndConditions The default terms and conditions to include on quotes
     *
     * @return $this
     */
    public function setQuoteTermsAndConditions(?string $quoteTermsAndConditions): static
    {
        if (is_null($quoteTermsAndConditions)) {
            throw new InvalidArgumentException('non-nullable quoteTermsAndConditions cannot be null');
        }
        if ((mb_strlen($quoteTermsAndConditions) > 2000)) {
            throw new InvalidArgumentException('invalid length for $quoteTermsAndConditions when calling InvoiceSettings., must be smaller than or equal to 2000.');
        }

        $this->container['quoteTermsAndConditions'] = $quoteTermsAndConditions;

        return $this;
    }

    /**
     * Gets estimateTermsAndConditions
     *
     * @return string|null
     */
    public function getEstimateTermsAndConditions(): ?string
    {
        return $this->container['estimateTermsAndConditions'];
    }

    /**
     * Sets estimateTermsAndConditions
     *
     * @param string|null $estimateTermsAndConditions The default terms and conditions to include on estimates
     *
     * @return $this
     */
    public function setEstimateTermsAndConditions(?string $estimateTermsAndConditions): static
    {
        if (is_null($estimateTermsAndConditions)) {
            throw new InvalidArgumentException('non-nullable estimateTermsAndConditions cannot be null');
        }
        if ((mb_strlen($estimateTermsAndConditions) > 2000)) {
            throw new InvalidArgumentException('invalid length for $estimateTermsAndConditions when calling InvoiceSettings., must be smaller than or equal to 2000.');
        }

        $this->container['estimateTermsAndConditions'] = $estimateTermsAndConditions;

        return $this;
    }

    /**
     * Gets deliveryNoteTermsAndConditions
     *
     * @return string|null
     */
    public function getDeliveryNoteTermsAndConditions(): ?string
    {
        return $this->container['deliveryNoteTermsAndConditions'];
    }

    /**
     * Sets deliveryNoteTermsAndConditions
     *
     * @param string|null $deliveryNoteTermsAndConditions The default terms and conditions to include on delivery notes
     *
     * @return $this
     */
    public function setDeliveryNoteTermsAndConditions(?string $deliveryNoteTermsAndConditions): static
    {
        if (is_null($deliveryNoteTermsAndConditions)) {
            throw new InvalidArgumentException('non-nullable deliveryNoteTermsAndConditions cannot be null');
        }
        if ((mb_strlen($deliveryNoteTermsAndConditions) > 2000)) {
            throw new InvalidArgumentException('invalid length for $deliveryNoteTermsAndConditions when calling InvoiceSettings., must be smaller than or equal to 2000.');
        }

        $this->container['deliveryNoteTermsAndConditions'] = $deliveryNoteTermsAndConditions;

        return $this;
    }

    /**
     * Gets deliveryNoteShowSignature
     *
     * @return bool|null
     */
    public function getDeliveryNoteShowSignature(): ?bool
    {
        return $this->container['deliveryNoteShowSignature'];
    }

    /**
     * Sets deliveryNoteShowSignature
     *
     * @param bool|null $deliveryNoteShowSignature Indicates whether to include the signature lines on delivery notes
     *
     * @return $this
     */
    public function setDeliveryNoteShowSignature(?bool $deliveryNoteShowSignature): static
    {
        if (is_null($deliveryNoteShowSignature)) {
            throw new InvalidArgumentException('non-nullable deliveryNoteShowSignature cannot be null');
        }
        $this->container['deliveryNoteShowSignature'] = $deliveryNoteShowSignature;

        return $this;
    }

    /**
     * Gets deliveryNoteShowPicked
     *
     * @return bool|null
     */
    public function getDeliveryNoteShowPicked(): ?bool
    {
        return $this->container['deliveryNoteShowPicked'];
    }

    /**
     * Sets deliveryNoteShowPicked
     *
     * @param bool|null $deliveryNoteShowPicked Indicates whether to include the picked column on delivery notes
     *
     * @return $this
     */
    public function setDeliveryNoteShowPicked(?bool $deliveryNoteShowPicked): static
    {
        if (is_null($deliveryNoteShowPicked)) {
            throw new InvalidArgumentException('non-nullable deliveryNoteShowPicked cannot be null');
        }
        $this->container['deliveryNoteShowPicked'] = $deliveryNoteShowPicked;

        return $this;
    }

    /**
     * Gets deliveryNoteShowNotes
     *
     * @return bool|null
     */
    public function getDeliveryNoteShowNotes(): ?bool
    {
        return $this->container['deliveryNoteShowNotes'];
    }

    /**
     * Sets deliveryNoteShowNotes
     *
     * @param bool|null $deliveryNoteShowNotes Indicates whether to include the document notes on delivery notes
     *
     * @return $this
     */
    public function setDeliveryNoteShowNotes(?bool $deliveryNoteShowNotes): static
    {
        if (is_null($deliveryNoteShowNotes)) {
            throw new InvalidArgumentException('non-nullable deliveryNoteShowNotes cannot be null');
        }
        $this->container['deliveryNoteShowNotes'] = $deliveryNoteShowNotes;

        return $this;
    }

    /**
     * Gets deliveryNoteShowContactDetails
     *
     * @return bool|null
     */
    public function getDeliveryNoteShowContactDetails(): ?bool
    {
        return $this->container['deliveryNoteShowContactDetails'];
    }

    /**
     * Sets deliveryNoteShowContactDetails
     *
     * @param bool|null $deliveryNoteShowContactDetails Indicates whether to include contact details on delivery notes
     *
     * @return $this
     */
    public function setDeliveryNoteShowContactDetails(?bool $deliveryNoteShowContactDetails): static
    {
        if (is_null($deliveryNoteShowContactDetails)) {
            throw new InvalidArgumentException('non-nullable deliveryNoteShowContactDetails cannot be null');
        }
        $this->container['deliveryNoteShowContactDetails'] = $deliveryNoteShowContactDetails;

        return $this;
    }

    /**
     * Gets quickEntryPrefix
     *
     * @return string|null
     */
    public function getQuickEntryPrefix(): ?string
    {
        return $this->container['quickEntryPrefix'];
    }

    /**
     * Sets quickEntryPrefix
     *
     * @param string|null $quickEntryPrefix The prefix to use for quick entries
     *
     * @return $this
     */
    public function setQuickEntryPrefix(?string $quickEntryPrefix): static
    {
        if (is_null($quickEntryPrefix)) {
            throw new InvalidArgumentException('non-nullable quickEntryPrefix cannot be null');
        }
        if ((mb_strlen($quickEntryPrefix) > 6)) {
            throw new InvalidArgumentException('invalid length for $quickEntryPrefix when calling InvoiceSettings., must be smaller than or equal to 6.');
        }

        $this->container['quickEntryPrefix'] = $quickEntryPrefix;

        return $this;
    }

    /**
     * Gets latePaymentPercentage
     *
     * @return float|null
     */
    public function getLatePaymentPercentage(): ?float
    {
        return $this->container['latePaymentPercentage'];
    }

    /**
     * Sets latePaymentPercentage
     *
     * @param float|null $latePaymentPercentage The percentage charge applied to late payment of invoices (France only)
     *
     * @return $this
     */
    public function setLatePaymentPercentage(?float $latePaymentPercentage): static
    {
        if (is_null($latePaymentPercentage)) {
            throw new InvalidArgumentException('non-nullable latePaymentPercentage cannot be null');
        }
        $this->container['latePaymentPercentage'] = $latePaymentPercentage;

        return $this;
    }

    /**
     * Gets promptPaymentPercentage
     *
     * @return float|null
     */
    public function getPromptPaymentPercentage(): ?float
    {
        return $this->container['promptPaymentPercentage'];
    }

    /**
     * Sets promptPaymentPercentage
     *
     * @param float|null $promptPaymentPercentage The percentage applied to late payment of invoices (France only)
     *
     * @return $this
     */
    public function setPromptPaymentPercentage(?float $promptPaymentPercentage): static
    {
        if (is_null($promptPaymentPercentage)) {
            throw new InvalidArgumentException('non-nullable promptPaymentPercentage cannot be null');
        }
        $this->container['promptPaymentPercentage'] = $promptPaymentPercentage;

        return $this;
    }

    /**
     * Gets showAutoEntrepreneur
     *
     * @return bool|null
     */
    public function getShowAutoEntrepreneur(): ?bool
    {
        return $this->container['showAutoEntrepreneur'];
    }

    /**
     * Sets showAutoEntrepreneur
     *
     * @param bool|null $showAutoEntrepreneur Indicates whether to include auto entrepreneur details on invoices (France only)
     *
     * @return $this
     */
    public function setShowAutoEntrepreneur(?bool $showAutoEntrepreneur): static
    {
        if (is_null($showAutoEntrepreneur)) {
            throw new InvalidArgumentException('non-nullable showAutoEntrepreneur cannot be null');
        }
        $this->container['showAutoEntrepreneur'] = $showAutoEntrepreneur;

        return $this;
    }

    /**
     * Gets showInsurance
     *
     * @return bool|null
     */
    public function getShowInsurance(): ?bool
    {
        return $this->container['showInsurance'];
    }

    /**
     * Sets showInsurance
     *
     * @param bool|null $showInsurance Indicates whether to include insurance details on invoices (France only)
     *
     * @return $this
     */
    public function setShowInsurance(?bool $showInsurance): static
    {
        if (is_null($showInsurance)) {
            throw new InvalidArgumentException('non-nullable showInsurance cannot be null');
        }
        $this->container['showInsurance'] = $showInsurance;

        return $this;
    }

    /**
     * Gets insurer
     *
     * @return \SynergiTech\Sage\Model\Contact|null
     */
    public function getInsurer(): ?\SynergiTech\Sage\Model\Contact
    {
        return $this->container['insurer'];
    }

    /**
     * Sets insurer
     *
     * @param \SynergiTech\Sage\Model\Contact|null $insurer insurer
     *
     * @return $this
     */
    public function setInsurer(?\SynergiTech\Sage\Model\Contact $insurer): static
    {
        if (is_null($insurer)) {
            throw new InvalidArgumentException('non-nullable insurer cannot be null');
        }
        $this->container['insurer'] = $insurer;

        return $this;
    }

    /**
     * Gets insuranceArea
     *
     * @return string|null
     */
    public function getInsuranceArea(): ?string
    {
        return $this->container['insuranceArea'];
    }

    /**
     * Sets insuranceArea
     *
     * @param string|null $insuranceArea The insurance area to be displayed on invoices (France only)
     *
     * @return $this
     */
    public function setInsuranceArea(?string $insuranceArea): static
    {
        if (is_null($insuranceArea)) {
            throw new InvalidArgumentException('non-nullable insuranceArea cannot be null');
        }
        $this->container['insuranceArea'] = $insuranceArea;

        return $this;
    }

    /**
     * Gets insuranceType
     *
     * @return string|null
     */
    public function getInsuranceType(): ?string
    {
        return $this->container['insuranceType'];
    }

    /**
     * Sets insuranceType
     *
     * @param string|null $insuranceType The insurance type to be displayed on invoices (France only)
     *
     * @return $this
     */
    public function setInsuranceType(?string $insuranceType): static
    {
        if (is_null($insuranceType)) {
            throw new InvalidArgumentException('non-nullable insuranceType cannot be null');
        }
        $this->container['insuranceType'] = $insuranceType;

        return $this;
    }

    /**
     * Gets insuranceText
     *
     * @return string|null
     */
    public function getInsuranceText(): ?string
    {
        return $this->container['insuranceText'];
    }

    /**
     * Sets insuranceText
     *
     * @param string|null $insuranceText The insurance mention to be displayed on invoices (France only)
     *
     * @return $this
     */
    public function setInsuranceText(?string $insuranceText): static
    {
        if (is_null($insuranceText)) {
            throw new InvalidArgumentException('non-nullable insuranceText cannot be null');
        }
        $this->container['insuranceText'] = $insuranceText;

        return $this;
    }

    /**
     * Gets paymentBankAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getPaymentBankAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['paymentBankAccount'];
    }

    /**
     * Sets paymentBankAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $paymentBankAccount paymentBankAccount
     *
     * @return $this
     */
    public function setPaymentBankAccount(?\SynergiTech\Sage\Model\Base $paymentBankAccount): static
    {
        if (is_null($paymentBankAccount)) {
            throw new InvalidArgumentException('non-nullable paymentBankAccount cannot be null');
        }
        $this->container['paymentBankAccount'] = $paymentBankAccount;

        return $this;
    }

    /**
     * Gets salesCorrectiveInvoiceNumberPrefix
     *
     * @return string|null
     */
    public function getSalesCorrectiveInvoiceNumberPrefix(): ?string
    {
        return $this->container['salesCorrectiveInvoiceNumberPrefix'];
    }

    /**
     * Sets salesCorrectiveInvoiceNumberPrefix
     *
     * @param string|null $salesCorrectiveInvoiceNumberPrefix The sales corrective invoice number prefix (Spain only)
     *
     * @return $this
     */
    public function setSalesCorrectiveInvoiceNumberPrefix(?string $salesCorrectiveInvoiceNumberPrefix): static
    {
        if (is_null($salesCorrectiveInvoiceNumberPrefix)) {
            throw new InvalidArgumentException('non-nullable salesCorrectiveInvoiceNumberPrefix cannot be null');
        }
        if ((mb_strlen($salesCorrectiveInvoiceNumberPrefix) > 255)) {
            throw new InvalidArgumentException('invalid length for $salesCorrectiveInvoiceNumberPrefix when calling InvoiceSettings., must be smaller than or equal to 255.');
        }

        $this->container['salesCorrectiveInvoiceNumberPrefix'] = $salesCorrectiveInvoiceNumberPrefix;

        return $this;
    }

    /**
     * Gets nextSalesCorrectiveInvoiceNumber
     *
     * @return int|null
     */
    public function getNextSalesCorrectiveInvoiceNumber(): ?int
    {
        return $this->container['nextSalesCorrectiveInvoiceNumber'];
    }

    /**
     * Sets nextSalesCorrectiveInvoiceNumber
     *
     * @param int|null $nextSalesCorrectiveInvoiceNumber The next sales corrective invoice number
     *
     * @return $this
     */
    public function setNextSalesCorrectiveInvoiceNumber(?int $nextSalesCorrectiveInvoiceNumber): static
    {
        if (is_null($nextSalesCorrectiveInvoiceNumber)) {
            throw new InvalidArgumentException('non-nullable nextSalesCorrectiveInvoiceNumber cannot be null');
        }
        $this->container['nextSalesCorrectiveInvoiceNumber'] = $nextSalesCorrectiveInvoiceNumber;

        return $this;
    }

    /**
     * Gets documentHeadings
     *
     * @return \SynergiTech\Sage\Model\InvoiceSettingsDocumentHeadings|null
     */
    public function getDocumentHeadings(): ?\SynergiTech\Sage\Model\InvoiceSettingsDocumentHeadings
    {
        return $this->container['documentHeadings'];
    }

    /**
     * Sets documentHeadings
     *
     * @param \SynergiTech\Sage\Model\InvoiceSettingsDocumentHeadings|null $documentHeadings documentHeadings
     *
     * @return $this
     */
    public function setDocumentHeadings(?\SynergiTech\Sage\Model\InvoiceSettingsDocumentHeadings $documentHeadings): static
    {
        if (is_null($documentHeadings)) {
            throw new InvalidArgumentException('non-nullable documentHeadings cannot be null');
        }
        $this->container['documentHeadings'] = $documentHeadings;

        return $this;
    }

    /**
     * Gets lineItemTitles
     *
     * @return \SynergiTech\Sage\Model\InvoiceSettingsLineItemTitles|null
     */
    public function getLineItemTitles(): ?\SynergiTech\Sage\Model\InvoiceSettingsLineItemTitles
    {
        return $this->container['lineItemTitles'];
    }

    /**
     * Sets lineItemTitles
     *
     * @param \SynergiTech\Sage\Model\InvoiceSettingsLineItemTitles|null $lineItemTitles lineItemTitles
     *
     * @return $this
     */
    public function setLineItemTitles(?\SynergiTech\Sage\Model\InvoiceSettingsLineItemTitles $lineItemTitles): static
    {
        if (is_null($lineItemTitles)) {
            throw new InvalidArgumentException('non-nullable lineItemTitles cannot be null');
        }
        $this->container['lineItemTitles'] = $lineItemTitles;

        return $this;
    }

    /**
     * Gets footerDetails
     *
     * @return \SynergiTech\Sage\Model\FooterDetails|null
     */
    public function getFooterDetails(): ?\SynergiTech\Sage\Model\FooterDetails
    {
        return $this->container['footerDetails'];
    }

    /**
     * Sets footerDetails
     *
     * @param \SynergiTech\Sage\Model\FooterDetails|null $footerDetails footerDetails
     *
     * @return $this
     */
    public function setFooterDetails(?\SynergiTech\Sage\Model\FooterDetails $footerDetails): static
    {
        if (is_null($footerDetails)) {
            throw new InvalidArgumentException('non-nullable footerDetails cannot be null');
        }
        $this->container['footerDetails'] = $footerDetails;

        return $this;
    }

    /**
     * Gets printContactDetails
     *
     * @return \SynergiTech\Sage\Model\PrintContactDetails|null
     */
    public function getPrintContactDetails(): ?\SynergiTech\Sage\Model\PrintContactDetails
    {
        return $this->container['printContactDetails'];
    }

    /**
     * Sets printContactDetails
     *
     * @param \SynergiTech\Sage\Model\PrintContactDetails|null $printContactDetails printContactDetails
     *
     * @return $this
     */
    public function setPrintContactDetails(?\SynergiTech\Sage\Model\PrintContactDetails $printContactDetails): static
    {
        if (is_null($printContactDetails)) {
            throw new InvalidArgumentException('non-nullable printContactDetails cannot be null');
        }
        $this->container['printContactDetails'] = $printContactDetails;

        return $this;
    }

    /**
     * Gets printStatements
     *
     * @return \SynergiTech\Sage\Model\PrintStatements|null
     */
    public function getPrintStatements(): ?\SynergiTech\Sage\Model\PrintStatements
    {
        return $this->container['printStatements'];
    }

    /**
     * Sets printStatements
     *
     * @param \SynergiTech\Sage\Model\PrintStatements|null $printStatements printStatements
     *
     * @return $this
     */
    public function setPrintStatements(?\SynergiTech\Sage\Model\PrintStatements $printStatements): static
    {
        if (is_null($printStatements)) {
            throw new InvalidArgumentException('non-nullable printStatements cannot be null');
        }
        $this->container['printStatements'] = $printStatements;

        return $this;
    }

    /**
     * Gets customerCreditDays
     *
     * @return int|null
     */
    public function getCustomerCreditDays(): ?int
    {
        return $this->container['customerCreditDays'];
    }

    /**
     * Sets customerCreditDays
     *
     * @param int|null $customerCreditDays The default delay within which the business' customer has to pay an invoice Prefer the (customer) contact's attribute 'credit_days' over this setting to calculate an invoice's date of payment; only if null, use this as default.
     *
     * @return $this
     */
    public function setCustomerCreditDays(?int $customerCreditDays): static
    {
        if (is_null($customerCreditDays)) {
            throw new InvalidArgumentException('non-nullable customerCreditDays cannot be null');
        }
        $this->container['customerCreditDays'] = $customerCreditDays;

        return $this;
    }

    /**
     * Gets vendorCreditDays
     *
     * @return int|null
     */
    public function getVendorCreditDays(): ?int
    {
        return $this->container['vendorCreditDays'];
    }

    /**
     * Sets vendorCreditDays
     *
     * @param int|null $vendorCreditDays The default delay within which the business has to pay any vendor's invoice Prefer the specific (vendor) contact's attribute 'credit_days' over this setting; only if null, use this as default.
     *
     * @return $this
     */
    public function setVendorCreditDays(?int $vendorCreditDays): static
    {
        if (is_null($vendorCreditDays)) {
            throw new InvalidArgumentException('non-nullable vendorCreditDays cannot be null');
        }
        $this->container['vendorCreditDays'] = $vendorCreditDays;

        return $this;
    }

    /**
     * Gets customerCreditTerms
     *
     * @return string|null
     */
    public function getCustomerCreditTerms(): ?string
    {
        return $this->container['customerCreditTerms'];
    }

    /**
     * Sets customerCreditTerms
     *
     * @param string|null $customerCreditTerms The default credit terms options determine how invoice due dates are calculated. Options include: end of next month, a delay of customer credit_days and immediately. Only: month_end_invoice, date_from_invoice, immediate_invoice are valid values. Prefer the (customer) contact's credit terms over this setting to calculate an invoice's date of payment; only if null, use this as default.
     *
     * @return $this
     */
    public function setCustomerCreditTerms(?string $customerCreditTerms): static
    {
        if (is_null($customerCreditTerms)) {
            throw new InvalidArgumentException('non-nullable customerCreditTerms cannot be null');
        }
        $allowedValues = $this->getCustomerCreditTermsAllowableValues();
        if (!in_array($customerCreditTerms, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'customerCreditTerms', must be one of '%s'",
                    $customerCreditTerms,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customerCreditTerms'] = $customerCreditTerms;

        return $this;
    }

    /**
     * Gets vendorCreditTerms
     *
     * @return string|null
     */
    public function getVendorCreditTerms(): ?string
    {
        return $this->container['vendorCreditTerms'];
    }

    /**
     * Sets vendorCreditTerms
     *
     * @param string|null $vendorCreditTerms The default credit terms options determine how invoice due dates are calculated. Options include: end of next month, a delay of supplier credit_days and immediately. Only: month_end_payment, date_from_payment, immediate_payment are valid values. Prefer the (vendor) contact's credit terms over this setting to calculate an invoice's date of payment; only if null, use this as default.
     *
     * @return $this
     */
    public function setVendorCreditTerms(?string $vendorCreditTerms): static
    {
        if (is_null($vendorCreditTerms)) {
            throw new InvalidArgumentException('non-nullable vendorCreditTerms cannot be null');
        }
        $allowedValues = $this->getVendorCreditTermsAllowableValues();
        if (!in_array($vendorCreditTerms, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vendorCreditTerms', must be one of '%s'",
                    $vendorCreditTerms,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vendorCreditTerms'] = $vendorCreditTerms;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


