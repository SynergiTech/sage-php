<?php
/**
 * PurchaseCorrectiveInvoice
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * PurchaseCorrectiveInvoice Class Doc Comment
 *
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡ªðŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any of the following roles in the area &#x60;Purchases&#x60;: Full Access, Restricted Access
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PurchaseCorrectiveInvoice implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PurchaseCorrectiveInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'legacyId' => 'int',
        'id' => 'string',
        'displayedAs' => 'string',
        'path' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'links' => '\SynergiTech\Sage\Model\Link[]',
        'editable' => 'bool',
        'vatReverseCharge' => 'bool',
        'transaction' => '\SynergiTech\Sage\Model\Transaction',
        'transactionType' => '\SynergiTech\Sage\Model\Base',
        'contact' => '\SynergiTech\Sage\Model\Contact',
        'deletedAt' => '\DateTime',
        'contactName' => 'string',
        'contactReference' => 'string',
        'date' => '\DateTime',
        'dueDate' => '\DateTime',
        'reference' => 'string',
        'vendorReference' => 'string',
        'notes' => 'string',
        'totalQuantity' => 'float',
        'netAmount' => 'float',
        'taxAmount' => 'float',
        'totalAmount' => 'float',
        'paymentsAllocationsTotalAmount' => 'float',
        'paymentsAllocationsTotalDiscount' => 'float',
        'totalPaid' => 'float',
        'outstandingAmount' => 'float',
        'currency' => '\SynergiTech\Sage\Model\Base',
        'exchangeRate' => 'float',
        'inverseExchangeRate' => 'string',
        'baseCurrencyNetAmount' => 'float',
        'baseCurrencyTaxAmount' => 'float',
        'baseCurrencyTotalAmount' => 'float',
        'baseCurrencyOutstandingAmount' => 'float',
        'status' => '\SynergiTech\Sage\Model\Base',
        'voidReason' => 'string',
        'invoiceLines' => '\SynergiTech\Sage\Model\PurchaseInvoiceLineItem[]',
        'taxAnalysis' => '\SynergiTech\Sage\Model\ArtefactTaxAnalysis[]',
        'detailedTaxAnalysis' => '\SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysis',
        'paymentsAllocations' => '\SynergiTech\Sage\Model\PaymentAllocation[]',
        'lastPaid' => '\DateTime',
        'withholdingTaxRate' => 'float',
        'withholdingTaxAmount' => 'float',
        'baseCurrencyWithholdingTaxAmount' => 'float',
        'originalInvoice' => '\SynergiTech\Sage\Model\Generic',
        'originalInvoiceNumber' => 'string',
        'originalInvoiceDate' => 'string',
        'taxReconciled' => 'bool',
        'import' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'legacyId' => 'int32',
        'id' => null,
        'displayedAs' => null,
        'path' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'links' => null,
        'editable' => null,
        'vatReverseCharge' => null,
        'transaction' => null,
        'transactionType' => null,
        'contact' => null,
        'deletedAt' => 'date-time',
        'contactName' => null,
        'contactReference' => null,
        'date' => 'date',
        'dueDate' => 'date',
        'reference' => null,
        'vendorReference' => null,
        'notes' => null,
        'totalQuantity' => 'double',
        'netAmount' => 'double',
        'taxAmount' => 'double',
        'totalAmount' => 'double',
        'paymentsAllocationsTotalAmount' => 'double',
        'paymentsAllocationsTotalDiscount' => 'double',
        'totalPaid' => 'double',
        'outstandingAmount' => 'double',
        'currency' => null,
        'exchangeRate' => 'double',
        'inverseExchangeRate' => null,
        'baseCurrencyNetAmount' => 'double',
        'baseCurrencyTaxAmount' => 'double',
        'baseCurrencyTotalAmount' => 'double',
        'baseCurrencyOutstandingAmount' => 'double',
        'status' => null,
        'voidReason' => null,
        'invoiceLines' => null,
        'taxAnalysis' => null,
        'detailedTaxAnalysis' => null,
        'paymentsAllocations' => null,
        'lastPaid' => 'date',
        'withholdingTaxRate' => 'double',
        'withholdingTaxAmount' => 'double',
        'baseCurrencyWithholdingTaxAmount' => 'double',
        'originalInvoice' => null,
        'originalInvoiceNumber' => null,
        'originalInvoiceDate' => null,
        'taxReconciled' => null,
        'import' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'legacyId' => false,
        'id' => false,
        'displayedAs' => false,
        'path' => false,
        'createdAt' => false,
        'updatedAt' => false,
        'links' => false,
        'editable' => false,
        'vatReverseCharge' => false,
        'transaction' => false,
        'transactionType' => false,
        'contact' => false,
        'deletedAt' => false,
        'contactName' => false,
        'contactReference' => false,
        'date' => false,
        'dueDate' => false,
        'reference' => false,
        'vendorReference' => false,
        'notes' => false,
        'totalQuantity' => false,
        'netAmount' => false,
        'taxAmount' => false,
        'totalAmount' => false,
        'paymentsAllocationsTotalAmount' => false,
        'paymentsAllocationsTotalDiscount' => false,
        'totalPaid' => false,
        'outstandingAmount' => false,
        'currency' => false,
        'exchangeRate' => false,
        'inverseExchangeRate' => false,
        'baseCurrencyNetAmount' => false,
        'baseCurrencyTaxAmount' => false,
        'baseCurrencyTotalAmount' => false,
        'baseCurrencyOutstandingAmount' => false,
        'status' => false,
        'voidReason' => false,
        'invoiceLines' => false,
        'taxAnalysis' => false,
        'detailedTaxAnalysis' => false,
        'paymentsAllocations' => false,
        'lastPaid' => false,
        'withholdingTaxRate' => false,
        'withholdingTaxAmount' => false,
        'baseCurrencyWithholdingTaxAmount' => false,
        'originalInvoice' => false,
        'originalInvoiceNumber' => false,
        'originalInvoiceDate' => false,
        'taxReconciled' => false,
        'import' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'legacyId' => 'legacy_id',
        'id' => 'id',
        'displayedAs' => 'displayed_as',
        'path' => '$path',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'links' => 'links',
        'editable' => 'editable',
        'vatReverseCharge' => 'vat_reverse_charge',
        'transaction' => 'transaction',
        'transactionType' => 'transaction_type',
        'contact' => 'contact',
        'deletedAt' => 'deleted_at',
        'contactName' => 'contact_name',
        'contactReference' => 'contact_reference',
        'date' => 'date',
        'dueDate' => 'due_date',
        'reference' => 'reference',
        'vendorReference' => 'vendor_reference',
        'notes' => 'notes',
        'totalQuantity' => 'total_quantity',
        'netAmount' => 'net_amount',
        'taxAmount' => 'tax_amount',
        'totalAmount' => 'total_amount',
        'paymentsAllocationsTotalAmount' => 'payments_allocations_total_amount',
        'paymentsAllocationsTotalDiscount' => 'payments_allocations_total_discount',
        'totalPaid' => 'total_paid',
        'outstandingAmount' => 'outstanding_amount',
        'currency' => 'currency',
        'exchangeRate' => 'exchange_rate',
        'inverseExchangeRate' => 'inverse_exchange_rate',
        'baseCurrencyNetAmount' => 'base_currency_net_amount',
        'baseCurrencyTaxAmount' => 'base_currency_tax_amount',
        'baseCurrencyTotalAmount' => 'base_currency_total_amount',
        'baseCurrencyOutstandingAmount' => 'base_currency_outstanding_amount',
        'status' => 'status',
        'voidReason' => 'void_reason',
        'invoiceLines' => 'invoice_lines',
        'taxAnalysis' => 'tax_analysis',
        'detailedTaxAnalysis' => 'detailed_tax_analysis',
        'paymentsAllocations' => 'payments_allocations',
        'lastPaid' => 'last_paid',
        'withholdingTaxRate' => 'withholding_tax_rate',
        'withholdingTaxAmount' => 'withholding_tax_amount',
        'baseCurrencyWithholdingTaxAmount' => 'base_currency_withholding_tax_amount',
        'originalInvoice' => 'original_invoice',
        'originalInvoiceNumber' => 'original_invoice_number',
        'originalInvoiceDate' => 'original_invoice_date',
        'taxReconciled' => 'tax_reconciled',
        'import' => 'import'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'legacyId' => 'setLegacyId',
        'id' => 'setId',
        'displayedAs' => 'setDisplayedAs',
        'path' => 'setPath',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'links' => 'setLinks',
        'editable' => 'setEditable',
        'vatReverseCharge' => 'setVatReverseCharge',
        'transaction' => 'setTransaction',
        'transactionType' => 'setTransactionType',
        'contact' => 'setContact',
        'deletedAt' => 'setDeletedAt',
        'contactName' => 'setContactName',
        'contactReference' => 'setContactReference',
        'date' => 'setDate',
        'dueDate' => 'setDueDate',
        'reference' => 'setReference',
        'vendorReference' => 'setVendorReference',
        'notes' => 'setNotes',
        'totalQuantity' => 'setTotalQuantity',
        'netAmount' => 'setNetAmount',
        'taxAmount' => 'setTaxAmount',
        'totalAmount' => 'setTotalAmount',
        'paymentsAllocationsTotalAmount' => 'setPaymentsAllocationsTotalAmount',
        'paymentsAllocationsTotalDiscount' => 'setPaymentsAllocationsTotalDiscount',
        'totalPaid' => 'setTotalPaid',
        'outstandingAmount' => 'setOutstandingAmount',
        'currency' => 'setCurrency',
        'exchangeRate' => 'setExchangeRate',
        'inverseExchangeRate' => 'setInverseExchangeRate',
        'baseCurrencyNetAmount' => 'setBaseCurrencyNetAmount',
        'baseCurrencyTaxAmount' => 'setBaseCurrencyTaxAmount',
        'baseCurrencyTotalAmount' => 'setBaseCurrencyTotalAmount',
        'baseCurrencyOutstandingAmount' => 'setBaseCurrencyOutstandingAmount',
        'status' => 'setStatus',
        'voidReason' => 'setVoidReason',
        'invoiceLines' => 'setInvoiceLines',
        'taxAnalysis' => 'setTaxAnalysis',
        'detailedTaxAnalysis' => 'setDetailedTaxAnalysis',
        'paymentsAllocations' => 'setPaymentsAllocations',
        'lastPaid' => 'setLastPaid',
        'withholdingTaxRate' => 'setWithholdingTaxRate',
        'withholdingTaxAmount' => 'setWithholdingTaxAmount',
        'baseCurrencyWithholdingTaxAmount' => 'setBaseCurrencyWithholdingTaxAmount',
        'originalInvoice' => 'setOriginalInvoice',
        'originalInvoiceNumber' => 'setOriginalInvoiceNumber',
        'originalInvoiceDate' => 'setOriginalInvoiceDate',
        'taxReconciled' => 'setTaxReconciled',
        'import' => 'setImport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'legacyId' => 'getLegacyId',
        'id' => 'getId',
        'displayedAs' => 'getDisplayedAs',
        'path' => 'getPath',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'links' => 'getLinks',
        'editable' => 'getEditable',
        'vatReverseCharge' => 'getVatReverseCharge',
        'transaction' => 'getTransaction',
        'transactionType' => 'getTransactionType',
        'contact' => 'getContact',
        'deletedAt' => 'getDeletedAt',
        'contactName' => 'getContactName',
        'contactReference' => 'getContactReference',
        'date' => 'getDate',
        'dueDate' => 'getDueDate',
        'reference' => 'getReference',
        'vendorReference' => 'getVendorReference',
        'notes' => 'getNotes',
        'totalQuantity' => 'getTotalQuantity',
        'netAmount' => 'getNetAmount',
        'taxAmount' => 'getTaxAmount',
        'totalAmount' => 'getTotalAmount',
        'paymentsAllocationsTotalAmount' => 'getPaymentsAllocationsTotalAmount',
        'paymentsAllocationsTotalDiscount' => 'getPaymentsAllocationsTotalDiscount',
        'totalPaid' => 'getTotalPaid',
        'outstandingAmount' => 'getOutstandingAmount',
        'currency' => 'getCurrency',
        'exchangeRate' => 'getExchangeRate',
        'inverseExchangeRate' => 'getInverseExchangeRate',
        'baseCurrencyNetAmount' => 'getBaseCurrencyNetAmount',
        'baseCurrencyTaxAmount' => 'getBaseCurrencyTaxAmount',
        'baseCurrencyTotalAmount' => 'getBaseCurrencyTotalAmount',
        'baseCurrencyOutstandingAmount' => 'getBaseCurrencyOutstandingAmount',
        'status' => 'getStatus',
        'voidReason' => 'getVoidReason',
        'invoiceLines' => 'getInvoiceLines',
        'taxAnalysis' => 'getTaxAnalysis',
        'detailedTaxAnalysis' => 'getDetailedTaxAnalysis',
        'paymentsAllocations' => 'getPaymentsAllocations',
        'lastPaid' => 'getLastPaid',
        'withholdingTaxRate' => 'getWithholdingTaxRate',
        'withholdingTaxAmount' => 'getWithholdingTaxAmount',
        'baseCurrencyWithholdingTaxAmount' => 'getBaseCurrencyWithholdingTaxAmount',
        'originalInvoice' => 'getOriginalInvoice',
        'originalInvoiceNumber' => 'getOriginalInvoiceNumber',
        'originalInvoiceDate' => 'getOriginalInvoiceDate',
        'taxReconciled' => 'getTaxReconciled',
        'import' => 'getImport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('legacyId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('displayedAs', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('editable', $data ?? [], null);
        $this->setIfExists('vatReverseCharge', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
        $this->setIfExists('transactionType', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('deletedAt', $data ?? [], null);
        $this->setIfExists('contactName', $data ?? [], null);
        $this->setIfExists('contactReference', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('dueDate', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('vendorReference', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('totalQuantity', $data ?? [], null);
        $this->setIfExists('netAmount', $data ?? [], null);
        $this->setIfExists('taxAmount', $data ?? [], null);
        $this->setIfExists('totalAmount', $data ?? [], null);
        $this->setIfExists('paymentsAllocationsTotalAmount', $data ?? [], null);
        $this->setIfExists('paymentsAllocationsTotalDiscount', $data ?? [], null);
        $this->setIfExists('totalPaid', $data ?? [], null);
        $this->setIfExists('outstandingAmount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('exchangeRate', $data ?? [], null);
        $this->setIfExists('inverseExchangeRate', $data ?? [], null);
        $this->setIfExists('baseCurrencyNetAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTaxAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyTotalAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyOutstandingAmount', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('voidReason', $data ?? [], null);
        $this->setIfExists('invoiceLines', $data ?? [], null);
        $this->setIfExists('taxAnalysis', $data ?? [], null);
        $this->setIfExists('detailedTaxAnalysis', $data ?? [], null);
        $this->setIfExists('paymentsAllocations', $data ?? [], null);
        $this->setIfExists('lastPaid', $data ?? [], null);
        $this->setIfExists('withholdingTaxRate', $data ?? [], null);
        $this->setIfExists('withholdingTaxAmount', $data ?? [], null);
        $this->setIfExists('baseCurrencyWithholdingTaxAmount', $data ?? [], null);
        $this->setIfExists('originalInvoice', $data ?? [], null);
        $this->setIfExists('originalInvoiceNumber', $data ?? [], null);
        $this->setIfExists('originalInvoiceDate', $data ?? [], null);
        $this->setIfExists('taxReconciled', $data ?? [], null);
        $this->setIfExists('import', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['contactName']) && (mb_strlen($this->container['contactName']) > 255)) {
            $invalidProperties[] = "invalid value for 'contactName', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contactReference']) && (mb_strlen($this->container['contactReference']) > 255)) {
            $invalidProperties[] = "invalid value for 'contactReference', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 25)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['vendorReference']) && (mb_strlen($this->container['vendorReference']) > 31)) {
            $invalidProperties[] = "invalid value for 'vendorReference', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) > 2000)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['voidReason']) && (mb_strlen($this->container['voidReason']) > 255)) {
            $invalidProperties[] = "invalid value for 'voidReason', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacyId
     *
     * @return int|null
     */
    public function getLegacyId(): ?int
    {
        return $this->container['legacyId'];
    }

    /**
     * Sets legacyId
     *
     * @param int|null $legacyId The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId(?int $legacyId): static
    {
        if (is_null($legacyId)) {
            throw new InvalidArgumentException('non-nullable legacyId cannot be null');
        }
        $this->container['legacyId'] = $legacyId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayedAs
     *
     * @return string|null
     */
    public function getDisplayedAs(): ?string
    {
        return $this->container['displayedAs'];
    }

    /**
     * Sets displayedAs
     *
     * @param string|null $displayedAs The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs(?string $displayedAs): static
    {
        if (is_null($displayedAs)) {
            throw new InvalidArgumentException('non-nullable displayedAs cannot be null');
        }
        $this->container['displayedAs'] = $displayedAs;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath(): ?string
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The API path for the resource
     *
     * @return $this
     */
    public function setPath(?string $path): static
    {
        if (is_null($path)) {
            throw new InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt The datetime when the item was created
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \SynergiTech\Sage\Model\Link[]|null
     */
    public function getLinks(): ?array
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \SynergiTech\Sage\Model\Link[]|null $links Links for the resource
     *
     * @return $this
     */
    public function setLinks(?array $links): static
    {
        if (is_null($links)) {
            throw new InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool|null
     */
    public function getEditable(): ?bool
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool|null $editable Indicates whether artefact can be edited
     *
     * @return $this
     */
    public function setEditable(?bool $editable): static
    {
        if (is_null($editable)) {
            throw new InvalidArgumentException('non-nullable editable cannot be null');
        }
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets vatReverseCharge
     *
     * @return bool|null
     */
    public function getVatReverseCharge(): ?bool
    {
        return $this->container['vatReverseCharge'];
    }

    /**
     * Sets vatReverseCharge
     *
     * @param bool|null $vatReverseCharge Indicates whether Domestic Reverser Charge is applied to the artefact. Only used for a UK business.
     *
     * @return $this
     */
    public function setVatReverseCharge(?bool $vatReverseCharge): static
    {
        if (is_null($vatReverseCharge)) {
            throw new InvalidArgumentException('non-nullable vatReverseCharge cannot be null');
        }
        $this->container['vatReverseCharge'] = $vatReverseCharge;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return \SynergiTech\Sage\Model\Transaction|null
     */
    public function getTransaction(): ?\SynergiTech\Sage\Model\Transaction
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \SynergiTech\Sage\Model\Transaction|null $transaction transaction
     *
     * @return $this
     */
    public function setTransaction(?\SynergiTech\Sage\Model\Transaction $transaction): static
    {
        if (is_null($transaction)) {
            throw new InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets transactionType
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getTransactionType(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['transactionType'];
    }

    /**
     * Sets transactionType
     *
     * @param \SynergiTech\Sage\Model\Base|null $transactionType transactionType
     *
     * @return $this
     */
    public function setTransactionType(?\SynergiTech\Sage\Model\Base $transactionType): static
    {
        if (is_null($transactionType)) {
            throw new InvalidArgumentException('non-nullable transactionType cannot be null');
        }
        $this->container['transactionType'] = $transactionType;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \SynergiTech\Sage\Model\Contact|null
     */
    public function getContact(): ?\SynergiTech\Sage\Model\Contact
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \SynergiTech\Sage\Model\Contact|null $contact contact
     *
     * @return $this
     */
    public function setContact(?\SynergiTech\Sage\Model\Contact $contact): static
    {
        if (is_null($contact)) {
            throw new InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return \DateTime|null
     */
    public function getDeletedAt(): ?\DateTime
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param \DateTime|null $deletedAt The datetime when the item was deleted
     *
     * @return $this
     */
    public function setDeletedAt(?\DateTime $deletedAt): static
    {
        if (is_null($deletedAt)) {
            throw new InvalidArgumentException('non-nullable deletedAt cannot be null');
        }
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }

    /**
     * Gets contactName
     *
     * @return string|null
     */
    public function getContactName(): ?string
    {
        return $this->container['contactName'];
    }

    /**
     * Sets contactName
     *
     * @param string|null $contactName The name of the contact when the invoice was created
     *
     * @return $this
     */
    public function setContactName(?string $contactName): static
    {
        if (is_null($contactName)) {
            throw new InvalidArgumentException('non-nullable contactName cannot be null');
        }
        if ((mb_strlen($contactName) > 255)) {
            throw new InvalidArgumentException('invalid length for $contactName when calling PurchaseCorrectiveInvoice., must be smaller than or equal to 255.');
        }

        $this->container['contactName'] = $contactName;

        return $this;
    }

    /**
     * Gets contactReference
     *
     * @return string|null
     */
    public function getContactReference(): ?string
    {
        return $this->container['contactReference'];
    }

    /**
     * Sets contactReference
     *
     * @param string|null $contactReference The reference of the contact when the invoice was created
     *
     * @return $this
     */
    public function setContactReference(?string $contactReference): static
    {
        if (is_null($contactReference)) {
            throw new InvalidArgumentException('non-nullable contactReference cannot be null');
        }
        if ((mb_strlen($contactReference) > 255)) {
            throw new InvalidArgumentException('invalid length for $contactReference when calling PurchaseCorrectiveInvoice., must be smaller than or equal to 255.');
        }

        $this->container['contactReference'] = $contactReference;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate(): ?\DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The date of the invoice
     *
     * @return $this
     */
    public function setDate(?\DateTime $date): static
    {
        if (is_null($date)) {
            throw new InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime|null
     */
    public function getDueDate(): ?\DateTime
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime|null $dueDate The due date of the invoice
     *
     * @return $this
     */
    public function setDueDate(?\DateTime $dueDate): static
    {
        if (is_null($dueDate)) {
            throw new InvalidArgumentException('non-nullable dueDate cannot be null');
        }
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference The reference for the invoice
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        if ((mb_strlen($reference) > 25)) {
            throw new InvalidArgumentException('invalid length for $reference when calling PurchaseCorrectiveInvoice., must be smaller than or equal to 25.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets vendorReference
     *
     * @return string|null
     */
    public function getVendorReference(): ?string
    {
        return $this->container['vendorReference'];
    }

    /**
     * Sets vendorReference
     *
     * @param string|null $vendorReference The vendor reference for the invoice
     *
     * @return $this
     */
    public function setVendorReference(?string $vendorReference): static
    {
        if (is_null($vendorReference)) {
            throw new InvalidArgumentException('non-nullable vendorReference cannot be null');
        }
        if ((mb_strlen($vendorReference) > 31)) {
            throw new InvalidArgumentException('invalid length for $vendorReference when calling PurchaseCorrectiveInvoice., must be smaller than or equal to 31.');
        }

        $this->container['vendorReference'] = $vendorReference;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes(): ?string
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Invoice notes
     *
     * @return $this
     */
    public function setNotes(?string $notes): static
    {
        if (is_null($notes)) {
            throw new InvalidArgumentException('non-nullable notes cannot be null');
        }
        if ((mb_strlen($notes) > 2000)) {
            throw new InvalidArgumentException('invalid length for $notes when calling PurchaseCorrectiveInvoice., must be smaller than or equal to 2000.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets totalQuantity
     *
     * @return float|null
     */
    public function getTotalQuantity(): ?float
    {
        return $this->container['totalQuantity'];
    }

    /**
     * Sets totalQuantity
     *
     * @param float|null $totalQuantity The total quantity of the invoice
     *
     * @return $this
     */
    public function setTotalQuantity(?float $totalQuantity): static
    {
        if (is_null($totalQuantity)) {
            throw new InvalidArgumentException('non-nullable totalQuantity cannot be null');
        }
        $this->container['totalQuantity'] = $totalQuantity;

        return $this;
    }

    /**
     * Gets netAmount
     *
     * @return float|null
     */
    public function getNetAmount(): ?float
    {
        return $this->container['netAmount'];
    }

    /**
     * Sets netAmount
     *
     * @param float|null $netAmount The net amount of the invoice
     *
     * @return $this
     */
    public function setNetAmount(?float $netAmount): static
    {
        if (is_null($netAmount)) {
            throw new InvalidArgumentException('non-nullable netAmount cannot be null');
        }
        $this->container['netAmount'] = $netAmount;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return float|null
     */
    public function getTaxAmount(): ?float
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param float|null $taxAmount The tax amount of the invoice
     *
     * @return $this
     */
    public function setTaxAmount(?float $taxAmount): static
    {
        if (is_null($taxAmount)) {
            throw new InvalidArgumentException('non-nullable taxAmount cannot be null');
        }
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets totalAmount
     *
     * @return float|null
     */
    public function getTotalAmount(): ?float
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     *
     * @param float|null $totalAmount The total amount of the invoice
     *
     * @return $this
     */
    public function setTotalAmount(?float $totalAmount): static
    {
        if (is_null($totalAmount)) {
            throw new InvalidArgumentException('non-nullable totalAmount cannot be null');
        }
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets paymentsAllocationsTotalAmount
     *
     * @return float|null
     */
    public function getPaymentsAllocationsTotalAmount(): ?float
    {
        return $this->container['paymentsAllocationsTotalAmount'];
    }

    /**
     * Sets paymentsAllocationsTotalAmount
     *
     * @param float|null $paymentsAllocationsTotalAmount The total amount of all payments and allocations
     *
     * @return $this
     */
    public function setPaymentsAllocationsTotalAmount(?float $paymentsAllocationsTotalAmount): static
    {
        if (is_null($paymentsAllocationsTotalAmount)) {
            throw new InvalidArgumentException('non-nullable paymentsAllocationsTotalAmount cannot be null');
        }
        $this->container['paymentsAllocationsTotalAmount'] = $paymentsAllocationsTotalAmount;

        return $this;
    }

    /**
     * Gets paymentsAllocationsTotalDiscount
     *
     * @return float|null
     */
    public function getPaymentsAllocationsTotalDiscount(): ?float
    {
        return $this->container['paymentsAllocationsTotalDiscount'];
    }

    /**
     * Sets paymentsAllocationsTotalDiscount
     *
     * @param float|null $paymentsAllocationsTotalDiscount The total discount of all payments and allocations
     *
     * @return $this
     */
    public function setPaymentsAllocationsTotalDiscount(?float $paymentsAllocationsTotalDiscount): static
    {
        if (is_null($paymentsAllocationsTotalDiscount)) {
            throw new InvalidArgumentException('non-nullable paymentsAllocationsTotalDiscount cannot be null');
        }
        $this->container['paymentsAllocationsTotalDiscount'] = $paymentsAllocationsTotalDiscount;

        return $this;
    }

    /**
     * Gets totalPaid
     *
     * @return float|null
     */
    public function getTotalPaid(): ?float
    {
        return $this->container['totalPaid'];
    }

    /**
     * Sets totalPaid
     *
     * @param float|null $totalPaid The total paid amount of the invoice including any payments, allocations and discounts
     *
     * @return $this
     */
    public function setTotalPaid(?float $totalPaid): static
    {
        if (is_null($totalPaid)) {
            throw new InvalidArgumentException('non-nullable totalPaid cannot be null');
        }
        $this->container['totalPaid'] = $totalPaid;

        return $this;
    }

    /**
     * Gets outstandingAmount
     *
     * @return float|null
     */
    public function getOutstandingAmount(): ?float
    {
        return $this->container['outstandingAmount'];
    }

    /**
     * Sets outstandingAmount
     *
     * @param float|null $outstandingAmount The outstanding amount of the invoice
     *
     * @return $this
     */
    public function setOutstandingAmount(?float $outstandingAmount): static
    {
        if (is_null($outstandingAmount)) {
            throw new InvalidArgumentException('non-nullable outstandingAmount cannot be null');
        }
        $this->container['outstandingAmount'] = $outstandingAmount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getCurrency(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \SynergiTech\Sage\Model\Base|null $currency currency
     *
     * @return $this
     */
    public function setCurrency(?\SynergiTech\Sage\Model\Base $currency): static
    {
        if (is_null($currency)) {
            throw new InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets exchangeRate
     *
     * @return float|null
     */
    public function getExchangeRate(): ?float
    {
        return $this->container['exchangeRate'];
    }

    /**
     * Sets exchangeRate
     *
     * @param float|null $exchangeRate The exchange rate for the invoice
     *
     * @return $this
     */
    public function setExchangeRate(?float $exchangeRate): static
    {
        if (is_null($exchangeRate)) {
            throw new InvalidArgumentException('non-nullable exchangeRate cannot be null');
        }
        $this->container['exchangeRate'] = $exchangeRate;

        return $this;
    }

    /**
     * Gets inverseExchangeRate
     *
     * @return string|null
     */
    public function getInverseExchangeRate(): ?string
    {
        return $this->container['inverseExchangeRate'];
    }

    /**
     * Sets inverseExchangeRate
     *
     * @param string|null $inverseExchangeRate The inverse exchange rate for the credit note
     *
     * @return $this
     */
    public function setInverseExchangeRate(?string $inverseExchangeRate): static
    {
        if (is_null($inverseExchangeRate)) {
            throw new InvalidArgumentException('non-nullable inverseExchangeRate cannot be null');
        }
        $this->container['inverseExchangeRate'] = $inverseExchangeRate;

        return $this;
    }

    /**
     * Gets baseCurrencyNetAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyNetAmount(): ?float
    {
        return $this->container['baseCurrencyNetAmount'];
    }

    /**
     * Sets baseCurrencyNetAmount
     *
     * @param float|null $baseCurrencyNetAmount The net amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyNetAmount(?float $baseCurrencyNetAmount): static
    {
        if (is_null($baseCurrencyNetAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyNetAmount cannot be null');
        }
        $this->container['baseCurrencyNetAmount'] = $baseCurrencyNetAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTaxAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTaxAmount(): ?float
    {
        return $this->container['baseCurrencyTaxAmount'];
    }

    /**
     * Sets baseCurrencyTaxAmount
     *
     * @param float|null $baseCurrencyTaxAmount The tax amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTaxAmount(?float $baseCurrencyTaxAmount): static
    {
        if (is_null($baseCurrencyTaxAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTaxAmount cannot be null');
        }
        $this->container['baseCurrencyTaxAmount'] = $baseCurrencyTaxAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyTotalAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyTotalAmount(): ?float
    {
        return $this->container['baseCurrencyTotalAmount'];
    }

    /**
     * Sets baseCurrencyTotalAmount
     *
     * @param float|null $baseCurrencyTotalAmount The total amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTotalAmount(?float $baseCurrencyTotalAmount): static
    {
        if (is_null($baseCurrencyTotalAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyTotalAmount cannot be null');
        }
        $this->container['baseCurrencyTotalAmount'] = $baseCurrencyTotalAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyOutstandingAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyOutstandingAmount(): ?float
    {
        return $this->container['baseCurrencyOutstandingAmount'];
    }

    /**
     * Sets baseCurrencyOutstandingAmount
     *
     * @param float|null $baseCurrencyOutstandingAmount The outstanding amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyOutstandingAmount(?float $baseCurrencyOutstandingAmount): static
    {
        if (is_null($baseCurrencyOutstandingAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyOutstandingAmount cannot be null');
        }
        $this->container['baseCurrencyOutstandingAmount'] = $baseCurrencyOutstandingAmount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getStatus(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SynergiTech\Sage\Model\Base|null $status status
     *
     * @return $this
     */
    public function setStatus(?\SynergiTech\Sage\Model\Base $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets voidReason
     *
     * @return string|null
     */
    public function getVoidReason(): ?string
    {
        return $this->container['voidReason'];
    }

    /**
     * Sets voidReason
     *
     * @param string|null $voidReason The reason the invoice was voided
     *
     * @return $this
     */
    public function setVoidReason(?string $voidReason): static
    {
        if (is_null($voidReason)) {
            throw new InvalidArgumentException('non-nullable voidReason cannot be null');
        }
        if ((mb_strlen($voidReason) > 255)) {
            throw new InvalidArgumentException('invalid length for $voidReason when calling PurchaseCorrectiveInvoice., must be smaller than or equal to 255.');
        }

        $this->container['voidReason'] = $voidReason;

        return $this;
    }

    /**
     * Gets invoiceLines
     *
     * @return \SynergiTech\Sage\Model\PurchaseInvoiceLineItem[]|null
     */
    public function getInvoiceLines(): ?array
    {
        return $this->container['invoiceLines'];
    }

    /**
     * Sets invoiceLines
     *
     * @param \SynergiTech\Sage\Model\PurchaseInvoiceLineItem[]|null $invoiceLines The invoice lines of the invoice
     *
     * @return $this
     */
    public function setInvoiceLines(?array $invoiceLines): static
    {
        if (is_null($invoiceLines)) {
            throw new InvalidArgumentException('non-nullable invoiceLines cannot be null');
        }
        $this->container['invoiceLines'] = $invoiceLines;

        return $this;
    }

    /**
     * Gets taxAnalysis
     *
     * @return \SynergiTech\Sage\Model\ArtefactTaxAnalysis[]|null
     */
    public function getTaxAnalysis(): ?array
    {
        return $this->container['taxAnalysis'];
    }

    /**
     * Sets taxAnalysis
     *
     * @param \SynergiTech\Sage\Model\ArtefactTaxAnalysis[]|null $taxAnalysis The invoice tax analysis (Optional for Spain, restricted for all other regions)
     *
     * @return $this
     */
    public function setTaxAnalysis(?array $taxAnalysis): static
    {
        if (is_null($taxAnalysis)) {
            throw new InvalidArgumentException('non-nullable taxAnalysis cannot be null');
        }
        $this->container['taxAnalysis'] = $taxAnalysis;

        return $this;
    }

    /**
     * Gets detailedTaxAnalysis
     *
     * @return \SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysis|null
     */
    public function getDetailedTaxAnalysis(): ?\SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysis
    {
        return $this->container['detailedTaxAnalysis'];
    }

    /**
     * Sets detailedTaxAnalysis
     *
     * @param \SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysis|null $detailedTaxAnalysis detailedTaxAnalysis
     *
     * @return $this
     */
    public function setDetailedTaxAnalysis(?\SynergiTech\Sage\Model\ArtefactDetailedTaxAnalysis $detailedTaxAnalysis): static
    {
        if (is_null($detailedTaxAnalysis)) {
            throw new InvalidArgumentException('non-nullable detailedTaxAnalysis cannot be null');
        }
        $this->container['detailedTaxAnalysis'] = $detailedTaxAnalysis;

        return $this;
    }

    /**
     * Gets paymentsAllocations
     *
     * @return \SynergiTech\Sage\Model\PaymentAllocation[]|null
     */
    public function getPaymentsAllocations(): ?array
    {
        return $this->container['paymentsAllocations'];
    }

    /**
     * Sets paymentsAllocations
     *
     * @param \SynergiTech\Sage\Model\PaymentAllocation[]|null $paymentsAllocations The associated payments and allocations
     *
     * @return $this
     */
    public function setPaymentsAllocations(?array $paymentsAllocations): static
    {
        if (is_null($paymentsAllocations)) {
            throw new InvalidArgumentException('non-nullable paymentsAllocations cannot be null');
        }
        $this->container['paymentsAllocations'] = $paymentsAllocations;

        return $this;
    }

    /**
     * Gets lastPaid
     *
     * @return \DateTime|null
     */
    public function getLastPaid(): ?\DateTime
    {
        return $this->container['lastPaid'];
    }

    /**
     * Sets lastPaid
     *
     * @param \DateTime|null $lastPaid The date of the last payment
     *
     * @return $this
     */
    public function setLastPaid(?\DateTime $lastPaid): static
    {
        if (is_null($lastPaid)) {
            throw new InvalidArgumentException('non-nullable lastPaid cannot be null');
        }
        $this->container['lastPaid'] = $lastPaid;

        return $this;
    }

    /**
     * Gets withholdingTaxRate
     *
     * @return float|null
     */
    public function getWithholdingTaxRate(): ?float
    {
        return $this->container['withholdingTaxRate'];
    }

    /**
     * Sets withholdingTaxRate
     *
     * @param float|null $withholdingTaxRate IRPF withheld Tax Rate (Spain only)
     *
     * @return $this
     */
    public function setWithholdingTaxRate(?float $withholdingTaxRate): static
    {
        if (is_null($withholdingTaxRate)) {
            throw new InvalidArgumentException('non-nullable withholdingTaxRate cannot be null');
        }
        $this->container['withholdingTaxRate'] = $withholdingTaxRate;

        return $this;
    }

    /**
     * Gets withholdingTaxAmount
     *
     * @return float|null
     */
    public function getWithholdingTaxAmount(): ?float
    {
        return $this->container['withholdingTaxAmount'];
    }

    /**
     * Sets withholdingTaxAmount
     *
     * @param float|null $withholdingTaxAmount IRPF withheld Tax Amount (Spain only)
     *
     * @return $this
     */
    public function setWithholdingTaxAmount(?float $withholdingTaxAmount): static
    {
        if (is_null($withholdingTaxAmount)) {
            throw new InvalidArgumentException('non-nullable withholdingTaxAmount cannot be null');
        }
        $this->container['withholdingTaxAmount'] = $withholdingTaxAmount;

        return $this;
    }

    /**
     * Gets baseCurrencyWithholdingTaxAmount
     *
     * @return float|null
     */
    public function getBaseCurrencyWithholdingTaxAmount(): ?float
    {
        return $this->container['baseCurrencyWithholdingTaxAmount'];
    }

    /**
     * Sets baseCurrencyWithholdingTaxAmount
     *
     * @param float|null $baseCurrencyWithholdingTaxAmount IRPF withheld Tax Amount (Spain only) in the base currency
     *
     * @return $this
     */
    public function setBaseCurrencyWithholdingTaxAmount(?float $baseCurrencyWithholdingTaxAmount): static
    {
        if (is_null($baseCurrencyWithholdingTaxAmount)) {
            throw new InvalidArgumentException('non-nullable baseCurrencyWithholdingTaxAmount cannot be null');
        }
        $this->container['baseCurrencyWithholdingTaxAmount'] = $baseCurrencyWithholdingTaxAmount;

        return $this;
    }

    /**
     * Gets originalInvoice
     *
     * @return \SynergiTech\Sage\Model\Generic|null
     */
    public function getOriginalInvoice(): ?\SynergiTech\Sage\Model\Generic
    {
        return $this->container['originalInvoice'];
    }

    /**
     * Sets originalInvoice
     *
     * @param \SynergiTech\Sage\Model\Generic|null $originalInvoice originalInvoice
     *
     * @return $this
     */
    public function setOriginalInvoice(?\SynergiTech\Sage\Model\Generic $originalInvoice): static
    {
        if (is_null($originalInvoice)) {
            throw new InvalidArgumentException('non-nullable originalInvoice cannot be null');
        }
        $this->container['originalInvoice'] = $originalInvoice;

        return $this;
    }

    /**
     * Gets originalInvoiceNumber
     *
     * @return string|null
     */
    public function getOriginalInvoiceNumber(): ?string
    {
        return $this->container['originalInvoiceNumber'];
    }

    /**
     * Sets originalInvoiceNumber
     *
     * @param string|null $originalInvoiceNumber The number relating to the original invoice (Spain only)
     *
     * @return $this
     */
    public function setOriginalInvoiceNumber(?string $originalInvoiceNumber): static
    {
        if (is_null($originalInvoiceNumber)) {
            throw new InvalidArgumentException('non-nullable originalInvoiceNumber cannot be null');
        }
        $this->container['originalInvoiceNumber'] = $originalInvoiceNumber;

        return $this;
    }

    /**
     * Gets originalInvoiceDate
     *
     * @return string|null
     */
    public function getOriginalInvoiceDate(): ?string
    {
        return $this->container['originalInvoiceDate'];
    }

    /**
     * Sets originalInvoiceDate
     *
     * @param string|null $originalInvoiceDate The Invoice date relating to the original invoice (Spain only)
     *
     * @return $this
     */
    public function setOriginalInvoiceDate(?string $originalInvoiceDate): static
    {
        if (is_null($originalInvoiceDate)) {
            throw new InvalidArgumentException('non-nullable originalInvoiceDate cannot be null');
        }
        $this->container['originalInvoiceDate'] = $originalInvoiceDate;

        return $this;
    }

    /**
     * Gets taxReconciled
     *
     * @return bool|null
     */
    public function getTaxReconciled(): ?bool
    {
        return $this->container['taxReconciled'];
    }

    /**
     * Sets taxReconciled
     *
     * @param bool|null $taxReconciled Indicates if the artefact is tax reconciled or not.
     *
     * @return $this
     */
    public function setTaxReconciled(?bool $taxReconciled): static
    {
        if (is_null($taxReconciled)) {
            throw new InvalidArgumentException('non-nullable taxReconciled cannot be null');
        }
        $this->container['taxReconciled'] = $taxReconciled;

        return $this;
    }

    /**
     * Gets import
     *
     * @return bool|null
     */
    public function getImport(): ?bool
    {
        return $this->container['import'];
    }

    /**
     * Sets import
     *
     * @param bool|null $import Indicates whether import rules are applied to the artefact. Only used for Accounting businesses, where the vendor is flagged as importer.
     *
     * @return $this
     */
    public function setImport(?bool $import): static
    {
        if (is_null($import)) {
            throw new InvalidArgumentException('non-nullable import cannot be null');
        }
        $this->container['import'] = $import;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


