<?php
/**
 * Product
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Sage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Sage\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Standard: ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª  ### Access Control Restrictions  Requires the authenticated user to have any mentioned role in one of the listed areas: * Area: &#x60;Products &amp; Services&#x60;: Restricted Access, Full Access
 * @package  SynergiTech\Sage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Product implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'legacyId' => 'int',
        'id' => 'string',
        'displayedAs' => 'string',
        'path' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'deletedAt' => '\DateTime',
        'deletable' => 'bool',
        'deactivatable' => 'bool',
        'usedOnRecurringInvoice' => 'bool',
        'itemCode' => 'string',
        'description' => 'string',
        'notes' => 'string',
        'salesLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'salesTaxRate' => '\SynergiTech\Sage\Model\Base',
        'purchaseLedgerAccount' => '\SynergiTech\Sage\Model\Base',
        'usualSupplier' => '\SynergiTech\Sage\Model\Contact',
        'purchaseTaxRate' => '\SynergiTech\Sage\Model\Base',
        'costPrice' => 'float',
        'salesPrices' => '\SynergiTech\Sage\Model\SalesPrice[]',
        'sourceGuid' => 'string',
        'purchaseDescription' => 'string',
        'active' => 'bool',
        'catalogItemType' => '\SynergiTech\Sage\Model\Base'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'legacyId' => 'int32',
        'id' => null,
        'displayedAs' => null,
        'path' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'deletedAt' => 'date-time',
        'deletable' => null,
        'deactivatable' => null,
        'usedOnRecurringInvoice' => null,
        'itemCode' => null,
        'description' => null,
        'notes' => null,
        'salesLedgerAccount' => null,
        'salesTaxRate' => null,
        'purchaseLedgerAccount' => null,
        'usualSupplier' => null,
        'purchaseTaxRate' => null,
        'costPrice' => 'double',
        'salesPrices' => null,
        'sourceGuid' => null,
        'purchaseDescription' => null,
        'active' => null,
        'catalogItemType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'legacyId' => false,
        'id' => false,
        'displayedAs' => false,
        'path' => false,
        'createdAt' => false,
        'updatedAt' => false,
        'deletedAt' => false,
        'deletable' => false,
        'deactivatable' => false,
        'usedOnRecurringInvoice' => false,
        'itemCode' => false,
        'description' => false,
        'notes' => false,
        'salesLedgerAccount' => false,
        'salesTaxRate' => false,
        'purchaseLedgerAccount' => false,
        'usualSupplier' => false,
        'purchaseTaxRate' => false,
        'costPrice' => false,
        'salesPrices' => false,
        'sourceGuid' => false,
        'purchaseDescription' => false,
        'active' => false,
        'catalogItemType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'legacyId' => 'legacy_id',
        'id' => 'id',
        'displayedAs' => 'displayed_as',
        'path' => '$path',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'deletedAt' => 'deleted_at',
        'deletable' => 'deletable',
        'deactivatable' => 'deactivatable',
        'usedOnRecurringInvoice' => 'used_on_recurring_invoice',
        'itemCode' => 'item_code',
        'description' => 'description',
        'notes' => 'notes',
        'salesLedgerAccount' => 'sales_ledger_account',
        'salesTaxRate' => 'sales_tax_rate',
        'purchaseLedgerAccount' => 'purchase_ledger_account',
        'usualSupplier' => 'usual_supplier',
        'purchaseTaxRate' => 'purchase_tax_rate',
        'costPrice' => 'cost_price',
        'salesPrices' => 'sales_prices',
        'sourceGuid' => 'source_guid',
        'purchaseDescription' => 'purchase_description',
        'active' => 'active',
        'catalogItemType' => 'catalog_item_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'legacyId' => 'setLegacyId',
        'id' => 'setId',
        'displayedAs' => 'setDisplayedAs',
        'path' => 'setPath',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'deletedAt' => 'setDeletedAt',
        'deletable' => 'setDeletable',
        'deactivatable' => 'setDeactivatable',
        'usedOnRecurringInvoice' => 'setUsedOnRecurringInvoice',
        'itemCode' => 'setItemCode',
        'description' => 'setDescription',
        'notes' => 'setNotes',
        'salesLedgerAccount' => 'setSalesLedgerAccount',
        'salesTaxRate' => 'setSalesTaxRate',
        'purchaseLedgerAccount' => 'setPurchaseLedgerAccount',
        'usualSupplier' => 'setUsualSupplier',
        'purchaseTaxRate' => 'setPurchaseTaxRate',
        'costPrice' => 'setCostPrice',
        'salesPrices' => 'setSalesPrices',
        'sourceGuid' => 'setSourceGuid',
        'purchaseDescription' => 'setPurchaseDescription',
        'active' => 'setActive',
        'catalogItemType' => 'setCatalogItemType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'legacyId' => 'getLegacyId',
        'id' => 'getId',
        'displayedAs' => 'getDisplayedAs',
        'path' => 'getPath',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'deletedAt' => 'getDeletedAt',
        'deletable' => 'getDeletable',
        'deactivatable' => 'getDeactivatable',
        'usedOnRecurringInvoice' => 'getUsedOnRecurringInvoice',
        'itemCode' => 'getItemCode',
        'description' => 'getDescription',
        'notes' => 'getNotes',
        'salesLedgerAccount' => 'getSalesLedgerAccount',
        'salesTaxRate' => 'getSalesTaxRate',
        'purchaseLedgerAccount' => 'getPurchaseLedgerAccount',
        'usualSupplier' => 'getUsualSupplier',
        'purchaseTaxRate' => 'getPurchaseTaxRate',
        'costPrice' => 'getCostPrice',
        'salesPrices' => 'getSalesPrices',
        'sourceGuid' => 'getSourceGuid',
        'purchaseDescription' => 'getPurchaseDescription',
        'active' => 'getActive',
        'catalogItemType' => 'getCatalogItemType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('legacyId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('displayedAs', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('deletedAt', $data ?? [], null);
        $this->setIfExists('deletable', $data ?? [], null);
        $this->setIfExists('deactivatable', $data ?? [], null);
        $this->setIfExists('usedOnRecurringInvoice', $data ?? [], null);
        $this->setIfExists('itemCode', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('salesLedgerAccount', $data ?? [], null);
        $this->setIfExists('salesTaxRate', $data ?? [], null);
        $this->setIfExists('purchaseLedgerAccount', $data ?? [], null);
        $this->setIfExists('usualSupplier', $data ?? [], null);
        $this->setIfExists('purchaseTaxRate', $data ?? [], null);
        $this->setIfExists('costPrice', $data ?? [], null);
        $this->setIfExists('salesPrices', $data ?? [], null);
        $this->setIfExists('sourceGuid', $data ?? [], null);
        $this->setIfExists('purchaseDescription', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('catalogItemType', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['itemCode']) && (mb_strlen($this->container['itemCode']) > 255)) {
            $invalidProperties[] = "invalid value for 'itemCode', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) > 500)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['sourceGuid']) && (mb_strlen($this->container['sourceGuid']) > 255)) {
            $invalidProperties[] = "invalid value for 'sourceGuid', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['purchaseDescription']) && (mb_strlen($this->container['purchaseDescription']) > 250)) {
            $invalidProperties[] = "invalid value for 'purchaseDescription', the character length must be smaller than or equal to 250.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacyId
     *
     * @return int|null
     */
    public function getLegacyId(): ?int
    {
        return $this->container['legacyId'];
    }

    /**
     * Sets legacyId
     *
     * @param int|null $legacyId The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId(?int $legacyId): static
    {
        if (is_null($legacyId)) {
            throw new InvalidArgumentException('non-nullable legacyId cannot be null');
        }
        $this->container['legacyId'] = $legacyId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayedAs
     *
     * @return string|null
     */
    public function getDisplayedAs(): ?string
    {
        return $this->container['displayedAs'];
    }

    /**
     * Sets displayedAs
     *
     * @param string|null $displayedAs The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs(?string $displayedAs): static
    {
        if (is_null($displayedAs)) {
            throw new InvalidArgumentException('non-nullable displayedAs cannot be null');
        }
        $this->container['displayedAs'] = $displayedAs;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath(): ?string
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The API path for the resource
     *
     * @return $this
     */
    public function setPath(?string $path): static
    {
        if (is_null($path)) {
            throw new InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt The datetime when the item was created
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return \DateTime|null
     */
    public function getDeletedAt(): ?\DateTime
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param \DateTime|null $deletedAt The datetime when the item was deleted
     *
     * @return $this
     */
    public function setDeletedAt(?\DateTime $deletedAt): static
    {
        if (is_null($deletedAt)) {
            throw new InvalidArgumentException('non-nullable deletedAt cannot be null');
        }
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }

    /**
     * Gets deletable
     *
     * @return bool|null
     */
    public function getDeletable(): ?bool
    {
        return $this->container['deletable'];
    }

    /**
     * Sets deletable
     *
     * @param bool|null $deletable Indicates whether the product can be deleted
     *
     * @return $this
     */
    public function setDeletable(?bool $deletable): static
    {
        if (is_null($deletable)) {
            throw new InvalidArgumentException('non-nullable deletable cannot be null');
        }
        $this->container['deletable'] = $deletable;

        return $this;
    }

    /**
     * Gets deactivatable
     *
     * @return bool|null
     */
    public function getDeactivatable(): ?bool
    {
        return $this->container['deactivatable'];
    }

    /**
     * Sets deactivatable
     *
     * @param bool|null $deactivatable Indicates whether the product can be deactivated
     *
     * @return $this
     */
    public function setDeactivatable(?bool $deactivatable): static
    {
        if (is_null($deactivatable)) {
            throw new InvalidArgumentException('non-nullable deactivatable cannot be null');
        }
        $this->container['deactivatable'] = $deactivatable;

        return $this;
    }

    /**
     * Gets usedOnRecurringInvoice
     *
     * @return bool|null
     */
    public function getUsedOnRecurringInvoice(): ?bool
    {
        return $this->container['usedOnRecurringInvoice'];
    }

    /**
     * Sets usedOnRecurringInvoice
     *
     * @param bool|null $usedOnRecurringInvoice Indicates whether the product has been used on a recurring invoice
     *
     * @return $this
     */
    public function setUsedOnRecurringInvoice(?bool $usedOnRecurringInvoice): static
    {
        if (is_null($usedOnRecurringInvoice)) {
            throw new InvalidArgumentException('non-nullable usedOnRecurringInvoice cannot be null');
        }
        $this->container['usedOnRecurringInvoice'] = $usedOnRecurringInvoice;

        return $this;
    }

    /**
     * Gets itemCode
     *
     * @return string|null
     */
    public function getItemCode(): ?string
    {
        return $this->container['itemCode'];
    }

    /**
     * Sets itemCode
     *
     * @param string|null $itemCode The item code for the product
     *
     * @return $this
     */
    public function setItemCode(?string $itemCode): static
    {
        if (is_null($itemCode)) {
            throw new InvalidArgumentException('non-nullable itemCode cannot be null');
        }
        if ((mb_strlen($itemCode) > 255)) {
            throw new InvalidArgumentException('invalid length for $itemCode when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['itemCode'] = $itemCode;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The product description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new InvalidArgumentException('invalid length for $description when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes(): ?string
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes The notes for the product
     *
     * @return $this
     */
    public function setNotes(?string $notes): static
    {
        if (is_null($notes)) {
            throw new InvalidArgumentException('non-nullable notes cannot be null');
        }
        if ((mb_strlen($notes) > 500)) {
            throw new InvalidArgumentException('invalid length for $notes when calling Product., must be smaller than or equal to 500.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets salesLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getSalesLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['salesLedgerAccount'];
    }

    /**
     * Sets salesLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $salesLedgerAccount salesLedgerAccount
     *
     * @return $this
     */
    public function setSalesLedgerAccount(?\SynergiTech\Sage\Model\Base $salesLedgerAccount): static
    {
        if (is_null($salesLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable salesLedgerAccount cannot be null');
        }
        $this->container['salesLedgerAccount'] = $salesLedgerAccount;

        return $this;
    }

    /**
     * Gets salesTaxRate
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getSalesTaxRate(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['salesTaxRate'];
    }

    /**
     * Sets salesTaxRate
     *
     * @param \SynergiTech\Sage\Model\Base|null $salesTaxRate salesTaxRate
     *
     * @return $this
     */
    public function setSalesTaxRate(?\SynergiTech\Sage\Model\Base $salesTaxRate): static
    {
        if (is_null($salesTaxRate)) {
            throw new InvalidArgumentException('non-nullable salesTaxRate cannot be null');
        }
        $this->container['salesTaxRate'] = $salesTaxRate;

        return $this;
    }

    /**
     * Gets purchaseLedgerAccount
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getPurchaseLedgerAccount(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['purchaseLedgerAccount'];
    }

    /**
     * Sets purchaseLedgerAccount
     *
     * @param \SynergiTech\Sage\Model\Base|null $purchaseLedgerAccount purchaseLedgerAccount
     *
     * @return $this
     */
    public function setPurchaseLedgerAccount(?\SynergiTech\Sage\Model\Base $purchaseLedgerAccount): static
    {
        if (is_null($purchaseLedgerAccount)) {
            throw new InvalidArgumentException('non-nullable purchaseLedgerAccount cannot be null');
        }
        $this->container['purchaseLedgerAccount'] = $purchaseLedgerAccount;

        return $this;
    }

    /**
     * Gets usualSupplier
     *
     * @return \SynergiTech\Sage\Model\Contact|null
     */
    public function getUsualSupplier(): ?\SynergiTech\Sage\Model\Contact
    {
        return $this->container['usualSupplier'];
    }

    /**
     * Sets usualSupplier
     *
     * @param \SynergiTech\Sage\Model\Contact|null $usualSupplier usualSupplier
     *
     * @return $this
     */
    public function setUsualSupplier(?\SynergiTech\Sage\Model\Contact $usualSupplier): static
    {
        if (is_null($usualSupplier)) {
            throw new InvalidArgumentException('non-nullable usualSupplier cannot be null');
        }
        $this->container['usualSupplier'] = $usualSupplier;

        return $this;
    }

    /**
     * Gets purchaseTaxRate
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getPurchaseTaxRate(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['purchaseTaxRate'];
    }

    /**
     * Sets purchaseTaxRate
     *
     * @param \SynergiTech\Sage\Model\Base|null $purchaseTaxRate purchaseTaxRate
     *
     * @return $this
     */
    public function setPurchaseTaxRate(?\SynergiTech\Sage\Model\Base $purchaseTaxRate): static
    {
        if (is_null($purchaseTaxRate)) {
            throw new InvalidArgumentException('non-nullable purchaseTaxRate cannot be null');
        }
        $this->container['purchaseTaxRate'] = $purchaseTaxRate;

        return $this;
    }

    /**
     * Gets costPrice
     *
     * @return float|null
     */
    public function getCostPrice(): ?float
    {
        return $this->container['costPrice'];
    }

    /**
     * Sets costPrice
     *
     * @param float|null $costPrice The cost price of the product
     *
     * @return $this
     */
    public function setCostPrice(?float $costPrice): static
    {
        if (is_null($costPrice)) {
            throw new InvalidArgumentException('non-nullable costPrice cannot be null');
        }
        $this->container['costPrice'] = $costPrice;

        return $this;
    }

    /**
     * Gets salesPrices
     *
     * @return \SynergiTech\Sage\Model\SalesPrice[]|null
     */
    public function getSalesPrices(): ?array
    {
        return $this->container['salesPrices'];
    }

    /**
     * Sets salesPrices
     *
     * @param \SynergiTech\Sage\Model\SalesPrice[]|null $salesPrices The sales prices for the product
     *
     * @return $this
     */
    public function setSalesPrices(?array $salesPrices): static
    {
        if (is_null($salesPrices)) {
            throw new InvalidArgumentException('non-nullable salesPrices cannot be null');
        }
        $this->container['salesPrices'] = $salesPrices;

        return $this;
    }

    /**
     * Gets sourceGuid
     *
     * @return string|null
     */
    public function getSourceGuid(): ?string
    {
        return $this->container['sourceGuid'];
    }

    /**
     * Sets sourceGuid
     *
     * @param string|null $sourceGuid Used when importing products from external sources
     *
     * @return $this
     */
    public function setSourceGuid(?string $sourceGuid): static
    {
        if (is_null($sourceGuid)) {
            throw new InvalidArgumentException('non-nullable sourceGuid cannot be null');
        }
        if ((mb_strlen($sourceGuid) > 255)) {
            throw new InvalidArgumentException('invalid length for $sourceGuid when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['sourceGuid'] = $sourceGuid;

        return $this;
    }

    /**
     * Gets purchaseDescription
     *
     * @return string|null
     */
    public function getPurchaseDescription(): ?string
    {
        return $this->container['purchaseDescription'];
    }

    /**
     * Sets purchaseDescription
     *
     * @param string|null $purchaseDescription The product purchase description
     *
     * @return $this
     */
    public function setPurchaseDescription(?string $purchaseDescription): static
    {
        if (is_null($purchaseDescription)) {
            throw new InvalidArgumentException('non-nullable purchaseDescription cannot be null');
        }
        if ((mb_strlen($purchaseDescription) > 250)) {
            throw new InvalidArgumentException('invalid length for $purchaseDescription when calling Product., must be smaller than or equal to 250.');
        }

        $this->container['purchaseDescription'] = $purchaseDescription;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive(): ?bool
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Indicates whether the product is active
     *
     * @return $this
     */
    public function setActive(?bool $active): static
    {
        if (is_null($active)) {
            throw new InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets catalogItemType
     *
     * @return \SynergiTech\Sage\Model\Base|null
     */
    public function getCatalogItemType(): ?\SynergiTech\Sage\Model\Base
    {
        return $this->container['catalogItemType'];
    }

    /**
     * Sets catalogItemType
     *
     * @param \SynergiTech\Sage\Model\Base|null $catalogItemType catalogItemType
     *
     * @return $this
     */
    public function setCatalogItemType(?\SynergiTech\Sage\Model\Base $catalogItemType): static
    {
        if (is_null($catalogItemType)) {
            throw new InvalidArgumentException('non-nullable catalogItemType cannot be null');
        }
        $this->container['catalogItemType'] = $catalogItemType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


