<?php
/**
 * LedgerAccountsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * LedgerAccountsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LedgerAccountsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getLedgerAccounts
     *
     * Returns all Ledger Accounts
     *
     * @param  \DateTime $updated_or_created_since Format - date-time (as date-time in RFC3339). Use this to limit the response to Ledger Accounts changed since a given date (format: YYYY-MM-DDT(+|-)hh:mm) or date-time (format: YYYY-MM-DDThh:mm:ss(+|-)hh:mm). Inclusive of the passed timestamp. (optional)
     * @param  string $visible_in Use this to limit the response to ledger account types visible in a specific area. Valid values are: banking, sales, expenses, other_payments, other_receipts, journals and reporting (optional)
     * @param  string $not_visible_in Use this to limit the response to ledger account types not visible in a specific area. (optional)
     * @param  bool $show_included_in_chart Use this to limit the response to ledger accounts that are/are not included in the chart (optional)
     * @param  bool $show_control_accounts Use this to limit the response to ledger accounts that are/are not control accounts (optional)
     * @param  string $ledger_account_classification_id Use this to filter by ledger account classification id (optional)
     * @param  bool $show_balance_details Use this to display the balance details for ledger accounts between a date range (requires from_date and to_date). (optional)
     * @param  bool $exclude_deleted_entries Exclude deleted ledger entries. (optional)
     * @param  \DateTime $from_date Format - date-time (as date-time in RFC3339). Calculate balances from this date. (optional)
     * @param  \DateTime $to_date Format - date-time (as date-time in RFC3339). Calculate balances to this date. (optional)
     * @param  string $search Use this to filter by the item code or description (optional)
     * @param  bool $sort_order_from_user_setting Use this to enable ordering ledger accounts according to user settings. Defaulted to &#39;false&#39;. (optional)
     * @param  bool $filter_inactive_bank_accounts Use this to filter inactive bank accounts (optional)
     * @param  bool $show_legacy_id Display the legacy_id for the Ledger Accounts. (optional)
     * @param  int $items_per_page Format - int32. Returns the given number of Ledger Accounts per request. (optional, default to 20)
     * @param  int $page Format - int32. Go to specific page of Ledger Accounts (optional, default to 1)
     * @param  string $attributes Specify the attributes that you want to expose for the Ledger Accounts (expose all attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     * @param  string $ledger_account_type_id Use this to filter by ledger account type id (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LedgerAccountArray
     */
    public function getLedgerAccounts($updated_or_created_since = null, $visible_in = null, $not_visible_in = null, $show_included_in_chart = null, $show_control_accounts = null, $ledger_account_classification_id = null, $show_balance_details = null, $exclude_deleted_entries = null, $from_date = null, $to_date = null, $search = null, $sort_order_from_user_setting = null, $filter_inactive_bank_accounts = null, $show_legacy_id = null, $items_per_page = '20', $page = '1', $attributes = null, $ledger_account_type_id = null)
    {
        list($response) = $this->getLedgerAccountsWithHttpInfo($updated_or_created_since, $visible_in, $not_visible_in, $show_included_in_chart, $show_control_accounts, $ledger_account_classification_id, $show_balance_details, $exclude_deleted_entries, $from_date, $to_date, $search, $sort_order_from_user_setting, $filter_inactive_bank_accounts, $show_legacy_id, $items_per_page, $page, $attributes, $ledger_account_type_id);
        return $response;
    }

    /**
     * Operation getLedgerAccountsWithHttpInfo
     *
     * Returns all Ledger Accounts
     *
     * @param  \DateTime $updated_or_created_since Format - date-time (as date-time in RFC3339). Use this to limit the response to Ledger Accounts changed since a given date (format: YYYY-MM-DDT(+|-)hh:mm) or date-time (format: YYYY-MM-DDThh:mm:ss(+|-)hh:mm). Inclusive of the passed timestamp. (optional)
     * @param  string $visible_in Use this to limit the response to ledger account types visible in a specific area. Valid values are: banking, sales, expenses, other_payments, other_receipts, journals and reporting (optional)
     * @param  string $not_visible_in Use this to limit the response to ledger account types not visible in a specific area. (optional)
     * @param  bool $show_included_in_chart Use this to limit the response to ledger accounts that are/are not included in the chart (optional)
     * @param  bool $show_control_accounts Use this to limit the response to ledger accounts that are/are not control accounts (optional)
     * @param  string $ledger_account_classification_id Use this to filter by ledger account classification id (optional)
     * @param  bool $show_balance_details Use this to display the balance details for ledger accounts between a date range (requires from_date and to_date). (optional)
     * @param  bool $exclude_deleted_entries Exclude deleted ledger entries. (optional)
     * @param  \DateTime $from_date Format - date-time (as date-time in RFC3339). Calculate balances from this date. (optional)
     * @param  \DateTime $to_date Format - date-time (as date-time in RFC3339). Calculate balances to this date. (optional)
     * @param  string $search Use this to filter by the item code or description (optional)
     * @param  bool $sort_order_from_user_setting Use this to enable ordering ledger accounts according to user settings. Defaulted to &#39;false&#39;. (optional)
     * @param  bool $filter_inactive_bank_accounts Use this to filter inactive bank accounts (optional)
     * @param  bool $show_legacy_id Display the legacy_id for the Ledger Accounts. (optional)
     * @param  int $items_per_page Format - int32. Returns the given number of Ledger Accounts per request. (optional, default to 20)
     * @param  int $page Format - int32. Go to specific page of Ledger Accounts (optional, default to 1)
     * @param  string $attributes Specify the attributes that you want to expose for the Ledger Accounts (expose all attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     * @param  string $ledger_account_type_id Use this to filter by ledger account type id (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LedgerAccountArray, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLedgerAccountsWithHttpInfo($updated_or_created_since = null, $visible_in = null, $not_visible_in = null, $show_included_in_chart = null, $show_control_accounts = null, $ledger_account_classification_id = null, $show_balance_details = null, $exclude_deleted_entries = null, $from_date = null, $to_date = null, $search = null, $sort_order_from_user_setting = null, $filter_inactive_bank_accounts = null, $show_legacy_id = null, $items_per_page = '20', $page = '1', $attributes = null, $ledger_account_type_id = null)
    {
        $returnType = '\Swagger\Client\Model\LedgerAccountArray';
        $request = $this->getLedgerAccountsRequest($updated_or_created_since, $visible_in, $not_visible_in, $show_included_in_chart, $show_control_accounts, $ledger_account_classification_id, $show_balance_details, $exclude_deleted_entries, $from_date, $to_date, $search, $sort_order_from_user_setting, $filter_inactive_bank_accounts, $show_legacy_id, $items_per_page, $page, $attributes, $ledger_account_type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LedgerAccountArray',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLedgerAccountsAsync
     *
     * Returns all Ledger Accounts
     *
     * @param  \DateTime $updated_or_created_since Format - date-time (as date-time in RFC3339). Use this to limit the response to Ledger Accounts changed since a given date (format: YYYY-MM-DDT(+|-)hh:mm) or date-time (format: YYYY-MM-DDThh:mm:ss(+|-)hh:mm). Inclusive of the passed timestamp. (optional)
     * @param  string $visible_in Use this to limit the response to ledger account types visible in a specific area. Valid values are: banking, sales, expenses, other_payments, other_receipts, journals and reporting (optional)
     * @param  string $not_visible_in Use this to limit the response to ledger account types not visible in a specific area. (optional)
     * @param  bool $show_included_in_chart Use this to limit the response to ledger accounts that are/are not included in the chart (optional)
     * @param  bool $show_control_accounts Use this to limit the response to ledger accounts that are/are not control accounts (optional)
     * @param  string $ledger_account_classification_id Use this to filter by ledger account classification id (optional)
     * @param  bool $show_balance_details Use this to display the balance details for ledger accounts between a date range (requires from_date and to_date). (optional)
     * @param  bool $exclude_deleted_entries Exclude deleted ledger entries. (optional)
     * @param  \DateTime $from_date Format - date-time (as date-time in RFC3339). Calculate balances from this date. (optional)
     * @param  \DateTime $to_date Format - date-time (as date-time in RFC3339). Calculate balances to this date. (optional)
     * @param  string $search Use this to filter by the item code or description (optional)
     * @param  bool $sort_order_from_user_setting Use this to enable ordering ledger accounts according to user settings. Defaulted to &#39;false&#39;. (optional)
     * @param  bool $filter_inactive_bank_accounts Use this to filter inactive bank accounts (optional)
     * @param  bool $show_legacy_id Display the legacy_id for the Ledger Accounts. (optional)
     * @param  int $items_per_page Format - int32. Returns the given number of Ledger Accounts per request. (optional, default to 20)
     * @param  int $page Format - int32. Go to specific page of Ledger Accounts (optional, default to 1)
     * @param  string $attributes Specify the attributes that you want to expose for the Ledger Accounts (expose all attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     * @param  string $ledger_account_type_id Use this to filter by ledger account type id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLedgerAccountsAsync($updated_or_created_since = null, $visible_in = null, $not_visible_in = null, $show_included_in_chart = null, $show_control_accounts = null, $ledger_account_classification_id = null, $show_balance_details = null, $exclude_deleted_entries = null, $from_date = null, $to_date = null, $search = null, $sort_order_from_user_setting = null, $filter_inactive_bank_accounts = null, $show_legacy_id = null, $items_per_page = '20', $page = '1', $attributes = null, $ledger_account_type_id = null)
    {
        return $this->getLedgerAccountsAsyncWithHttpInfo($updated_or_created_since, $visible_in, $not_visible_in, $show_included_in_chart, $show_control_accounts, $ledger_account_classification_id, $show_balance_details, $exclude_deleted_entries, $from_date, $to_date, $search, $sort_order_from_user_setting, $filter_inactive_bank_accounts, $show_legacy_id, $items_per_page, $page, $attributes, $ledger_account_type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLedgerAccountsAsyncWithHttpInfo
     *
     * Returns all Ledger Accounts
     *
     * @param  \DateTime $updated_or_created_since Format - date-time (as date-time in RFC3339). Use this to limit the response to Ledger Accounts changed since a given date (format: YYYY-MM-DDT(+|-)hh:mm) or date-time (format: YYYY-MM-DDThh:mm:ss(+|-)hh:mm). Inclusive of the passed timestamp. (optional)
     * @param  string $visible_in Use this to limit the response to ledger account types visible in a specific area. Valid values are: banking, sales, expenses, other_payments, other_receipts, journals and reporting (optional)
     * @param  string $not_visible_in Use this to limit the response to ledger account types not visible in a specific area. (optional)
     * @param  bool $show_included_in_chart Use this to limit the response to ledger accounts that are/are not included in the chart (optional)
     * @param  bool $show_control_accounts Use this to limit the response to ledger accounts that are/are not control accounts (optional)
     * @param  string $ledger_account_classification_id Use this to filter by ledger account classification id (optional)
     * @param  bool $show_balance_details Use this to display the balance details for ledger accounts between a date range (requires from_date and to_date). (optional)
     * @param  bool $exclude_deleted_entries Exclude deleted ledger entries. (optional)
     * @param  \DateTime $from_date Format - date-time (as date-time in RFC3339). Calculate balances from this date. (optional)
     * @param  \DateTime $to_date Format - date-time (as date-time in RFC3339). Calculate balances to this date. (optional)
     * @param  string $search Use this to filter by the item code or description (optional)
     * @param  bool $sort_order_from_user_setting Use this to enable ordering ledger accounts according to user settings. Defaulted to &#39;false&#39;. (optional)
     * @param  bool $filter_inactive_bank_accounts Use this to filter inactive bank accounts (optional)
     * @param  bool $show_legacy_id Display the legacy_id for the Ledger Accounts. (optional)
     * @param  int $items_per_page Format - int32. Returns the given number of Ledger Accounts per request. (optional, default to 20)
     * @param  int $page Format - int32. Go to specific page of Ledger Accounts (optional, default to 1)
     * @param  string $attributes Specify the attributes that you want to expose for the Ledger Accounts (expose all attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     * @param  string $ledger_account_type_id Use this to filter by ledger account type id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLedgerAccountsAsyncWithHttpInfo($updated_or_created_since = null, $visible_in = null, $not_visible_in = null, $show_included_in_chart = null, $show_control_accounts = null, $ledger_account_classification_id = null, $show_balance_details = null, $exclude_deleted_entries = null, $from_date = null, $to_date = null, $search = null, $sort_order_from_user_setting = null, $filter_inactive_bank_accounts = null, $show_legacy_id = null, $items_per_page = '20', $page = '1', $attributes = null, $ledger_account_type_id = null)
    {
        $returnType = '\Swagger\Client\Model\LedgerAccountArray';
        $request = $this->getLedgerAccountsRequest($updated_or_created_since, $visible_in, $not_visible_in, $show_included_in_chart, $show_control_accounts, $ledger_account_classification_id, $show_balance_details, $exclude_deleted_entries, $from_date, $to_date, $search, $sort_order_from_user_setting, $filter_inactive_bank_accounts, $show_legacy_id, $items_per_page, $page, $attributes, $ledger_account_type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLedgerAccounts'
     *
     * @param  \DateTime $updated_or_created_since Format - date-time (as date-time in RFC3339). Use this to limit the response to Ledger Accounts changed since a given date (format: YYYY-MM-DDT(+|-)hh:mm) or date-time (format: YYYY-MM-DDThh:mm:ss(+|-)hh:mm). Inclusive of the passed timestamp. (optional)
     * @param  string $visible_in Use this to limit the response to ledger account types visible in a specific area. Valid values are: banking, sales, expenses, other_payments, other_receipts, journals and reporting (optional)
     * @param  string $not_visible_in Use this to limit the response to ledger account types not visible in a specific area. (optional)
     * @param  bool $show_included_in_chart Use this to limit the response to ledger accounts that are/are not included in the chart (optional)
     * @param  bool $show_control_accounts Use this to limit the response to ledger accounts that are/are not control accounts (optional)
     * @param  string $ledger_account_classification_id Use this to filter by ledger account classification id (optional)
     * @param  bool $show_balance_details Use this to display the balance details for ledger accounts between a date range (requires from_date and to_date). (optional)
     * @param  bool $exclude_deleted_entries Exclude deleted ledger entries. (optional)
     * @param  \DateTime $from_date Format - date-time (as date-time in RFC3339). Calculate balances from this date. (optional)
     * @param  \DateTime $to_date Format - date-time (as date-time in RFC3339). Calculate balances to this date. (optional)
     * @param  string $search Use this to filter by the item code or description (optional)
     * @param  bool $sort_order_from_user_setting Use this to enable ordering ledger accounts according to user settings. Defaulted to &#39;false&#39;. (optional)
     * @param  bool $filter_inactive_bank_accounts Use this to filter inactive bank accounts (optional)
     * @param  bool $show_legacy_id Display the legacy_id for the Ledger Accounts. (optional)
     * @param  int $items_per_page Format - int32. Returns the given number of Ledger Accounts per request. (optional, default to 20)
     * @param  int $page Format - int32. Go to specific page of Ledger Accounts (optional, default to 1)
     * @param  string $attributes Specify the attributes that you want to expose for the Ledger Accounts (expose all attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     * @param  string $ledger_account_type_id Use this to filter by ledger account type id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLedgerAccountsRequest($updated_or_created_since = null, $visible_in = null, $not_visible_in = null, $show_included_in_chart = null, $show_control_accounts = null, $ledger_account_classification_id = null, $show_balance_details = null, $exclude_deleted_entries = null, $from_date = null, $to_date = null, $search = null, $sort_order_from_user_setting = null, $filter_inactive_bank_accounts = null, $show_legacy_id = null, $items_per_page = '20', $page = '1', $attributes = null, $ledger_account_type_id = null)
    {
        if ($items_per_page !== null && $items_per_page > 200) {
            throw new \InvalidArgumentException('invalid value for "$items_per_page" when calling LedgerAccountsApi.getLedgerAccounts, must be smaller than or equal to 200.');
        }
        if ($items_per_page !== null && $items_per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$items_per_page" when calling LedgerAccountsApi.getLedgerAccounts, must be bigger than or equal to 1.');
        }


        $resourcePath = '/ledger_accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($updated_or_created_since !== null) {
            $queryParams['updated_or_created_since'] = ObjectSerializer::toQueryValue($updated_or_created_since);
        }
        // query params
        if ($visible_in !== null) {
            $queryParams['visible_in'] = ObjectSerializer::toQueryValue($visible_in);
        }
        // query params
        if ($not_visible_in !== null) {
            $queryParams['not_visible_in'] = ObjectSerializer::toQueryValue($not_visible_in);
        }
        // query params
        if ($show_included_in_chart !== null) {
            $queryParams['show_included_in_chart'] = ObjectSerializer::toQueryValue($show_included_in_chart);
        }
        // query params
        if ($show_control_accounts !== null) {
            $queryParams['show_control_accounts'] = ObjectSerializer::toQueryValue($show_control_accounts);
        }
        // query params
        if ($ledger_account_classification_id !== null) {
            $queryParams['ledger_account_classification_id'] = ObjectSerializer::toQueryValue($ledger_account_classification_id);
        }
        // query params
        if ($show_balance_details !== null) {
            $queryParams['show_balance_details'] = ObjectSerializer::toQueryValue($show_balance_details);
        }
        // query params
        if ($exclude_deleted_entries !== null) {
            $queryParams['exclude_deleted_entries'] = ObjectSerializer::toQueryValue($exclude_deleted_entries);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['from_date'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['to_date'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($sort_order_from_user_setting !== null) {
            $queryParams['sort_order_from_user_setting'] = ObjectSerializer::toQueryValue($sort_order_from_user_setting);
        }
        // query params
        if ($filter_inactive_bank_accounts !== null) {
            $queryParams['filter_inactive_bank_accounts'] = ObjectSerializer::toQueryValue($filter_inactive_bank_accounts);
        }
        // query params
        if ($show_legacy_id !== null) {
            $queryParams['show_legacy_id'] = ObjectSerializer::toQueryValue($show_legacy_id);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['items_per_page'] = ObjectSerializer::toQueryValue($items_per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($attributes !== null) {
            $queryParams['attributes'] = ObjectSerializer::toQueryValue($attributes);
        }
        // query params
        if ($ledger_account_type_id !== null) {
            $queryParams['ledger_account_type_id'] = ObjectSerializer::toQueryValue($ledger_account_type_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLedgerAccountsKey
     *
     * Returns a Ledger Account
     *
     * @param  string $key The Ledger Account Key. (required)
     * @param  string $nested_attributes Specify the attributes that you want to expose for nested entities of the Ledger Account (expose all nested attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     * @param  bool $show_balance_details Use this to display the balance details for ledger accounts between a date range (requires from_date and to_date). (optional)
     * @param  bool $exclude_deleted_entries Exclude deleted ledger entries. (optional)
     * @param  \DateTime $from_date Format - date-time (as date-time in RFC3339). Calculate balances from this date. (optional)
     * @param  \DateTime $to_date Format - date-time (as date-time in RFC3339). Calculate balances to this date. (optional)
     * @param  bool $show_legacy_id Display the legacy_id for the Ledger Account. (optional)
     * @param  string $attributes Specify the attributes that you want to expose for the Ledger Account (expose all attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LedgerAccount
     */
    public function getLedgerAccountsKey($key, $nested_attributes = null, $show_balance_details = null, $exclude_deleted_entries = null, $from_date = null, $to_date = null, $show_legacy_id = null, $attributes = null)
    {
        list($response) = $this->getLedgerAccountsKeyWithHttpInfo($key, $nested_attributes, $show_balance_details, $exclude_deleted_entries, $from_date, $to_date, $show_legacy_id, $attributes);
        return $response;
    }

    /**
     * Operation getLedgerAccountsKeyWithHttpInfo
     *
     * Returns a Ledger Account
     *
     * @param  string $key The Ledger Account Key. (required)
     * @param  string $nested_attributes Specify the attributes that you want to expose for nested entities of the Ledger Account (expose all nested attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     * @param  bool $show_balance_details Use this to display the balance details for ledger accounts between a date range (requires from_date and to_date). (optional)
     * @param  bool $exclude_deleted_entries Exclude deleted ledger entries. (optional)
     * @param  \DateTime $from_date Format - date-time (as date-time in RFC3339). Calculate balances from this date. (optional)
     * @param  \DateTime $to_date Format - date-time (as date-time in RFC3339). Calculate balances to this date. (optional)
     * @param  bool $show_legacy_id Display the legacy_id for the Ledger Account. (optional)
     * @param  string $attributes Specify the attributes that you want to expose for the Ledger Account (expose all attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LedgerAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLedgerAccountsKeyWithHttpInfo($key, $nested_attributes = null, $show_balance_details = null, $exclude_deleted_entries = null, $from_date = null, $to_date = null, $show_legacy_id = null, $attributes = null)
    {
        $returnType = '\Swagger\Client\Model\LedgerAccount';
        $request = $this->getLedgerAccountsKeyRequest($key, $nested_attributes, $show_balance_details, $exclude_deleted_entries, $from_date, $to_date, $show_legacy_id, $attributes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LedgerAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLedgerAccountsKeyAsync
     *
     * Returns a Ledger Account
     *
     * @param  string $key The Ledger Account Key. (required)
     * @param  string $nested_attributes Specify the attributes that you want to expose for nested entities of the Ledger Account (expose all nested attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     * @param  bool $show_balance_details Use this to display the balance details for ledger accounts between a date range (requires from_date and to_date). (optional)
     * @param  bool $exclude_deleted_entries Exclude deleted ledger entries. (optional)
     * @param  \DateTime $from_date Format - date-time (as date-time in RFC3339). Calculate balances from this date. (optional)
     * @param  \DateTime $to_date Format - date-time (as date-time in RFC3339). Calculate balances to this date. (optional)
     * @param  bool $show_legacy_id Display the legacy_id for the Ledger Account. (optional)
     * @param  string $attributes Specify the attributes that you want to expose for the Ledger Account (expose all attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLedgerAccountsKeyAsync($key, $nested_attributes = null, $show_balance_details = null, $exclude_deleted_entries = null, $from_date = null, $to_date = null, $show_legacy_id = null, $attributes = null)
    {
        return $this->getLedgerAccountsKeyAsyncWithHttpInfo($key, $nested_attributes, $show_balance_details, $exclude_deleted_entries, $from_date, $to_date, $show_legacy_id, $attributes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLedgerAccountsKeyAsyncWithHttpInfo
     *
     * Returns a Ledger Account
     *
     * @param  string $key The Ledger Account Key. (required)
     * @param  string $nested_attributes Specify the attributes that you want to expose for nested entities of the Ledger Account (expose all nested attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     * @param  bool $show_balance_details Use this to display the balance details for ledger accounts between a date range (requires from_date and to_date). (optional)
     * @param  bool $exclude_deleted_entries Exclude deleted ledger entries. (optional)
     * @param  \DateTime $from_date Format - date-time (as date-time in RFC3339). Calculate balances from this date. (optional)
     * @param  \DateTime $to_date Format - date-time (as date-time in RFC3339). Calculate balances to this date. (optional)
     * @param  bool $show_legacy_id Display the legacy_id for the Ledger Account. (optional)
     * @param  string $attributes Specify the attributes that you want to expose for the Ledger Account (expose all attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLedgerAccountsKeyAsyncWithHttpInfo($key, $nested_attributes = null, $show_balance_details = null, $exclude_deleted_entries = null, $from_date = null, $to_date = null, $show_legacy_id = null, $attributes = null)
    {
        $returnType = '\Swagger\Client\Model\LedgerAccount';
        $request = $this->getLedgerAccountsKeyRequest($key, $nested_attributes, $show_balance_details, $exclude_deleted_entries, $from_date, $to_date, $show_legacy_id, $attributes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLedgerAccountsKey'
     *
     * @param  string $key The Ledger Account Key. (required)
     * @param  string $nested_attributes Specify the attributes that you want to expose for nested entities of the Ledger Account (expose all nested attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     * @param  bool $show_balance_details Use this to display the balance details for ledger accounts between a date range (requires from_date and to_date). (optional)
     * @param  bool $exclude_deleted_entries Exclude deleted ledger entries. (optional)
     * @param  \DateTime $from_date Format - date-time (as date-time in RFC3339). Calculate balances from this date. (optional)
     * @param  \DateTime $to_date Format - date-time (as date-time in RFC3339). Calculate balances to this date. (optional)
     * @param  bool $show_legacy_id Display the legacy_id for the Ledger Account. (optional)
     * @param  string $attributes Specify the attributes that you want to expose for the Ledger Account (expose all attributes with &#39;all&#39;). These are in addition to the base attributes (name, path) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLedgerAccountsKeyRequest($key, $nested_attributes = null, $show_balance_details = null, $exclude_deleted_entries = null, $from_date = null, $to_date = null, $show_legacy_id = null, $attributes = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getLedgerAccountsKey'
            );
        }

        $resourcePath = '/ledger_accounts/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($nested_attributes !== null) {
            $queryParams['nested_attributes'] = ObjectSerializer::toQueryValue($nested_attributes);
        }
        // query params
        if ($show_balance_details !== null) {
            $queryParams['show_balance_details'] = ObjectSerializer::toQueryValue($show_balance_details);
        }
        // query params
        if ($exclude_deleted_entries !== null) {
            $queryParams['exclude_deleted_entries'] = ObjectSerializer::toQueryValue($exclude_deleted_entries);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['from_date'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['to_date'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($show_legacy_id !== null) {
            $queryParams['show_legacy_id'] = ObjectSerializer::toQueryValue($show_legacy_id);
        }
        // query params
        if ($attributes !== null) {
            $queryParams['attributes'] = ObjectSerializer::toQueryValue($attributes);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postLedgerAccounts
     *
     * Creates a Ledger Account
     *
     * @param  \Swagger\Client\Model\PostLedgerAccounts $post_ledger_accounts post_ledger_accounts (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LedgerAccount
     */
    public function postLedgerAccounts($post_ledger_accounts = null)
    {
        list($response) = $this->postLedgerAccountsWithHttpInfo($post_ledger_accounts);
        return $response;
    }

    /**
     * Operation postLedgerAccountsWithHttpInfo
     *
     * Creates a Ledger Account
     *
     * @param  \Swagger\Client\Model\PostLedgerAccounts $post_ledger_accounts (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LedgerAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function postLedgerAccountsWithHttpInfo($post_ledger_accounts = null)
    {
        $returnType = '\Swagger\Client\Model\LedgerAccount';
        $request = $this->postLedgerAccountsRequest($post_ledger_accounts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LedgerAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postLedgerAccountsAsync
     *
     * Creates a Ledger Account
     *
     * @param  \Swagger\Client\Model\PostLedgerAccounts $post_ledger_accounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postLedgerAccountsAsync($post_ledger_accounts = null)
    {
        return $this->postLedgerAccountsAsyncWithHttpInfo($post_ledger_accounts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postLedgerAccountsAsyncWithHttpInfo
     *
     * Creates a Ledger Account
     *
     * @param  \Swagger\Client\Model\PostLedgerAccounts $post_ledger_accounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postLedgerAccountsAsyncWithHttpInfo($post_ledger_accounts = null)
    {
        $returnType = '\Swagger\Client\Model\LedgerAccount';
        $request = $this->postLedgerAccountsRequest($post_ledger_accounts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postLedgerAccounts'
     *
     * @param  \Swagger\Client\Model\PostLedgerAccounts $post_ledger_accounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postLedgerAccountsRequest($post_ledger_accounts = null)
    {

        $resourcePath = '/ledger_accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($post_ledger_accounts)) {
            $_tempBody = $post_ledger_accounts;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putLedgerAccountsKey
     *
     * Updates a Ledger Account
     *
     * @param  string $key The Ledger Account Key. (required)
     * @param  \Swagger\Client\Model\PutLedgerAccounts $put_ledger_accounts put_ledger_accounts (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LedgerAccount
     */
    public function putLedgerAccountsKey($key, $put_ledger_accounts = null)
    {
        list($response) = $this->putLedgerAccountsKeyWithHttpInfo($key, $put_ledger_accounts);
        return $response;
    }

    /**
     * Operation putLedgerAccountsKeyWithHttpInfo
     *
     * Updates a Ledger Account
     *
     * @param  string $key The Ledger Account Key. (required)
     * @param  \Swagger\Client\Model\PutLedgerAccounts $put_ledger_accounts (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LedgerAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function putLedgerAccountsKeyWithHttpInfo($key, $put_ledger_accounts = null)
    {
        $returnType = '\Swagger\Client\Model\LedgerAccount';
        $request = $this->putLedgerAccountsKeyRequest($key, $put_ledger_accounts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LedgerAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putLedgerAccountsKeyAsync
     *
     * Updates a Ledger Account
     *
     * @param  string $key The Ledger Account Key. (required)
     * @param  \Swagger\Client\Model\PutLedgerAccounts $put_ledger_accounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putLedgerAccountsKeyAsync($key, $put_ledger_accounts = null)
    {
        return $this->putLedgerAccountsKeyAsyncWithHttpInfo($key, $put_ledger_accounts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putLedgerAccountsKeyAsyncWithHttpInfo
     *
     * Updates a Ledger Account
     *
     * @param  string $key The Ledger Account Key. (required)
     * @param  \Swagger\Client\Model\PutLedgerAccounts $put_ledger_accounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putLedgerAccountsKeyAsyncWithHttpInfo($key, $put_ledger_accounts = null)
    {
        $returnType = '\Swagger\Client\Model\LedgerAccount';
        $request = $this->putLedgerAccountsKeyRequest($key, $put_ledger_accounts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putLedgerAccountsKey'
     *
     * @param  string $key The Ledger Account Key. (required)
     * @param  \Swagger\Client\Model\PutLedgerAccounts $put_ledger_accounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putLedgerAccountsKeyRequest($key, $put_ledger_accounts = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling putLedgerAccountsKey'
            );
        }

        $resourcePath = '/ledger_accounts/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($put_ledger_accounts)) {
            $_tempBody = $put_ledger_accounts;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
