<?php
/**
 * OtherPaymentLineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OtherPaymentLineItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OtherPaymentLineItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OtherPaymentLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'legacy_id' => 'int',
        'id' => 'string',
        'displayed_as' => 'string',
        'ledger_account' => '\Swagger\Client\Model\Base',
        'details' => 'string',
        'tax_rate' => '\Swagger\Client\Model\Base',
        'net_amount' => 'double',
        'tax_amount' => 'double',
        'total_amount' => 'double',
        'tax_breakdown' => '\Swagger\Client\Model\TaxBreakdown[]',
        'is_purchase_for_resale' => 'bool',
        'trade_of_asset' => 'bool',
        'gst_amount' => 'double',
        'pst_amount' => 'double',
        'tax_recoverable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'legacy_id' => 'int32',
        'id' => null,
        'displayed_as' => null,
        'ledger_account' => null,
        'details' => null,
        'tax_rate' => null,
        'net_amount' => 'double',
        'tax_amount' => 'double',
        'total_amount' => 'double',
        'tax_breakdown' => null,
        'is_purchase_for_resale' => null,
        'trade_of_asset' => null,
        'gst_amount' => 'double',
        'pst_amount' => 'double',
        'tax_recoverable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legacy_id' => 'legacy_id',
        'id' => 'id',
        'displayed_as' => 'displayed_as',
        'ledger_account' => 'ledger_account',
        'details' => 'details',
        'tax_rate' => 'tax_rate',
        'net_amount' => 'net_amount',
        'tax_amount' => 'tax_amount',
        'total_amount' => 'total_amount',
        'tax_breakdown' => 'tax_breakdown',
        'is_purchase_for_resale' => 'is_purchase_for_resale',
        'trade_of_asset' => 'trade_of_asset',
        'gst_amount' => 'gst_amount',
        'pst_amount' => 'pst_amount',
        'tax_recoverable' => 'tax_recoverable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legacy_id' => 'setLegacyId',
        'id' => 'setId',
        'displayed_as' => 'setDisplayedAs',
        'ledger_account' => 'setLedgerAccount',
        'details' => 'setDetails',
        'tax_rate' => 'setTaxRate',
        'net_amount' => 'setNetAmount',
        'tax_amount' => 'setTaxAmount',
        'total_amount' => 'setTotalAmount',
        'tax_breakdown' => 'setTaxBreakdown',
        'is_purchase_for_resale' => 'setIsPurchaseForResale',
        'trade_of_asset' => 'setTradeOfAsset',
        'gst_amount' => 'setGstAmount',
        'pst_amount' => 'setPstAmount',
        'tax_recoverable' => 'setTaxRecoverable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legacy_id' => 'getLegacyId',
        'id' => 'getId',
        'displayed_as' => 'getDisplayedAs',
        'ledger_account' => 'getLedgerAccount',
        'details' => 'getDetails',
        'tax_rate' => 'getTaxRate',
        'net_amount' => 'getNetAmount',
        'tax_amount' => 'getTaxAmount',
        'total_amount' => 'getTotalAmount',
        'tax_breakdown' => 'getTaxBreakdown',
        'is_purchase_for_resale' => 'getIsPurchaseForResale',
        'trade_of_asset' => 'getTradeOfAsset',
        'gst_amount' => 'getGstAmount',
        'pst_amount' => 'getPstAmount',
        'tax_recoverable' => 'getTaxRecoverable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['legacy_id'] = isset($data['legacy_id']) ? $data['legacy_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['displayed_as'] = isset($data['displayed_as']) ? $data['displayed_as'] : null;
        $this->container['ledger_account'] = isset($data['ledger_account']) ? $data['ledger_account'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['net_amount'] = isset($data['net_amount']) ? $data['net_amount'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['tax_breakdown'] = isset($data['tax_breakdown']) ? $data['tax_breakdown'] : null;
        $this->container['is_purchase_for_resale'] = isset($data['is_purchase_for_resale']) ? $data['is_purchase_for_resale'] : null;
        $this->container['trade_of_asset'] = isset($data['trade_of_asset']) ? $data['trade_of_asset'] : null;
        $this->container['gst_amount'] = isset($data['gst_amount']) ? $data['gst_amount'] : null;
        $this->container['pst_amount'] = isset($data['pst_amount']) ? $data['pst_amount'] : null;
        $this->container['tax_recoverable'] = isset($data['tax_recoverable']) ? $data['tax_recoverable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacy_id
     *
     * @return int
     */
    public function getLegacyId()
    {
        return $this->container['legacy_id'];
    }

    /**
     * Sets legacy_id
     *
     * @param int $legacy_id The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId($legacy_id)
    {
        $this->container['legacy_id'] = $legacy_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayed_as
     *
     * @return string
     */
    public function getDisplayedAs()
    {
        return $this->container['displayed_as'];
    }

    /**
     * Sets displayed_as
     *
     * @param string $displayed_as The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs($displayed_as)
    {
        $this->container['displayed_as'] = $displayed_as;

        return $this;
    }

    /**
     * Gets ledger_account
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getLedgerAccount()
    {
        return $this->container['ledger_account'];
    }

    /**
     * Sets ledger_account
     *
     * @param \Swagger\Client\Model\Base $ledger_account The ledger account of the payment line
     *
     * @return $this
     */
    public function setLedgerAccount($ledger_account)
    {
        $this->container['ledger_account'] = $ledger_account;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details The details of the payment line
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param \Swagger\Client\Model\Base $tax_rate The tax rate of the payment line
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return double
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param double $net_amount The net amount of the payment line
     *
     * @return $this
     */
    public function setNetAmount($net_amount)
    {
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return double
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param double $tax_amount The tax amount of the payment line
     *
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount The total amount of the payment line
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets tax_breakdown
     *
     * @return \Swagger\Client\Model\TaxBreakdown[]
     */
    public function getTaxBreakdown()
    {
        return $this->container['tax_breakdown'];
    }

    /**
     * Sets tax_breakdown
     *
     * @param \Swagger\Client\Model\TaxBreakdown[] $tax_breakdown The tax breakdown for the payment line
     *
     * @return $this
     */
    public function setTaxBreakdown($tax_breakdown)
    {
        $this->container['tax_breakdown'] = $tax_breakdown;

        return $this;
    }

    /**
     * Gets is_purchase_for_resale
     *
     * @return bool
     */
    public function getIsPurchaseForResale()
    {
        return $this->container['is_purchase_for_resale'];
    }

    /**
     * Sets is_purchase_for_resale
     *
     * @param bool $is_purchase_for_resale Identifies whether the line item is for resale. (Ireland only)
     *
     * @return $this
     */
    public function setIsPurchaseForResale($is_purchase_for_resale)
    {
        $this->container['is_purchase_for_resale'] = $is_purchase_for_resale;

        return $this;
    }

    /**
     * Gets trade_of_asset
     *
     * @return bool
     */
    public function getTradeOfAsset()
    {
        return $this->container['trade_of_asset'];
    }

    /**
     * Sets trade_of_asset
     *
     * @param bool $trade_of_asset Whether the line item is marked as trade of asset.
     *
     * @return $this
     */
    public function setTradeOfAsset($trade_of_asset)
    {
        $this->container['trade_of_asset'] = $trade_of_asset;

        return $this;
    }

    /**
     * Gets gst_amount
     *
     * @return double
     */
    public function getGstAmount()
    {
        return $this->container['gst_amount'];
    }

    /**
     * Sets gst_amount
     *
     * @param double $gst_amount The gst or hst tax amount for the other payment
     *
     * @return $this
     */
    public function setGstAmount($gst_amount)
    {
        $this->container['gst_amount'] = $gst_amount;

        return $this;
    }

    /**
     * Gets pst_amount
     *
     * @return double
     */
    public function getPstAmount()
    {
        return $this->container['pst_amount'];
    }

    /**
     * Sets pst_amount
     *
     * @param double $pst_amount The pst or qst tax amount for the other payment
     *
     * @return $this
     */
    public function setPstAmount($pst_amount)
    {
        $this->container['pst_amount'] = $pst_amount;

        return $this;
    }

    /**
     * Gets tax_recoverable
     *
     * @return bool
     */
    public function getTaxRecoverable()
    {
        return $this->container['tax_recoverable'];
    }

    /**
     * Sets tax_recoverable
     *
     * @param bool $tax_recoverable Indicates if the other payment is tax recoverable or not
     *
     * @return $this
     */
    public function setTaxRecoverable($tax_recoverable)
    {
        $this->container['tax_recoverable'] = $tax_recoverable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


