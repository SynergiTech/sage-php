<?php
/**
 * ArtefactDetailedTaxAnalysis
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ArtefactDetailedTaxAnalysis Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArtefactDetailedTaxAnalysis implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArtefactDetailedTaxAnalysis';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tax_rates_breakdown' => '\Swagger\Client\Model\ArtefactDetailedTaxAnalysisBreakdown',
        'total_net' => 'double',
        'total_tax' => 'double',
        'total' => 'double',
        'total_goods_amount' => 'double',
        'total_services_amount' => 'double',
        'base_currency_total_net' => 'double',
        'base_currency_total_tax' => 'double',
        'base_currency_total' => 'double',
        'base_currency_total_goods_amount' => 'double',
        'base_currency_total_services_amount' => 'double',
        'total_retailer_tax' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tax_rates_breakdown' => null,
        'total_net' => 'double',
        'total_tax' => 'double',
        'total' => 'double',
        'total_goods_amount' => 'double',
        'total_services_amount' => 'double',
        'base_currency_total_net' => 'double',
        'base_currency_total_tax' => 'double',
        'base_currency_total' => 'double',
        'base_currency_total_goods_amount' => 'double',
        'base_currency_total_services_amount' => 'double',
        'total_retailer_tax' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax_rates_breakdown' => 'tax_rates_breakdown',
        'total_net' => 'total_net',
        'total_tax' => 'total_tax',
        'total' => 'total',
        'total_goods_amount' => 'total_goods_amount',
        'total_services_amount' => 'total_services_amount',
        'base_currency_total_net' => 'base_currency_total_net',
        'base_currency_total_tax' => 'base_currency_total_tax',
        'base_currency_total' => 'base_currency_total',
        'base_currency_total_goods_amount' => 'base_currency_total_goods_amount',
        'base_currency_total_services_amount' => 'base_currency_total_services_amount',
        'total_retailer_tax' => 'total_retailer_tax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax_rates_breakdown' => 'setTaxRatesBreakdown',
        'total_net' => 'setTotalNet',
        'total_tax' => 'setTotalTax',
        'total' => 'setTotal',
        'total_goods_amount' => 'setTotalGoodsAmount',
        'total_services_amount' => 'setTotalServicesAmount',
        'base_currency_total_net' => 'setBaseCurrencyTotalNet',
        'base_currency_total_tax' => 'setBaseCurrencyTotalTax',
        'base_currency_total' => 'setBaseCurrencyTotal',
        'base_currency_total_goods_amount' => 'setBaseCurrencyTotalGoodsAmount',
        'base_currency_total_services_amount' => 'setBaseCurrencyTotalServicesAmount',
        'total_retailer_tax' => 'setTotalRetailerTax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax_rates_breakdown' => 'getTaxRatesBreakdown',
        'total_net' => 'getTotalNet',
        'total_tax' => 'getTotalTax',
        'total' => 'getTotal',
        'total_goods_amount' => 'getTotalGoodsAmount',
        'total_services_amount' => 'getTotalServicesAmount',
        'base_currency_total_net' => 'getBaseCurrencyTotalNet',
        'base_currency_total_tax' => 'getBaseCurrencyTotalTax',
        'base_currency_total' => 'getBaseCurrencyTotal',
        'base_currency_total_goods_amount' => 'getBaseCurrencyTotalGoodsAmount',
        'base_currency_total_services_amount' => 'getBaseCurrencyTotalServicesAmount',
        'total_retailer_tax' => 'getTotalRetailerTax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tax_rates_breakdown'] = isset($data['tax_rates_breakdown']) ? $data['tax_rates_breakdown'] : null;
        $this->container['total_net'] = isset($data['total_net']) ? $data['total_net'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['total_goods_amount'] = isset($data['total_goods_amount']) ? $data['total_goods_amount'] : null;
        $this->container['total_services_amount'] = isset($data['total_services_amount']) ? $data['total_services_amount'] : null;
        $this->container['base_currency_total_net'] = isset($data['base_currency_total_net']) ? $data['base_currency_total_net'] : null;
        $this->container['base_currency_total_tax'] = isset($data['base_currency_total_tax']) ? $data['base_currency_total_tax'] : null;
        $this->container['base_currency_total'] = isset($data['base_currency_total']) ? $data['base_currency_total'] : null;
        $this->container['base_currency_total_goods_amount'] = isset($data['base_currency_total_goods_amount']) ? $data['base_currency_total_goods_amount'] : null;
        $this->container['base_currency_total_services_amount'] = isset($data['base_currency_total_services_amount']) ? $data['base_currency_total_services_amount'] : null;
        $this->container['total_retailer_tax'] = isset($data['total_retailer_tax']) ? $data['total_retailer_tax'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tax_rates_breakdown
     *
     * @return \Swagger\Client\Model\ArtefactDetailedTaxAnalysisBreakdown
     */
    public function getTaxRatesBreakdown()
    {
        return $this->container['tax_rates_breakdown'];
    }

    /**
     * Sets tax_rates_breakdown
     *
     * @param \Swagger\Client\Model\ArtefactDetailedTaxAnalysisBreakdown $tax_rates_breakdown The breakdown of tax rates and their totals
     *
     * @return $this
     */
    public function setTaxRatesBreakdown($tax_rates_breakdown)
    {
        $this->container['tax_rates_breakdown'] = $tax_rates_breakdown;

        return $this;
    }

    /**
     * Gets total_net
     *
     * @return double
     */
    public function getTotalNet()
    {
        return $this->container['total_net'];
    }

    /**
     * Sets total_net
     *
     * @param double $total_net The total net amount for all tax rates
     *
     * @return $this
     */
    public function setTotalNet($total_net)
    {
        $this->container['total_net'] = $total_net;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return double
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param double $total_tax The total tax amount for all tax rates
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets total
     *
     * @return double
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param double $total The total amount for all tax rates
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets total_goods_amount
     *
     * @return double
     */
    public function getTotalGoodsAmount()
    {
        return $this->container['total_goods_amount'];
    }

    /**
     * Sets total_goods_amount
     *
     * @param double $total_goods_amount The total amount relating to goods for all tax rates
     *
     * @return $this
     */
    public function setTotalGoodsAmount($total_goods_amount)
    {
        $this->container['total_goods_amount'] = $total_goods_amount;

        return $this;
    }

    /**
     * Gets total_services_amount
     *
     * @return double
     */
    public function getTotalServicesAmount()
    {
        return $this->container['total_services_amount'];
    }

    /**
     * Sets total_services_amount
     *
     * @param double $total_services_amount The total amount relating to services for all tax rates
     *
     * @return $this
     */
    public function setTotalServicesAmount($total_services_amount)
    {
        $this->container['total_services_amount'] = $total_services_amount;

        return $this;
    }

    /**
     * Gets base_currency_total_net
     *
     * @return double
     */
    public function getBaseCurrencyTotalNet()
    {
        return $this->container['base_currency_total_net'];
    }

    /**
     * Sets base_currency_total_net
     *
     * @param double $base_currency_total_net The base currency total net amount for all tax rates
     *
     * @return $this
     */
    public function setBaseCurrencyTotalNet($base_currency_total_net)
    {
        $this->container['base_currency_total_net'] = $base_currency_total_net;

        return $this;
    }

    /**
     * Gets base_currency_total_tax
     *
     * @return double
     */
    public function getBaseCurrencyTotalTax()
    {
        return $this->container['base_currency_total_tax'];
    }

    /**
     * Sets base_currency_total_tax
     *
     * @param double $base_currency_total_tax The base currency total tax amount for all tax rates
     *
     * @return $this
     */
    public function setBaseCurrencyTotalTax($base_currency_total_tax)
    {
        $this->container['base_currency_total_tax'] = $base_currency_total_tax;

        return $this;
    }

    /**
     * Gets base_currency_total
     *
     * @return double
     */
    public function getBaseCurrencyTotal()
    {
        return $this->container['base_currency_total'];
    }

    /**
     * Sets base_currency_total
     *
     * @param double $base_currency_total The total base currency amount for all tax rates
     *
     * @return $this
     */
    public function setBaseCurrencyTotal($base_currency_total)
    {
        $this->container['base_currency_total'] = $base_currency_total;

        return $this;
    }

    /**
     * Gets base_currency_total_goods_amount
     *
     * @return double
     */
    public function getBaseCurrencyTotalGoodsAmount()
    {
        return $this->container['base_currency_total_goods_amount'];
    }

    /**
     * Sets base_currency_total_goods_amount
     *
     * @param double $base_currency_total_goods_amount The total base currency amount relating to goods for all tax rates
     *
     * @return $this
     */
    public function setBaseCurrencyTotalGoodsAmount($base_currency_total_goods_amount)
    {
        $this->container['base_currency_total_goods_amount'] = $base_currency_total_goods_amount;

        return $this;
    }

    /**
     * Gets base_currency_total_services_amount
     *
     * @return double
     */
    public function getBaseCurrencyTotalServicesAmount()
    {
        return $this->container['base_currency_total_services_amount'];
    }

    /**
     * Sets base_currency_total_services_amount
     *
     * @param double $base_currency_total_services_amount The total base currency amount relating to services for all tax rates
     *
     * @return $this
     */
    public function setBaseCurrencyTotalServicesAmount($base_currency_total_services_amount)
    {
        $this->container['base_currency_total_services_amount'] = $base_currency_total_services_amount;

        return $this;
    }

    /**
     * Gets total_retailer_tax
     *
     * @return double
     */
    public function getTotalRetailerTax()
    {
        return $this->container['total_retailer_tax'];
    }

    /**
     * Sets total_retailer_tax
     *
     * @param double $total_retailer_tax The total retailer tax amount for all tax rates
     *
     * @return $this
     */
    public function setTotalRetailerTax($total_retailer_tax)
    {
        $this->container['total_retailer_tax'] = $total_retailer_tax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


