<?php
/**
 * PutTaxProfilesTaxProfile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PutTaxProfilesTaxProfile Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PutTaxProfilesTaxProfile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'putTaxProfiles_tax_profile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tax_type_id' => 'string',
        'tax_number' => 'string',
        'tax_number_suffix' => 'string',
        'collect_tax' => 'bool',
        'tax_return_frequency_id' => 'string',
        'address_region' => '\Swagger\Client\Model\PutTaxProfilesTaxProfileAddressRegion'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tax_type_id' => null,
        'tax_number' => null,
        'tax_number_suffix' => null,
        'collect_tax' => null,
        'tax_return_frequency_id' => null,
        'address_region' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax_type_id' => 'tax_type_id',
        'tax_number' => 'tax_number',
        'tax_number_suffix' => 'tax_number_suffix',
        'collect_tax' => 'collect_tax',
        'tax_return_frequency_id' => 'tax_return_frequency_id',
        'address_region' => 'address_region'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax_type_id' => 'setTaxTypeId',
        'tax_number' => 'setTaxNumber',
        'tax_number_suffix' => 'setTaxNumberSuffix',
        'collect_tax' => 'setCollectTax',
        'tax_return_frequency_id' => 'setTaxReturnFrequencyId',
        'address_region' => 'setAddressRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax_type_id' => 'getTaxTypeId',
        'tax_number' => 'getTaxNumber',
        'tax_number_suffix' => 'getTaxNumberSuffix',
        'collect_tax' => 'getCollectTax',
        'tax_return_frequency_id' => 'getTaxReturnFrequencyId',
        'address_region' => 'getAddressRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tax_type_id'] = isset($data['tax_type_id']) ? $data['tax_type_id'] : null;
        $this->container['tax_number'] = isset($data['tax_number']) ? $data['tax_number'] : null;
        $this->container['tax_number_suffix'] = isset($data['tax_number_suffix']) ? $data['tax_number_suffix'] : null;
        $this->container['collect_tax'] = isset($data['collect_tax']) ? $data['collect_tax'] : null;
        $this->container['tax_return_frequency_id'] = isset($data['tax_return_frequency_id']) ? $data['tax_return_frequency_id'] : null;
        $this->container['address_region'] = isset($data['address_region']) ? $data['address_region'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tax_type_id
     *
     * @return string
     */
    public function getTaxTypeId()
    {
        return $this->container['tax_type_id'];
    }

    /**
     * Sets tax_type_id
     *
     * @param string $tax_type_id The ID of the Tax Type.
     *
     * @return $this
     */
    public function setTaxTypeId($tax_type_id)
    {
        $this->container['tax_type_id'] = $tax_type_id;

        return $this;
    }

    /**
     * Gets tax_number
     *
     * @return string
     */
    public function getTaxNumber()
    {
        return $this->container['tax_number'];
    }

    /**
     * Sets tax_number
     *
     * @param string $tax_number The tax number
     *
     * @return $this
     */
    public function setTaxNumber($tax_number)
    {
        $this->container['tax_number'] = $tax_number;

        return $this;
    }

    /**
     * Gets tax_number_suffix
     *
     * @return string
     */
    public function getTaxNumberSuffix()
    {
        return $this->container['tax_number_suffix'];
    }

    /**
     * Sets tax_number_suffix
     *
     * @param string $tax_number_suffix The tax number suffix
     *
     * @return $this
     */
    public function setTaxNumberSuffix($tax_number_suffix)
    {
        $this->container['tax_number_suffix'] = $tax_number_suffix;

        return $this;
    }

    /**
     * Gets collect_tax
     *
     * @return bool
     */
    public function getCollectTax()
    {
        return $this->container['collect_tax'];
    }

    /**
     * Sets collect_tax
     *
     * @param bool $collect_tax Indicates whether tax is collected for this tax type
     *
     * @return $this
     */
    public function setCollectTax($collect_tax)
    {
        $this->container['collect_tax'] = $collect_tax;

        return $this;
    }

    /**
     * Gets tax_return_frequency_id
     *
     * @return string
     */
    public function getTaxReturnFrequencyId()
    {
        return $this->container['tax_return_frequency_id'];
    }

    /**
     * Sets tax_return_frequency_id
     *
     * @param string $tax_return_frequency_id The ID of the Tax Return Frequency.
     *
     * @return $this
     */
    public function setTaxReturnFrequencyId($tax_return_frequency_id)
    {
        $this->container['tax_return_frequency_id'] = $tax_return_frequency_id;

        return $this;
    }

    /**
     * Gets address_region
     *
     * @return \Swagger\Client\Model\PutTaxProfilesTaxProfileAddressRegion
     */
    public function getAddressRegion()
    {
        return $this->container['address_region'];
    }

    /**
     * Sets address_region
     *
     * @param \Swagger\Client\Model\PutTaxProfilesTaxProfileAddressRegion $address_region address_region
     *
     * @return $this
     */
    public function setAddressRegion($address_region)
    {
        $this->container['address_region'] = $address_region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


