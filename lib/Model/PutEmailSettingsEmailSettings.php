<?php
/**
 * PutEmailSettingsEmailSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PutEmailSettingsEmailSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PutEmailSettingsEmailSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'putEmailSettings_email_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pdf_attached' => 'bool',
        'send_bcc' => 'bool',
        'default_messages' => '\Swagger\Client\Model\PutEmailSettingsEmailSettingsDefaultMessages[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pdf_attached' => null,
        'send_bcc' => null,
        'default_messages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pdf_attached' => 'pdf_attached',
        'send_bcc' => 'send_bcc',
        'default_messages' => 'default_messages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pdf_attached' => 'setPdfAttached',
        'send_bcc' => 'setSendBcc',
        'default_messages' => 'setDefaultMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pdf_attached' => 'getPdfAttached',
        'send_bcc' => 'getSendBcc',
        'default_messages' => 'getDefaultMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pdf_attached'] = isset($data['pdf_attached']) ? $data['pdf_attached'] : null;
        $this->container['send_bcc'] = isset($data['send_bcc']) ? $data['send_bcc'] : null;
        $this->container['default_messages'] = isset($data['default_messages']) ? $data['default_messages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pdf_attached
     *
     * @return bool
     */
    public function getPdfAttached()
    {
        return $this->container['pdf_attached'];
    }

    /**
     * Sets pdf_attached
     *
     * @param bool $pdf_attached Indicates whether PDFs are always attached as part of sending emails for a business
     *
     * @return $this
     */
    public function setPdfAttached($pdf_attached)
    {
        $this->container['pdf_attached'] = $pdf_attached;

        return $this;
    }

    /**
     * Gets send_bcc
     *
     * @return bool
     */
    public function getSendBcc()
    {
        return $this->container['send_bcc'];
    }

    /**
     * Sets send_bcc
     *
     * @param bool $send_bcc Indicates whether the user should always be sent a copy when sending a document via email
     *
     * @return $this
     */
    public function setSendBcc($send_bcc)
    {
        $this->container['send_bcc'] = $send_bcc;

        return $this;
    }

    /**
     * Gets default_messages
     *
     * @return \Swagger\Client\Model\PutEmailSettingsEmailSettingsDefaultMessages[]
     */
    public function getDefaultMessages()
    {
        return $this->container['default_messages'];
    }

    /**
     * Sets default_messages
     *
     * @param \Swagger\Client\Model\PutEmailSettingsEmailSettingsDefaultMessages[] $default_messages default_messages
     *
     * @return $this
     */
    public function setDefaultMessages($default_messages)
    {
        $this->container['default_messages'] = $default_messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


