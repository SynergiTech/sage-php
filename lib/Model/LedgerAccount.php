<?php
/**
 * LedgerAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LedgerAccount Class Doc Comment
 *
 * @category Class
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Standard: ðŸ‡¨ðŸ‡¦, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Start: ðŸ‡¨ðŸ‡¦, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any mentioned role in one of the listed areas: * Area: &#x60;Settings&#x60;: Full Access
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LedgerAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LedgerAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'legacy_id' => 'int',
        'id' => 'string',
        'displayed_as' => 'string',
        'path' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'ledger_account_group' => '\Swagger\Client\Model\CoaGroupType',
        'name' => 'string',
        'display_name' => 'string',
        'visible_scopes' => 'string[]',
        'included_in_chart' => 'bool',
        'nominal_code' => 'int',
        'ledger_account_type' => '\Swagger\Client\Model\Base',
        'ledger_account_classification' => '\Swagger\Client\Model\Base',
        'tax_rate' => '\Swagger\Client\Model\Base',
        'fixed_tax_rate' => 'bool',
        'visible_in_banking' => 'bool',
        'visible_in_expenses' => 'bool',
        'visible_in_journals' => 'bool',
        'visible_in_other_payments' => 'bool',
        'visible_in_other_receipts' => 'bool',
        'visible_in_reporting' => 'bool',
        'visible_in_sales' => 'bool',
        'balance_details' => '\Swagger\Client\Model\LedgerAccountBalanceDetails',
        'is_control_account' => 'bool',
        'control_name' => 'string',
        'display_formatted' => 'string',
        'tax_recoverable' => 'bool',
        'recoverable_percentage' => 'double',
        'non_recoverable_ledger_account' => '\Swagger\Client\Model\LedgerAccount',
        'cis_materials' => 'bool',
        'tax_instalment' => 'bool',
        'cis_labour' => 'bool',
        'gifi_code' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'legacy_id' => 'int32',
        'id' => null,
        'displayed_as' => null,
        'path' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'ledger_account_group' => null,
        'name' => null,
        'display_name' => null,
        'visible_scopes' => null,
        'included_in_chart' => null,
        'nominal_code' => 'int32',
        'ledger_account_type' => null,
        'ledger_account_classification' => null,
        'tax_rate' => null,
        'fixed_tax_rate' => null,
        'visible_in_banking' => null,
        'visible_in_expenses' => null,
        'visible_in_journals' => null,
        'visible_in_other_payments' => null,
        'visible_in_other_receipts' => null,
        'visible_in_reporting' => null,
        'visible_in_sales' => null,
        'balance_details' => null,
        'is_control_account' => null,
        'control_name' => null,
        'display_formatted' => null,
        'tax_recoverable' => null,
        'recoverable_percentage' => 'double',
        'non_recoverable_ledger_account' => null,
        'cis_materials' => null,
        'tax_instalment' => null,
        'cis_labour' => null,
        'gifi_code' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legacy_id' => 'legacy_id',
        'id' => 'id',
        'displayed_as' => 'displayed_as',
        'path' => '$path',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'ledger_account_group' => 'ledger_account_group',
        'name' => 'name',
        'display_name' => 'display_name',
        'visible_scopes' => 'visible_scopes',
        'included_in_chart' => 'included_in_chart',
        'nominal_code' => 'nominal_code',
        'ledger_account_type' => 'ledger_account_type',
        'ledger_account_classification' => 'ledger_account_classification',
        'tax_rate' => 'tax_rate',
        'fixed_tax_rate' => 'fixed_tax_rate',
        'visible_in_banking' => 'visible_in_banking',
        'visible_in_expenses' => 'visible_in_expenses',
        'visible_in_journals' => 'visible_in_journals',
        'visible_in_other_payments' => 'visible_in_other_payments',
        'visible_in_other_receipts' => 'visible_in_other_receipts',
        'visible_in_reporting' => 'visible_in_reporting',
        'visible_in_sales' => 'visible_in_sales',
        'balance_details' => 'balance_details',
        'is_control_account' => 'is_control_account',
        'control_name' => 'control_name',
        'display_formatted' => 'display_formatted',
        'tax_recoverable' => 'tax_recoverable',
        'recoverable_percentage' => 'recoverable_percentage',
        'non_recoverable_ledger_account' => 'non_recoverable_ledger_account',
        'cis_materials' => 'cis_materials',
        'tax_instalment' => 'tax_instalment',
        'cis_labour' => 'cis_labour',
        'gifi_code' => 'gifi_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legacy_id' => 'setLegacyId',
        'id' => 'setId',
        'displayed_as' => 'setDisplayedAs',
        'path' => 'setPath',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'ledger_account_group' => 'setLedgerAccountGroup',
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'visible_scopes' => 'setVisibleScopes',
        'included_in_chart' => 'setIncludedInChart',
        'nominal_code' => 'setNominalCode',
        'ledger_account_type' => 'setLedgerAccountType',
        'ledger_account_classification' => 'setLedgerAccountClassification',
        'tax_rate' => 'setTaxRate',
        'fixed_tax_rate' => 'setFixedTaxRate',
        'visible_in_banking' => 'setVisibleInBanking',
        'visible_in_expenses' => 'setVisibleInExpenses',
        'visible_in_journals' => 'setVisibleInJournals',
        'visible_in_other_payments' => 'setVisibleInOtherPayments',
        'visible_in_other_receipts' => 'setVisibleInOtherReceipts',
        'visible_in_reporting' => 'setVisibleInReporting',
        'visible_in_sales' => 'setVisibleInSales',
        'balance_details' => 'setBalanceDetails',
        'is_control_account' => 'setIsControlAccount',
        'control_name' => 'setControlName',
        'display_formatted' => 'setDisplayFormatted',
        'tax_recoverable' => 'setTaxRecoverable',
        'recoverable_percentage' => 'setRecoverablePercentage',
        'non_recoverable_ledger_account' => 'setNonRecoverableLedgerAccount',
        'cis_materials' => 'setCisMaterials',
        'tax_instalment' => 'setTaxInstalment',
        'cis_labour' => 'setCisLabour',
        'gifi_code' => 'setGifiCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legacy_id' => 'getLegacyId',
        'id' => 'getId',
        'displayed_as' => 'getDisplayedAs',
        'path' => 'getPath',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'ledger_account_group' => 'getLedgerAccountGroup',
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'visible_scopes' => 'getVisibleScopes',
        'included_in_chart' => 'getIncludedInChart',
        'nominal_code' => 'getNominalCode',
        'ledger_account_type' => 'getLedgerAccountType',
        'ledger_account_classification' => 'getLedgerAccountClassification',
        'tax_rate' => 'getTaxRate',
        'fixed_tax_rate' => 'getFixedTaxRate',
        'visible_in_banking' => 'getVisibleInBanking',
        'visible_in_expenses' => 'getVisibleInExpenses',
        'visible_in_journals' => 'getVisibleInJournals',
        'visible_in_other_payments' => 'getVisibleInOtherPayments',
        'visible_in_other_receipts' => 'getVisibleInOtherReceipts',
        'visible_in_reporting' => 'getVisibleInReporting',
        'visible_in_sales' => 'getVisibleInSales',
        'balance_details' => 'getBalanceDetails',
        'is_control_account' => 'getIsControlAccount',
        'control_name' => 'getControlName',
        'display_formatted' => 'getDisplayFormatted',
        'tax_recoverable' => 'getTaxRecoverable',
        'recoverable_percentage' => 'getRecoverablePercentage',
        'non_recoverable_ledger_account' => 'getNonRecoverableLedgerAccount',
        'cis_materials' => 'getCisMaterials',
        'tax_instalment' => 'getTaxInstalment',
        'cis_labour' => 'getCisLabour',
        'gifi_code' => 'getGifiCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['legacy_id'] = isset($data['legacy_id']) ? $data['legacy_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['displayed_as'] = isset($data['displayed_as']) ? $data['displayed_as'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['ledger_account_group'] = isset($data['ledger_account_group']) ? $data['ledger_account_group'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['visible_scopes'] = isset($data['visible_scopes']) ? $data['visible_scopes'] : null;
        $this->container['included_in_chart'] = isset($data['included_in_chart']) ? $data['included_in_chart'] : null;
        $this->container['nominal_code'] = isset($data['nominal_code']) ? $data['nominal_code'] : null;
        $this->container['ledger_account_type'] = isset($data['ledger_account_type']) ? $data['ledger_account_type'] : null;
        $this->container['ledger_account_classification'] = isset($data['ledger_account_classification']) ? $data['ledger_account_classification'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['fixed_tax_rate'] = isset($data['fixed_tax_rate']) ? $data['fixed_tax_rate'] : null;
        $this->container['visible_in_banking'] = isset($data['visible_in_banking']) ? $data['visible_in_banking'] : null;
        $this->container['visible_in_expenses'] = isset($data['visible_in_expenses']) ? $data['visible_in_expenses'] : null;
        $this->container['visible_in_journals'] = isset($data['visible_in_journals']) ? $data['visible_in_journals'] : null;
        $this->container['visible_in_other_payments'] = isset($data['visible_in_other_payments']) ? $data['visible_in_other_payments'] : null;
        $this->container['visible_in_other_receipts'] = isset($data['visible_in_other_receipts']) ? $data['visible_in_other_receipts'] : null;
        $this->container['visible_in_reporting'] = isset($data['visible_in_reporting']) ? $data['visible_in_reporting'] : null;
        $this->container['visible_in_sales'] = isset($data['visible_in_sales']) ? $data['visible_in_sales'] : null;
        $this->container['balance_details'] = isset($data['balance_details']) ? $data['balance_details'] : null;
        $this->container['is_control_account'] = isset($data['is_control_account']) ? $data['is_control_account'] : null;
        $this->container['control_name'] = isset($data['control_name']) ? $data['control_name'] : null;
        $this->container['display_formatted'] = isset($data['display_formatted']) ? $data['display_formatted'] : null;
        $this->container['tax_recoverable'] = isset($data['tax_recoverable']) ? $data['tax_recoverable'] : null;
        $this->container['recoverable_percentage'] = isset($data['recoverable_percentage']) ? $data['recoverable_percentage'] : null;
        $this->container['non_recoverable_ledger_account'] = isset($data['non_recoverable_ledger_account']) ? $data['non_recoverable_ledger_account'] : null;
        $this->container['cis_materials'] = isset($data['cis_materials']) ? $data['cis_materials'] : null;
        $this->container['tax_instalment'] = isset($data['tax_instalment']) ? $data['tax_instalment'] : null;
        $this->container['cis_labour'] = isset($data['cis_labour']) ? $data['cis_labour'] : null;
        $this->container['gifi_code'] = isset($data['gifi_code']) ? $data['gifi_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['control_name']) && (mb_strlen($this->container['control_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'control_name', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacy_id
     *
     * @return int
     */
    public function getLegacyId()
    {
        return $this->container['legacy_id'];
    }

    /**
     * Sets legacy_id
     *
     * @param int $legacy_id The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId($legacy_id)
    {
        $this->container['legacy_id'] = $legacy_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayed_as
     *
     * @return string
     */
    public function getDisplayedAs()
    {
        return $this->container['displayed_as'];
    }

    /**
     * Sets displayed_as
     *
     * @param string $displayed_as The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs($displayed_as)
    {
        $this->container['displayed_as'] = $displayed_as;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The API path for the resource
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The datetime when the item was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets ledger_account_group
     *
     * @return \Swagger\Client\Model\CoaGroupType
     */
    public function getLedgerAccountGroup()
    {
        return $this->container['ledger_account_group'];
    }

    /**
     * Sets ledger_account_group
     *
     * @param \Swagger\Client\Model\CoaGroupType $ledger_account_group The ledger account group for the account
     *
     * @return $this
     */
    public function setLedgerAccountGroup($ledger_account_group)
    {
        $this->container['ledger_account_group'] = $ledger_account_group;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name for the ledger account.  Changes to this field do not propagate to other resources, namely not to the name of the associated bank_account (unlike the behaviour of the UI).
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling LedgerAccount., must be smaller than or equal to 200.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name The display name for the ledger account
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        if (!is_null($display_name) && (mb_strlen($display_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling LedgerAccount., must be smaller than or equal to 200.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets visible_scopes
     *
     * @return string[]
     */
    public function getVisibleScopes()
    {
        return $this->container['visible_scopes'];
    }

    /**
     * Sets visible_scopes
     *
     * @param string[] $visible_scopes The visible scopes for the ledger account.  This indicates in which of the UI's areas the ledger account is displayed and available for user selection. Possible entries in this array are `bank`, `sales`, `purchasing`, `other_payment`, `other_receipt`, `reporting`, `journals`, `sales_eu`, `sales_row`, `purchasing_eu`, `purchasing_row` and `purchasing_hrc`.
     *
     * @return $this
     */
    public function setVisibleScopes($visible_scopes)
    {
        $this->container['visible_scopes'] = $visible_scopes;

        return $this;
    }

    /**
     * Gets included_in_chart
     *
     * @return bool
     */
    public function getIncludedInChart()
    {
        return $this->container['included_in_chart'];
    }

    /**
     * Sets included_in_chart
     *
     * @param bool $included_in_chart Indicates whether the ledger account is included in the chart of accounts
     *
     * @return $this
     */
    public function setIncludedInChart($included_in_chart)
    {
        $this->container['included_in_chart'] = $included_in_chart;

        return $this;
    }

    /**
     * Gets nominal_code
     *
     * @return int
     */
    public function getNominalCode()
    {
        return $this->container['nominal_code'];
    }

    /**
     * Sets nominal_code
     *
     * @param int $nominal_code The nominal code of the ledger account
     *
     * @return $this
     */
    public function setNominalCode($nominal_code)
    {
        $this->container['nominal_code'] = $nominal_code;

        return $this;
    }

    /**
     * Gets ledger_account_type
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getLedgerAccountType()
    {
        return $this->container['ledger_account_type'];
    }

    /**
     * Sets ledger_account_type
     *
     * @param \Swagger\Client\Model\Base $ledger_account_type The ledger account type for the ledger account
     *
     * @return $this
     */
    public function setLedgerAccountType($ledger_account_type)
    {
        $this->container['ledger_account_type'] = $ledger_account_type;

        return $this;
    }

    /**
     * Gets ledger_account_classification
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getLedgerAccountClassification()
    {
        return $this->container['ledger_account_classification'];
    }

    /**
     * Sets ledger_account_classification
     *
     * @param \Swagger\Client\Model\Base $ledger_account_classification The ledger account classification for the ledger account
     *
     * @return $this
     */
    public function setLedgerAccountClassification($ledger_account_classification)
    {
        $this->container['ledger_account_classification'] = $ledger_account_classification;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param \Swagger\Client\Model\Base $tax_rate The default tax rate for the ledger account
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets fixed_tax_rate
     *
     * @return bool
     */
    public function getFixedTaxRate()
    {
        return $this->container['fixed_tax_rate'];
    }

    /**
     * Sets fixed_tax_rate
     *
     * @param bool $fixed_tax_rate Indicates whether the default tax rate is fixed or may be changed per transaction
     *
     * @return $this
     */
    public function setFixedTaxRate($fixed_tax_rate)
    {
        $this->container['fixed_tax_rate'] = $fixed_tax_rate;

        return $this;
    }

    /**
     * Gets visible_in_banking
     *
     * @return bool
     */
    public function getVisibleInBanking()
    {
        return $this->container['visible_in_banking'];
    }

    /**
     * Sets visible_in_banking
     *
     * @param bool $visible_in_banking Indicates whether the ledger account is displayed in the banking area of the application
     *
     * @return $this
     */
    public function setVisibleInBanking($visible_in_banking)
    {
        $this->container['visible_in_banking'] = $visible_in_banking;

        return $this;
    }

    /**
     * Gets visible_in_expenses
     *
     * @return bool
     */
    public function getVisibleInExpenses()
    {
        return $this->container['visible_in_expenses'];
    }

    /**
     * Sets visible_in_expenses
     *
     * @param bool $visible_in_expenses Indicates whether the ledger account is displayed in the purchases area of the application
     *
     * @return $this
     */
    public function setVisibleInExpenses($visible_in_expenses)
    {
        $this->container['visible_in_expenses'] = $visible_in_expenses;

        return $this;
    }

    /**
     * Gets visible_in_journals
     *
     * @return bool
     */
    public function getVisibleInJournals()
    {
        return $this->container['visible_in_journals'];
    }

    /**
     * Sets visible_in_journals
     *
     * @param bool $visible_in_journals Indicates whether the ledger account is displayed in the journals area of the application
     *
     * @return $this
     */
    public function setVisibleInJournals($visible_in_journals)
    {
        $this->container['visible_in_journals'] = $visible_in_journals;

        return $this;
    }

    /**
     * Gets visible_in_other_payments
     *
     * @return bool
     */
    public function getVisibleInOtherPayments()
    {
        return $this->container['visible_in_other_payments'];
    }

    /**
     * Sets visible_in_other_payments
     *
     * @param bool $visible_in_other_payments Indicates whether the ledger account is displayed in the other payments area of the application
     *
     * @return $this
     */
    public function setVisibleInOtherPayments($visible_in_other_payments)
    {
        $this->container['visible_in_other_payments'] = $visible_in_other_payments;

        return $this;
    }

    /**
     * Gets visible_in_other_receipts
     *
     * @return bool
     */
    public function getVisibleInOtherReceipts()
    {
        return $this->container['visible_in_other_receipts'];
    }

    /**
     * Sets visible_in_other_receipts
     *
     * @param bool $visible_in_other_receipts Indicates whether the ledger account is displayed in the other receipts area of the application
     *
     * @return $this
     */
    public function setVisibleInOtherReceipts($visible_in_other_receipts)
    {
        $this->container['visible_in_other_receipts'] = $visible_in_other_receipts;

        return $this;
    }

    /**
     * Gets visible_in_reporting
     *
     * @return bool
     */
    public function getVisibleInReporting()
    {
        return $this->container['visible_in_reporting'];
    }

    /**
     * Sets visible_in_reporting
     *
     * @param bool $visible_in_reporting Indicates whether the ledger account is displayed in the reporting area of the application
     *
     * @return $this
     */
    public function setVisibleInReporting($visible_in_reporting)
    {
        $this->container['visible_in_reporting'] = $visible_in_reporting;

        return $this;
    }

    /**
     * Gets visible_in_sales
     *
     * @return bool
     */
    public function getVisibleInSales()
    {
        return $this->container['visible_in_sales'];
    }

    /**
     * Sets visible_in_sales
     *
     * @param bool $visible_in_sales Indicates whether the ledger account is displayed in the sales area of the application
     *
     * @return $this
     */
    public function setVisibleInSales($visible_in_sales)
    {
        $this->container['visible_in_sales'] = $visible_in_sales;

        return $this;
    }

    /**
     * Gets balance_details
     *
     * @return \Swagger\Client\Model\LedgerAccountBalanceDetails
     */
    public function getBalanceDetails()
    {
        return $this->container['balance_details'];
    }

    /**
     * Sets balance_details
     *
     * @param \Swagger\Client\Model\LedgerAccountBalanceDetails $balance_details The ledger account balance details for the date range provided
     *
     * @return $this
     */
    public function setBalanceDetails($balance_details)
    {
        $this->container['balance_details'] = $balance_details;

        return $this;
    }

    /**
     * Gets is_control_account
     *
     * @return bool
     */
    public function getIsControlAccount()
    {
        return $this->container['is_control_account'];
    }

    /**
     * Sets is_control_account
     *
     * @param bool $is_control_account Indicates whether the ledger account is a control account.  Control accounts cannot be removed. See also `control_name`.
     *
     * @return $this
     */
    public function setIsControlAccount($is_control_account)
    {
        $this->container['is_control_account'] = $is_control_account;

        return $this;
    }

    /**
     * Gets control_name
     *
     * @return string
     */
    public function getControlName()
    {
        return $this->container['control_name'];
    }

    /**
     * Sets control_name
     *
     * @param string $control_name The control name for the ledger account.  This is used internally by Accounting to identify the correct ledger account for booking taxes etc. You cannot add ledger accounts with control name and you cannot modify the control name of existing ledger accounts.
     *
     * @return $this
     */
    public function setControlName($control_name)
    {
        if (!is_null($control_name) && (mb_strlen($control_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $control_name when calling LedgerAccount., must be smaller than or equal to 255.');
        }

        $this->container['control_name'] = $control_name;

        return $this;
    }

    /**
     * Gets display_formatted
     *
     * @return string
     */
    public function getDisplayFormatted()
    {
        return $this->container['display_formatted'];
    }

    /**
     * Sets display_formatted
     *
     * @param string $display_formatted The display name formatted based on coa_list_order in settings
     *
     * @return $this
     */
    public function setDisplayFormatted($display_formatted)
    {
        $this->container['display_formatted'] = $display_formatted;

        return $this;
    }

    /**
     * Gets tax_recoverable
     *
     * @return bool
     */
    public function getTaxRecoverable()
    {
        return $this->container['tax_recoverable'];
    }

    /**
     * Sets tax_recoverable
     *
     * @param bool $tax_recoverable Indicates that transactions posted to this ledger account have part recoverable taxes (Canada only)
     *
     * @return $this
     */
    public function setTaxRecoverable($tax_recoverable)
    {
        $this->container['tax_recoverable'] = $tax_recoverable;

        return $this;
    }

    /**
     * Gets recoverable_percentage
     *
     * @return double
     */
    public function getRecoverablePercentage()
    {
        return $this->container['recoverable_percentage'];
    }

    /**
     * Sets recoverable_percentage
     *
     * @param double $recoverable_percentage The partial recoverable tax rate (Canada only)
     *
     * @return $this
     */
    public function setRecoverablePercentage($recoverable_percentage)
    {
        $this->container['recoverable_percentage'] = $recoverable_percentage;

        return $this;
    }

    /**
     * Gets non_recoverable_ledger_account
     *
     * @return \Swagger\Client\Model\LedgerAccount
     */
    public function getNonRecoverableLedgerAccount()
    {
        return $this->container['non_recoverable_ledger_account'];
    }

    /**
     * Sets non_recoverable_ledger_account
     *
     * @param \Swagger\Client\Model\LedgerAccount $non_recoverable_ledger_account The non-recoverable ledger account (Canada Only)
     *
     * @return $this
     */
    public function setNonRecoverableLedgerAccount($non_recoverable_ledger_account)
    {
        $this->container['non_recoverable_ledger_account'] = $non_recoverable_ledger_account;

        return $this;
    }

    /**
     * Gets cis_materials
     *
     * @return bool
     */
    public function getCisMaterials()
    {
        return $this->container['cis_materials'];
    }

    /**
     * Sets cis_materials
     *
     * @param bool $cis_materials Indicates whether the ledger account is flagged for CIS Materials
     *
     * @return $this
     */
    public function setCisMaterials($cis_materials)
    {
        $this->container['cis_materials'] = $cis_materials;

        return $this;
    }

    /**
     * Gets tax_instalment
     *
     * @return bool
     */
    public function getTaxInstalment()
    {
        return $this->container['tax_instalment'];
    }

    /**
     * Sets tax_instalment
     *
     * @param bool $tax_instalment Indicates whether the ledger account is flagged for Tax Intalment (Canada only)
     *
     * @return $this
     */
    public function setTaxInstalment($tax_instalment)
    {
        $this->container['tax_instalment'] = $tax_instalment;

        return $this;
    }

    /**
     * Gets cis_labour
     *
     * @return bool
     */
    public function getCisLabour()
    {
        return $this->container['cis_labour'];
    }

    /**
     * Sets cis_labour
     *
     * @param bool $cis_labour Indicates whether the ledger account is flagged for CIS Labour
     *
     * @return $this
     */
    public function setCisLabour($cis_labour)
    {
        $this->container['cis_labour'] = $cis_labour;

        return $this;
    }

    /**
     * Gets gifi_code
     *
     * @return int
     */
    public function getGifiCode()
    {
        return $this->container['gifi_code'];
    }

    /**
     * Sets gifi_code
     *
     * @param int $gifi_code The GIFI code of the ledger account.  GIFI is short for The General Index of Financial Information and it lets the CRA validate tax information electronically instead of manually. Information from financial statements is categorized under the appropriate 4-digit-long GIFI code and entered on corporate income tax returns. GIFI is needed when filing a T2 income tax return.  _Canada only_
     *
     * @return $this
     */
    public function setGifiCode($gifi_code)
    {
        $this->container['gifi_code'] = $gifi_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


