<?php
/**
 * PutServicesService
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PutServicesService Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PutServicesService implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'putServices_service';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'sales_ledger_account_id' => 'string',
        'item_code' => 'string',
        'notes' => 'string',
        'purchase_ledger_account_id' => 'string',
        'sales_tax_rate_id' => 'string',
        'purchase_tax_rate_id' => 'string',
        'source_guid' => 'string',
        'purchase_description' => 'string',
        'usual_supplier_id' => 'string',
        'active' => 'bool',
        'cost_price' => 'double',
        'oss_service' => 'bool',
        'sales_rates' => '\Swagger\Client\Model\PostServicesServiceSalesRates[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'sales_ledger_account_id' => null,
        'item_code' => null,
        'notes' => null,
        'purchase_ledger_account_id' => null,
        'sales_tax_rate_id' => null,
        'purchase_tax_rate_id' => null,
        'source_guid' => null,
        'purchase_description' => null,
        'usual_supplier_id' => null,
        'active' => null,
        'cost_price' => 'double',
        'oss_service' => null,
        'sales_rates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'sales_ledger_account_id' => 'sales_ledger_account_id',
        'item_code' => 'item_code',
        'notes' => 'notes',
        'purchase_ledger_account_id' => 'purchase_ledger_account_id',
        'sales_tax_rate_id' => 'sales_tax_rate_id',
        'purchase_tax_rate_id' => 'purchase_tax_rate_id',
        'source_guid' => 'source_guid',
        'purchase_description' => 'purchase_description',
        'usual_supplier_id' => 'usual_supplier_id',
        'active' => 'active',
        'cost_price' => 'cost_price',
        'oss_service' => 'oss_service',
        'sales_rates' => 'sales_rates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'sales_ledger_account_id' => 'setSalesLedgerAccountId',
        'item_code' => 'setItemCode',
        'notes' => 'setNotes',
        'purchase_ledger_account_id' => 'setPurchaseLedgerAccountId',
        'sales_tax_rate_id' => 'setSalesTaxRateId',
        'purchase_tax_rate_id' => 'setPurchaseTaxRateId',
        'source_guid' => 'setSourceGuid',
        'purchase_description' => 'setPurchaseDescription',
        'usual_supplier_id' => 'setUsualSupplierId',
        'active' => 'setActive',
        'cost_price' => 'setCostPrice',
        'oss_service' => 'setOssService',
        'sales_rates' => 'setSalesRates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'sales_ledger_account_id' => 'getSalesLedgerAccountId',
        'item_code' => 'getItemCode',
        'notes' => 'getNotes',
        'purchase_ledger_account_id' => 'getPurchaseLedgerAccountId',
        'sales_tax_rate_id' => 'getSalesTaxRateId',
        'purchase_tax_rate_id' => 'getPurchaseTaxRateId',
        'source_guid' => 'getSourceGuid',
        'purchase_description' => 'getPurchaseDescription',
        'usual_supplier_id' => 'getUsualSupplierId',
        'active' => 'getActive',
        'cost_price' => 'getCostPrice',
        'oss_service' => 'getOssService',
        'sales_rates' => 'getSalesRates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['sales_ledger_account_id'] = isset($data['sales_ledger_account_id']) ? $data['sales_ledger_account_id'] : null;
        $this->container['item_code'] = isset($data['item_code']) ? $data['item_code'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['purchase_ledger_account_id'] = isset($data['purchase_ledger_account_id']) ? $data['purchase_ledger_account_id'] : null;
        $this->container['sales_tax_rate_id'] = isset($data['sales_tax_rate_id']) ? $data['sales_tax_rate_id'] : null;
        $this->container['purchase_tax_rate_id'] = isset($data['purchase_tax_rate_id']) ? $data['purchase_tax_rate_id'] : null;
        $this->container['source_guid'] = isset($data['source_guid']) ? $data['source_guid'] : null;
        $this->container['purchase_description'] = isset($data['purchase_description']) ? $data['purchase_description'] : null;
        $this->container['usual_supplier_id'] = isset($data['usual_supplier_id']) ? $data['usual_supplier_id'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['cost_price'] = isset($data['cost_price']) ? $data['cost_price'] : null;
        $this->container['oss_service'] = isset($data['oss_service']) ? $data['oss_service'] : null;
        $this->container['sales_rates'] = isset($data['sales_rates']) ? $data['sales_rates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The service description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets sales_ledger_account_id
     *
     * @return string
     */
    public function getSalesLedgerAccountId()
    {
        return $this->container['sales_ledger_account_id'];
    }

    /**
     * Sets sales_ledger_account_id
     *
     * @param string $sales_ledger_account_id The sales ledger account for the service
     *
     * @return $this
     */
    public function setSalesLedgerAccountId($sales_ledger_account_id)
    {
        $this->container['sales_ledger_account_id'] = $sales_ledger_account_id;

        return $this;
    }

    /**
     * Gets item_code
     *
     * @return string
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     *
     * @param string $item_code The item code for the service
     *
     * @return $this
     */
    public function setItemCode($item_code)
    {
        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes The notes for the service
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets purchase_ledger_account_id
     *
     * @return string
     */
    public function getPurchaseLedgerAccountId()
    {
        return $this->container['purchase_ledger_account_id'];
    }

    /**
     * Sets purchase_ledger_account_id
     *
     * @param string $purchase_ledger_account_id The ID of the Purchase Ledger Account.
     *
     * @return $this
     */
    public function setPurchaseLedgerAccountId($purchase_ledger_account_id)
    {
        $this->container['purchase_ledger_account_id'] = $purchase_ledger_account_id;

        return $this;
    }

    /**
     * Gets sales_tax_rate_id
     *
     * @return string
     */
    public function getSalesTaxRateId()
    {
        return $this->container['sales_tax_rate_id'];
    }

    /**
     * Sets sales_tax_rate_id
     *
     * @param string $sales_tax_rate_id The ID of the Sales Tax Rate.
     *
     * @return $this
     */
    public function setSalesTaxRateId($sales_tax_rate_id)
    {
        $this->container['sales_tax_rate_id'] = $sales_tax_rate_id;

        return $this;
    }

    /**
     * Gets purchase_tax_rate_id
     *
     * @return string
     */
    public function getPurchaseTaxRateId()
    {
        return $this->container['purchase_tax_rate_id'];
    }

    /**
     * Sets purchase_tax_rate_id
     *
     * @param string $purchase_tax_rate_id The ID of the Purchase Tax Rate.
     *
     * @return $this
     */
    public function setPurchaseTaxRateId($purchase_tax_rate_id)
    {
        $this->container['purchase_tax_rate_id'] = $purchase_tax_rate_id;

        return $this;
    }

    /**
     * Gets source_guid
     *
     * @return string
     */
    public function getSourceGuid()
    {
        return $this->container['source_guid'];
    }

    /**
     * Sets source_guid
     *
     * @param string $source_guid Used when importing services from external sources
     *
     * @return $this
     */
    public function setSourceGuid($source_guid)
    {
        $this->container['source_guid'] = $source_guid;

        return $this;
    }

    /**
     * Gets purchase_description
     *
     * @return string
     */
    public function getPurchaseDescription()
    {
        return $this->container['purchase_description'];
    }

    /**
     * Sets purchase_description
     *
     * @param string $purchase_description The service purchase description
     *
     * @return $this
     */
    public function setPurchaseDescription($purchase_description)
    {
        $this->container['purchase_description'] = $purchase_description;

        return $this;
    }

    /**
     * Gets usual_supplier_id
     *
     * @return string
     */
    public function getUsualSupplierId()
    {
        return $this->container['usual_supplier_id'];
    }

    /**
     * Sets usual_supplier_id
     *
     * @param string $usual_supplier_id The ID of the Usual Supplier.
     *
     * @return $this
     */
    public function setUsualSupplierId($usual_supplier_id)
    {
        $this->container['usual_supplier_id'] = $usual_supplier_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Indicates whether the service is active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return double
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param double $cost_price The cost price of the service
     *
     * @return $this
     */
    public function setCostPrice($cost_price)
    {
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets oss_service
     *
     * @return bool
     */
    public function getOssService()
    {
        return $this->container['oss_service'];
    }

    /**
     * Sets oss_service
     *
     * @param bool $oss_service Indicates whether the service is One Stop Shop
     *
     * @return $this
     */
    public function setOssService($oss_service)
    {
        $this->container['oss_service'] = $oss_service;

        return $this;
    }

    /**
     * Gets sales_rates
     *
     * @return \Swagger\Client\Model\PostServicesServiceSalesRates[]
     */
    public function getSalesRates()
    {
        return $this->container['sales_rates'];
    }

    /**
     * Sets sales_rates
     *
     * @param \Swagger\Client\Model\PostServicesServiceSalesRates[] $sales_rates sales_rates
     *
     * @return $this
     */
    public function setSalesRates($sales_rates)
    {
        $this->container['sales_rates'] = $sales_rates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


