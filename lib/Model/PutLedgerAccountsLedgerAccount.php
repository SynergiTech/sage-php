<?php
/**
 * PutLedgerAccountsLedgerAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PutLedgerAccountsLedgerAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PutLedgerAccountsLedgerAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'putLedgerAccounts_ledger_account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ledger_account_type_id' => 'string',
        'included_in_chart' => 'bool',
        'name' => 'string',
        'display_name' => 'string',
        'nominal_code' => 'int',
        'ledger_account_classification_id' => 'string',
        'tax_rate_id' => 'string',
        'fixed_tax_rate' => 'bool',
        'visible_in_banking' => 'bool',
        'visible_in_expenses' => 'bool',
        'visible_in_journals' => 'bool',
        'visible_in_other_payments' => 'bool',
        'visible_in_other_receipts' => 'bool',
        'visible_in_reporting' => 'bool',
        'visible_in_sales' => 'bool',
        'control_name' => 'string',
        'tax_recoverable' => 'bool',
        'recoverable_percentage' => 'double',
        'non_recoverable_ledger_account_id' => 'string',
        'cis_materials' => 'bool',
        'cis_labour' => 'bool',
        'gifi_code' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ledger_account_type_id' => null,
        'included_in_chart' => null,
        'name' => null,
        'display_name' => null,
        'nominal_code' => 'int32',
        'ledger_account_classification_id' => null,
        'tax_rate_id' => null,
        'fixed_tax_rate' => null,
        'visible_in_banking' => null,
        'visible_in_expenses' => null,
        'visible_in_journals' => null,
        'visible_in_other_payments' => null,
        'visible_in_other_receipts' => null,
        'visible_in_reporting' => null,
        'visible_in_sales' => null,
        'control_name' => null,
        'tax_recoverable' => null,
        'recoverable_percentage' => 'double',
        'non_recoverable_ledger_account_id' => null,
        'cis_materials' => null,
        'cis_labour' => null,
        'gifi_code' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ledger_account_type_id' => 'ledger_account_type_id',
        'included_in_chart' => 'included_in_chart',
        'name' => 'name',
        'display_name' => 'display_name',
        'nominal_code' => 'nominal_code',
        'ledger_account_classification_id' => 'ledger_account_classification_id',
        'tax_rate_id' => 'tax_rate_id',
        'fixed_tax_rate' => 'fixed_tax_rate',
        'visible_in_banking' => 'visible_in_banking',
        'visible_in_expenses' => 'visible_in_expenses',
        'visible_in_journals' => 'visible_in_journals',
        'visible_in_other_payments' => 'visible_in_other_payments',
        'visible_in_other_receipts' => 'visible_in_other_receipts',
        'visible_in_reporting' => 'visible_in_reporting',
        'visible_in_sales' => 'visible_in_sales',
        'control_name' => 'control_name',
        'tax_recoverable' => 'tax_recoverable',
        'recoverable_percentage' => 'recoverable_percentage',
        'non_recoverable_ledger_account_id' => 'non_recoverable_ledger_account_id',
        'cis_materials' => 'cis_materials',
        'cis_labour' => 'cis_labour',
        'gifi_code' => 'gifi_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ledger_account_type_id' => 'setLedgerAccountTypeId',
        'included_in_chart' => 'setIncludedInChart',
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'nominal_code' => 'setNominalCode',
        'ledger_account_classification_id' => 'setLedgerAccountClassificationId',
        'tax_rate_id' => 'setTaxRateId',
        'fixed_tax_rate' => 'setFixedTaxRate',
        'visible_in_banking' => 'setVisibleInBanking',
        'visible_in_expenses' => 'setVisibleInExpenses',
        'visible_in_journals' => 'setVisibleInJournals',
        'visible_in_other_payments' => 'setVisibleInOtherPayments',
        'visible_in_other_receipts' => 'setVisibleInOtherReceipts',
        'visible_in_reporting' => 'setVisibleInReporting',
        'visible_in_sales' => 'setVisibleInSales',
        'control_name' => 'setControlName',
        'tax_recoverable' => 'setTaxRecoverable',
        'recoverable_percentage' => 'setRecoverablePercentage',
        'non_recoverable_ledger_account_id' => 'setNonRecoverableLedgerAccountId',
        'cis_materials' => 'setCisMaterials',
        'cis_labour' => 'setCisLabour',
        'gifi_code' => 'setGifiCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ledger_account_type_id' => 'getLedgerAccountTypeId',
        'included_in_chart' => 'getIncludedInChart',
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'nominal_code' => 'getNominalCode',
        'ledger_account_classification_id' => 'getLedgerAccountClassificationId',
        'tax_rate_id' => 'getTaxRateId',
        'fixed_tax_rate' => 'getFixedTaxRate',
        'visible_in_banking' => 'getVisibleInBanking',
        'visible_in_expenses' => 'getVisibleInExpenses',
        'visible_in_journals' => 'getVisibleInJournals',
        'visible_in_other_payments' => 'getVisibleInOtherPayments',
        'visible_in_other_receipts' => 'getVisibleInOtherReceipts',
        'visible_in_reporting' => 'getVisibleInReporting',
        'visible_in_sales' => 'getVisibleInSales',
        'control_name' => 'getControlName',
        'tax_recoverable' => 'getTaxRecoverable',
        'recoverable_percentage' => 'getRecoverablePercentage',
        'non_recoverable_ledger_account_id' => 'getNonRecoverableLedgerAccountId',
        'cis_materials' => 'getCisMaterials',
        'cis_labour' => 'getCisLabour',
        'gifi_code' => 'getGifiCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ledger_account_type_id'] = isset($data['ledger_account_type_id']) ? $data['ledger_account_type_id'] : null;
        $this->container['included_in_chart'] = isset($data['included_in_chart']) ? $data['included_in_chart'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['nominal_code'] = isset($data['nominal_code']) ? $data['nominal_code'] : null;
        $this->container['ledger_account_classification_id'] = isset($data['ledger_account_classification_id']) ? $data['ledger_account_classification_id'] : null;
        $this->container['tax_rate_id'] = isset($data['tax_rate_id']) ? $data['tax_rate_id'] : null;
        $this->container['fixed_tax_rate'] = isset($data['fixed_tax_rate']) ? $data['fixed_tax_rate'] : null;
        $this->container['visible_in_banking'] = isset($data['visible_in_banking']) ? $data['visible_in_banking'] : null;
        $this->container['visible_in_expenses'] = isset($data['visible_in_expenses']) ? $data['visible_in_expenses'] : null;
        $this->container['visible_in_journals'] = isset($data['visible_in_journals']) ? $data['visible_in_journals'] : null;
        $this->container['visible_in_other_payments'] = isset($data['visible_in_other_payments']) ? $data['visible_in_other_payments'] : null;
        $this->container['visible_in_other_receipts'] = isset($data['visible_in_other_receipts']) ? $data['visible_in_other_receipts'] : null;
        $this->container['visible_in_reporting'] = isset($data['visible_in_reporting']) ? $data['visible_in_reporting'] : null;
        $this->container['visible_in_sales'] = isset($data['visible_in_sales']) ? $data['visible_in_sales'] : null;
        $this->container['control_name'] = isset($data['control_name']) ? $data['control_name'] : null;
        $this->container['tax_recoverable'] = isset($data['tax_recoverable']) ? $data['tax_recoverable'] : null;
        $this->container['recoverable_percentage'] = isset($data['recoverable_percentage']) ? $data['recoverable_percentage'] : null;
        $this->container['non_recoverable_ledger_account_id'] = isset($data['non_recoverable_ledger_account_id']) ? $data['non_recoverable_ledger_account_id'] : null;
        $this->container['cis_materials'] = isset($data['cis_materials']) ? $data['cis_materials'] : null;
        $this->container['cis_labour'] = isset($data['cis_labour']) ? $data['cis_labour'] : null;
        $this->container['gifi_code'] = isset($data['gifi_code']) ? $data['gifi_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['nominal_code']) && ($this->container['nominal_code'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'nominal_code', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['nominal_code']) && ($this->container['nominal_code'] < 1)) {
            $invalidProperties[] = "invalid value for 'nominal_code', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['gifi_code']) && ($this->container['gifi_code'] > 9999)) {
            $invalidProperties[] = "invalid value for 'gifi_code', must be smaller than or equal to 9999.";
        }

        if (!is_null($this->container['gifi_code']) && ($this->container['gifi_code'] < 1000)) {
            $invalidProperties[] = "invalid value for 'gifi_code', must be bigger than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ledger_account_type_id
     *
     * @return string
     */
    public function getLedgerAccountTypeId()
    {
        return $this->container['ledger_account_type_id'];
    }

    /**
     * Sets ledger_account_type_id
     *
     * @param string $ledger_account_type_id The ledger account type for the ledger account
     *
     * @return $this
     */
    public function setLedgerAccountTypeId($ledger_account_type_id)
    {
        $this->container['ledger_account_type_id'] = $ledger_account_type_id;

        return $this;
    }

    /**
     * Gets included_in_chart
     *
     * @return bool
     */
    public function getIncludedInChart()
    {
        return $this->container['included_in_chart'];
    }

    /**
     * Sets included_in_chart
     *
     * @param bool $included_in_chart Indicates whether the ledger account is included in the chart of accounts
     *
     * @return $this
     */
    public function setIncludedInChart($included_in_chart)
    {
        $this->container['included_in_chart'] = $included_in_chart;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name for the ledger account.  Changes to this field do not propagate to other resources, namely not to the name of the associated bank_account (unlike the behaviour of the UI).
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name The display name for the ledger account
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets nominal_code
     *
     * @return int
     */
    public function getNominalCode()
    {
        return $this->container['nominal_code'];
    }

    /**
     * Sets nominal_code
     *
     * @param int $nominal_code The nominal code of the ledger account
     *
     * @return $this
     */
    public function setNominalCode($nominal_code)
    {

        if (!is_null($nominal_code) && ($nominal_code > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $nominal_code when calling PutLedgerAccountsLedgerAccount., must be smaller than or equal to 99999999.');
        }
        if (!is_null($nominal_code) && ($nominal_code < 1)) {
            throw new \InvalidArgumentException('invalid value for $nominal_code when calling PutLedgerAccountsLedgerAccount., must be bigger than or equal to 1.');
        }

        $this->container['nominal_code'] = $nominal_code;

        return $this;
    }

    /**
     * Gets ledger_account_classification_id
     *
     * @return string
     */
    public function getLedgerAccountClassificationId()
    {
        return $this->container['ledger_account_classification_id'];
    }

    /**
     * Sets ledger_account_classification_id
     *
     * @param string $ledger_account_classification_id The ID of the Ledger Account Classification.
     *
     * @return $this
     */
    public function setLedgerAccountClassificationId($ledger_account_classification_id)
    {
        $this->container['ledger_account_classification_id'] = $ledger_account_classification_id;

        return $this;
    }

    /**
     * Gets tax_rate_id
     *
     * @return string
     */
    public function getTaxRateId()
    {
        return $this->container['tax_rate_id'];
    }

    /**
     * Sets tax_rate_id
     *
     * @param string $tax_rate_id The ID of the Tax Rate.
     *
     * @return $this
     */
    public function setTaxRateId($tax_rate_id)
    {
        $this->container['tax_rate_id'] = $tax_rate_id;

        return $this;
    }

    /**
     * Gets fixed_tax_rate
     *
     * @return bool
     */
    public function getFixedTaxRate()
    {
        return $this->container['fixed_tax_rate'];
    }

    /**
     * Sets fixed_tax_rate
     *
     * @param bool $fixed_tax_rate Indicates whether the default tax rate is fixed or may be changed per transaction
     *
     * @return $this
     */
    public function setFixedTaxRate($fixed_tax_rate)
    {
        $this->container['fixed_tax_rate'] = $fixed_tax_rate;

        return $this;
    }

    /**
     * Gets visible_in_banking
     *
     * @return bool
     */
    public function getVisibleInBanking()
    {
        return $this->container['visible_in_banking'];
    }

    /**
     * Sets visible_in_banking
     *
     * @param bool $visible_in_banking Indicates whether the ledger account is displayed in the banking area of the application
     *
     * @return $this
     */
    public function setVisibleInBanking($visible_in_banking)
    {
        $this->container['visible_in_banking'] = $visible_in_banking;

        return $this;
    }

    /**
     * Gets visible_in_expenses
     *
     * @return bool
     */
    public function getVisibleInExpenses()
    {
        return $this->container['visible_in_expenses'];
    }

    /**
     * Sets visible_in_expenses
     *
     * @param bool $visible_in_expenses Indicates whether the ledger account is displayed in the purchases area of the application
     *
     * @return $this
     */
    public function setVisibleInExpenses($visible_in_expenses)
    {
        $this->container['visible_in_expenses'] = $visible_in_expenses;

        return $this;
    }

    /**
     * Gets visible_in_journals
     *
     * @return bool
     */
    public function getVisibleInJournals()
    {
        return $this->container['visible_in_journals'];
    }

    /**
     * Sets visible_in_journals
     *
     * @param bool $visible_in_journals Indicates whether the ledger account is displayed in the journals area of the application
     *
     * @return $this
     */
    public function setVisibleInJournals($visible_in_journals)
    {
        $this->container['visible_in_journals'] = $visible_in_journals;

        return $this;
    }

    /**
     * Gets visible_in_other_payments
     *
     * @return bool
     */
    public function getVisibleInOtherPayments()
    {
        return $this->container['visible_in_other_payments'];
    }

    /**
     * Sets visible_in_other_payments
     *
     * @param bool $visible_in_other_payments Indicates whether the ledger account is displayed in the other payments area of the application
     *
     * @return $this
     */
    public function setVisibleInOtherPayments($visible_in_other_payments)
    {
        $this->container['visible_in_other_payments'] = $visible_in_other_payments;

        return $this;
    }

    /**
     * Gets visible_in_other_receipts
     *
     * @return bool
     */
    public function getVisibleInOtherReceipts()
    {
        return $this->container['visible_in_other_receipts'];
    }

    /**
     * Sets visible_in_other_receipts
     *
     * @param bool $visible_in_other_receipts Indicates whether the ledger account is displayed in the other receipts area of the application
     *
     * @return $this
     */
    public function setVisibleInOtherReceipts($visible_in_other_receipts)
    {
        $this->container['visible_in_other_receipts'] = $visible_in_other_receipts;

        return $this;
    }

    /**
     * Gets visible_in_reporting
     *
     * @return bool
     */
    public function getVisibleInReporting()
    {
        return $this->container['visible_in_reporting'];
    }

    /**
     * Sets visible_in_reporting
     *
     * @param bool $visible_in_reporting Indicates whether the ledger account is displayed in the reporting area of the application
     *
     * @return $this
     */
    public function setVisibleInReporting($visible_in_reporting)
    {
        $this->container['visible_in_reporting'] = $visible_in_reporting;

        return $this;
    }

    /**
     * Gets visible_in_sales
     *
     * @return bool
     */
    public function getVisibleInSales()
    {
        return $this->container['visible_in_sales'];
    }

    /**
     * Sets visible_in_sales
     *
     * @param bool $visible_in_sales Indicates whether the ledger account is displayed in the sales area of the application
     *
     * @return $this
     */
    public function setVisibleInSales($visible_in_sales)
    {
        $this->container['visible_in_sales'] = $visible_in_sales;

        return $this;
    }

    /**
     * Gets control_name
     *
     * @return string
     */
    public function getControlName()
    {
        return $this->container['control_name'];
    }

    /**
     * Sets control_name
     *
     * @param string $control_name The control name for the ledger account.  This is used internally by Accounting to identify the correct ledger account for booking taxes etc. You cannot add ledger accounts with control name and you cannot modify the control name of existing ledger accounts.
     *
     * @return $this
     */
    public function setControlName($control_name)
    {
        $this->container['control_name'] = $control_name;

        return $this;
    }

    /**
     * Gets tax_recoverable
     *
     * @return bool
     */
    public function getTaxRecoverable()
    {
        return $this->container['tax_recoverable'];
    }

    /**
     * Sets tax_recoverable
     *
     * @param bool $tax_recoverable Indicates that transactions posted to this ledger account have part recoverable taxes (Canada only)
     *
     * @return $this
     */
    public function setTaxRecoverable($tax_recoverable)
    {
        $this->container['tax_recoverable'] = $tax_recoverable;

        return $this;
    }

    /**
     * Gets recoverable_percentage
     *
     * @return double
     */
    public function getRecoverablePercentage()
    {
        return $this->container['recoverable_percentage'];
    }

    /**
     * Sets recoverable_percentage
     *
     * @param double $recoverable_percentage The partial recoverable tax rate (Canada only)
     *
     * @return $this
     */
    public function setRecoverablePercentage($recoverable_percentage)
    {
        $this->container['recoverable_percentage'] = $recoverable_percentage;

        return $this;
    }

    /**
     * Gets non_recoverable_ledger_account_id
     *
     * @return string
     */
    public function getNonRecoverableLedgerAccountId()
    {
        return $this->container['non_recoverable_ledger_account_id'];
    }

    /**
     * Sets non_recoverable_ledger_account_id
     *
     * @param string $non_recoverable_ledger_account_id The ID of the Non Recoverable Ledger Account.
     *
     * @return $this
     */
    public function setNonRecoverableLedgerAccountId($non_recoverable_ledger_account_id)
    {
        $this->container['non_recoverable_ledger_account_id'] = $non_recoverable_ledger_account_id;

        return $this;
    }

    /**
     * Gets cis_materials
     *
     * @return bool
     */
    public function getCisMaterials()
    {
        return $this->container['cis_materials'];
    }

    /**
     * Sets cis_materials
     *
     * @param bool $cis_materials Indicates whether the ledger account is flagged for CIS Materials
     *
     * @return $this
     */
    public function setCisMaterials($cis_materials)
    {
        $this->container['cis_materials'] = $cis_materials;

        return $this;
    }

    /**
     * Gets cis_labour
     *
     * @return bool
     */
    public function getCisLabour()
    {
        return $this->container['cis_labour'];
    }

    /**
     * Sets cis_labour
     *
     * @param bool $cis_labour Indicates whether the ledger account is flagged for CIS Labour
     *
     * @return $this
     */
    public function setCisLabour($cis_labour)
    {
        $this->container['cis_labour'] = $cis_labour;

        return $this;
    }

    /**
     * Gets gifi_code
     *
     * @return int
     */
    public function getGifiCode()
    {
        return $this->container['gifi_code'];
    }

    /**
     * Sets gifi_code
     *
     * @param int $gifi_code The GIFI code of the ledger account.  GIFI is short for The General Index of Financial Information and it lets the CRA validate tax information electronically instead of manually. Information from financial statements is categorized under the appropriate 4-digit-long GIFI code and entered on corporate income tax returns. GIFI is needed when filing a T2 income tax return.  _Canada only_
     *
     * @return $this
     */
    public function setGifiCode($gifi_code)
    {

        if (!is_null($gifi_code) && ($gifi_code > 9999)) {
            throw new \InvalidArgumentException('invalid value for $gifi_code when calling PutLedgerAccountsLedgerAccount., must be smaller than or equal to 9999.');
        }
        if (!is_null($gifi_code) && ($gifi_code < 1000)) {
            throw new \InvalidArgumentException('invalid value for $gifi_code when calling PutLedgerAccountsLedgerAccount., must be bigger than or equal to 1000.');
        }

        $this->container['gifi_code'] = $gifi_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


