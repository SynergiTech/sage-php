<?php
/**
 * TransactionOrigin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TransactionOrigin Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionOrigin implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionOrigin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'legacy_id' => 'int',
        'id' => 'string',
        'displayed_as' => 'string',
        'path' => 'string',
        'links' => '\Swagger\Client\Model\Link[]',
        'due_date' => '\DateTime',
        'outstanding_amount' => 'double',
        'currency' => '\Swagger\Client\Model\Base',
        'status' => '\Swagger\Client\Model\Base',
        'sent' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'legacy_id' => 'int32',
        'id' => null,
        'displayed_as' => null,
        'path' => null,
        'links' => null,
        'due_date' => 'date',
        'outstanding_amount' => 'double',
        'currency' => null,
        'status' => null,
        'sent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legacy_id' => 'legacy_id',
        'id' => 'id',
        'displayed_as' => 'displayed_as',
        'path' => '$path',
        'links' => 'links',
        'due_date' => 'due_date',
        'outstanding_amount' => 'outstanding_amount',
        'currency' => 'currency',
        'status' => 'status',
        'sent' => 'sent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legacy_id' => 'setLegacyId',
        'id' => 'setId',
        'displayed_as' => 'setDisplayedAs',
        'path' => 'setPath',
        'links' => 'setLinks',
        'due_date' => 'setDueDate',
        'outstanding_amount' => 'setOutstandingAmount',
        'currency' => 'setCurrency',
        'status' => 'setStatus',
        'sent' => 'setSent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legacy_id' => 'getLegacyId',
        'id' => 'getId',
        'displayed_as' => 'getDisplayedAs',
        'path' => 'getPath',
        'links' => 'getLinks',
        'due_date' => 'getDueDate',
        'outstanding_amount' => 'getOutstandingAmount',
        'currency' => 'getCurrency',
        'status' => 'getStatus',
        'sent' => 'getSent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['legacy_id'] = isset($data['legacy_id']) ? $data['legacy_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['displayed_as'] = isset($data['displayed_as']) ? $data['displayed_as'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['outstanding_amount'] = isset($data['outstanding_amount']) ? $data['outstanding_amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sent'] = isset($data['sent']) ? $data['sent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacy_id
     *
     * @return int
     */
    public function getLegacyId()
    {
        return $this->container['legacy_id'];
    }

    /**
     * Sets legacy_id
     *
     * @param int $legacy_id The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId($legacy_id)
    {
        $this->container['legacy_id'] = $legacy_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayed_as
     *
     * @return string
     */
    public function getDisplayedAs()
    {
        return $this->container['displayed_as'];
    }

    /**
     * Sets displayed_as
     *
     * @param string $displayed_as The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs($displayed_as)
    {
        $this->container['displayed_as'] = $displayed_as;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The API path for the resource
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\Link[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\Link[] $links Links for the resource
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date The due date of the associated item, e.g. an invoice This attribute is only part of the response when the GET paremeter `expand_origin=true` is set in the request URL. Even then, it is only available on transaction origins found at the following endpoints: [\"/contact_opening_balance\", \"/purchase_corrective_invoice\", \"/sales_corrective_invoice\", \"/purchase_credit_note\", \"/purchase_invoice\", \"/purchase_quick_entry\", \"/sales_credit_note\", \"/sales_estimate\", \"/sales_invoice\", \"/sales_quick_entry\", \"/sales_quote\"]. There are other resources, e.g. bank transfers, bank opening balances, or journals, which--though possibly origins of a transaction--can never have this attribute.
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets outstanding_amount
     *
     * @return double
     */
    public function getOutstandingAmount()
    {
        return $this->container['outstanding_amount'];
    }

    /**
     * Sets outstanding_amount
     *
     * @param double $outstanding_amount The outstanding amount of the associated item, e.g. an invoice This attribute is only part of the response when the GET paremeter `expand_origin=true` is set in the request URL. Even then, it is only available on transaction origins found at the following endpoints: [\"/contact_opening_balance\", \"/purchase_corrective_invoice\", \"/sales_corrective_invoice\", \"/purchase_credit_note\", \"/purchase_invoice\", \"/purchase_quick_entry\", \"/sales_credit_note\", \"/sales_estimate\", \"/sales_invoice\", \"/sales_quick_entry\", \"/sales_quote\"]. There are other resources, e.g. bank transfers, bank opening balances, or journals, which--though possibly origins of a transaction--can never have this attribute.
     *
     * @return $this
     */
    public function setOutstandingAmount($outstanding_amount)
    {
        $this->container['outstanding_amount'] = $outstanding_amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Swagger\Client\Model\Base $currency The currency of the transaction This attribute is only part of the response when the GET paremeter `expand_origin=true` is set in the request URL. Even then, it is only available on transaction origins found at the following endpoints: [\"/contact_opening_balance\", \"/purchase_corrective_invoice\", \"/sales_corrective_invoice\", \"/purchase_credit_note\", \"/purchase_invoice\", \"/purchase_quick_entry\", \"/sales_credit_note\", \"/sales_estimate\", \"/sales_invoice\", \"/sales_quick_entry\", \"/sales_quote\"]. There are other resources, e.g. bank transfers, bank opening balances, or journals, which--though possibly origins of a transaction--can never have this attribute.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\Base $status The status of the associated item, e.g. an invoice This attribute is only part of the response when the GET paremeter `expand_origin=true` is set in the request URL. Even then, it is only available on transaction origins found at the following endpoints: [\"/contact_opening_balance\", \"/purchase_corrective_invoice\", \"/sales_corrective_invoice\", \"/purchase_credit_note\", \"/purchase_invoice\", \"/purchase_quick_entry\", \"/sales_credit_note\", \"/sales_estimate\", \"/sales_invoice\", \"/sales_quick_entry\", \"/sales_quote\"]. There are other resources, e.g. bank transfers, bank opening balances, or journals, which--though possibly origins of a transaction--can never have this attribute.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return bool
     */
    public function getSent()
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param bool $sent Indicates whether the associated item, e.g. an invoice, has been sent. This attribute is only present for sales items (not purchase) This attribute is only part of the response when the GET paremeter `expand_origin=true` is set in the request URL. Even then, it is only available on transaction origins found at the following endpoints: [\"/contact_opening_balance\", \"/purchase_corrective_invoice\", \"/sales_corrective_invoice\", \"/purchase_credit_note\", \"/purchase_invoice\", \"/purchase_quick_entry\", \"/sales_credit_note\", \"/sales_estimate\", \"/sales_invoice\", \"/sales_quick_entry\", \"/sales_quote\"]. There are other resources, e.g. bank transfers, bank opening balances, or journals, which--though possibly origins of a transaction--can never have this attribute.
     *
     * @return $this
     */
    public function setSent($sent)
    {
        $this->container['sent'] = $sent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


