<?php
/**
 * PutBusinessSettingsBusinessSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PutBusinessSettingsBusinessSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PutBusinessSettingsBusinessSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'putBusinessSettings_business_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'siret' => 'string',
        'management_centre_member' => 'bool',
        'rcs_number' => 'string',
        'share_capital' => 'double',
        'business_activity_type_id' => 'string',
        'legal_form_type_id' => 'string',
        'auxiliary_accounts_visible' => 'bool',
        'business_type_id' => 'string',
        'country_of_registration_id' => 'string',
        'default_ledger_accounts' => '\Swagger\Client\Model\PutBusinessSettingsBusinessSettingsDefaultLedgerAccounts'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'siret' => null,
        'management_centre_member' => null,
        'rcs_number' => null,
        'share_capital' => 'double',
        'business_activity_type_id' => null,
        'legal_form_type_id' => null,
        'auxiliary_accounts_visible' => null,
        'business_type_id' => null,
        'country_of_registration_id' => null,
        'default_ledger_accounts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'siret' => 'siret',
        'management_centre_member' => 'management_centre_member',
        'rcs_number' => 'rcs_number',
        'share_capital' => 'share_capital',
        'business_activity_type_id' => 'business_activity_type_id',
        'legal_form_type_id' => 'legal_form_type_id',
        'auxiliary_accounts_visible' => 'auxiliary_accounts_visible',
        'business_type_id' => 'business_type_id',
        'country_of_registration_id' => 'country_of_registration_id',
        'default_ledger_accounts' => 'default_ledger_accounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'siret' => 'setSiret',
        'management_centre_member' => 'setManagementCentreMember',
        'rcs_number' => 'setRcsNumber',
        'share_capital' => 'setShareCapital',
        'business_activity_type_id' => 'setBusinessActivityTypeId',
        'legal_form_type_id' => 'setLegalFormTypeId',
        'auxiliary_accounts_visible' => 'setAuxiliaryAccountsVisible',
        'business_type_id' => 'setBusinessTypeId',
        'country_of_registration_id' => 'setCountryOfRegistrationId',
        'default_ledger_accounts' => 'setDefaultLedgerAccounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'siret' => 'getSiret',
        'management_centre_member' => 'getManagementCentreMember',
        'rcs_number' => 'getRcsNumber',
        'share_capital' => 'getShareCapital',
        'business_activity_type_id' => 'getBusinessActivityTypeId',
        'legal_form_type_id' => 'getLegalFormTypeId',
        'auxiliary_accounts_visible' => 'getAuxiliaryAccountsVisible',
        'business_type_id' => 'getBusinessTypeId',
        'country_of_registration_id' => 'getCountryOfRegistrationId',
        'default_ledger_accounts' => 'getDefaultLedgerAccounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['siret'] = isset($data['siret']) ? $data['siret'] : null;
        $this->container['management_centre_member'] = isset($data['management_centre_member']) ? $data['management_centre_member'] : null;
        $this->container['rcs_number'] = isset($data['rcs_number']) ? $data['rcs_number'] : null;
        $this->container['share_capital'] = isset($data['share_capital']) ? $data['share_capital'] : null;
        $this->container['business_activity_type_id'] = isset($data['business_activity_type_id']) ? $data['business_activity_type_id'] : null;
        $this->container['legal_form_type_id'] = isset($data['legal_form_type_id']) ? $data['legal_form_type_id'] : null;
        $this->container['auxiliary_accounts_visible'] = isset($data['auxiliary_accounts_visible']) ? $data['auxiliary_accounts_visible'] : null;
        $this->container['business_type_id'] = isset($data['business_type_id']) ? $data['business_type_id'] : null;
        $this->container['country_of_registration_id'] = isset($data['country_of_registration_id']) ? $data['country_of_registration_id'] : null;
        $this->container['default_ledger_accounts'] = isset($data['default_ledger_accounts']) ? $data['default_ledger_accounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets siret
     *
     * @return string
     */
    public function getSiret()
    {
        return $this->container['siret'];
    }

    /**
     * Sets siret
     *
     * @param string $siret SIRET Number (France only)
     *
     * @return $this
     */
    public function setSiret($siret)
    {
        $this->container['siret'] = $siret;

        return $this;
    }

    /**
     * Gets management_centre_member
     *
     * @return bool
     */
    public function getManagementCentreMember()
    {
        return $this->container['management_centre_member'];
    }

    /**
     * Sets management_centre_member
     *
     * @param bool $management_centre_member Member of Approved Management Centres (France only)
     *
     * @return $this
     */
    public function setManagementCentreMember($management_centre_member)
    {
        $this->container['management_centre_member'] = $management_centre_member;

        return $this;
    }

    /**
     * Gets rcs_number
     *
     * @return string
     */
    public function getRcsNumber()
    {
        return $this->container['rcs_number'];
    }

    /**
     * Sets rcs_number
     *
     * @param string $rcs_number RCS Number (France only)
     *
     * @return $this
     */
    public function setRcsNumber($rcs_number)
    {
        $this->container['rcs_number'] = $rcs_number;

        return $this;
    }

    /**
     * Gets share_capital
     *
     * @return double
     */
    public function getShareCapital()
    {
        return $this->container['share_capital'];
    }

    /**
     * Sets share_capital
     *
     * @param double $share_capital Share Capital (France only)
     *
     * @return $this
     */
    public function setShareCapital($share_capital)
    {
        $this->container['share_capital'] = $share_capital;

        return $this;
    }

    /**
     * Gets business_activity_type_id
     *
     * @return string
     */
    public function getBusinessActivityTypeId()
    {
        return $this->container['business_activity_type_id'];
    }

    /**
     * Sets business_activity_type_id
     *
     * @param string $business_activity_type_id The ID of the Business Activity Type.
     *
     * @return $this
     */
    public function setBusinessActivityTypeId($business_activity_type_id)
    {
        $this->container['business_activity_type_id'] = $business_activity_type_id;

        return $this;
    }

    /**
     * Gets legal_form_type_id
     *
     * @return string
     */
    public function getLegalFormTypeId()
    {
        return $this->container['legal_form_type_id'];
    }

    /**
     * Sets legal_form_type_id
     *
     * @param string $legal_form_type_id The ID of the Legal Form Type.
     *
     * @return $this
     */
    public function setLegalFormTypeId($legal_form_type_id)
    {
        $this->container['legal_form_type_id'] = $legal_form_type_id;

        return $this;
    }

    /**
     * Gets auxiliary_accounts_visible
     *
     * @return bool
     */
    public function getAuxiliaryAccountsVisible()
    {
        return $this->container['auxiliary_accounts_visible'];
    }

    /**
     * Sets auxiliary_accounts_visible
     *
     * @param bool $auxiliary_accounts_visible Auxiliary Accounts Visible (France & Spain only)
     *
     * @return $this
     */
    public function setAuxiliaryAccountsVisible($auxiliary_accounts_visible)
    {
        $this->container['auxiliary_accounts_visible'] = $auxiliary_accounts_visible;

        return $this;
    }

    /**
     * Gets business_type_id
     *
     * @return string
     */
    public function getBusinessTypeId()
    {
        return $this->container['business_type_id'];
    }

    /**
     * Sets business_type_id
     *
     * @param string $business_type_id The ID of the Business Type.
     *
     * @return $this
     */
    public function setBusinessTypeId($business_type_id)
    {
        $this->container['business_type_id'] = $business_type_id;

        return $this;
    }

    /**
     * Gets country_of_registration_id
     *
     * @return string
     */
    public function getCountryOfRegistrationId()
    {
        return $this->container['country_of_registration_id'];
    }

    /**
     * Sets country_of_registration_id
     *
     * @param string $country_of_registration_id The ID of the Country Of Registration.
     *
     * @return $this
     */
    public function setCountryOfRegistrationId($country_of_registration_id)
    {
        $this->container['country_of_registration_id'] = $country_of_registration_id;

        return $this;
    }

    /**
     * Gets default_ledger_accounts
     *
     * @return \Swagger\Client\Model\PutBusinessSettingsBusinessSettingsDefaultLedgerAccounts
     */
    public function getDefaultLedgerAccounts()
    {
        return $this->container['default_ledger_accounts'];
    }

    /**
     * Sets default_ledger_accounts
     *
     * @param \Swagger\Client\Model\PutBusinessSettingsBusinessSettingsDefaultLedgerAccounts $default_ledger_accounts default_ledger_accounts
     *
     * @return $this
     */
    public function setDefaultLedgerAccounts($default_ledger_accounts)
    {
        $this->container['default_ledger_accounts'] = $default_ledger_accounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


