<?php
/**
 * PostContactsContactTaxTreatment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PostContactsContactTaxTreatment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostContactsContactTaxTreatment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'postContacts_contact_tax_treatment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'home_tax' => 'bool',
        'eu_tax_registered' => 'bool',
        'eu_not_tax_registered' => 'bool',
        'rest_of_world_tax' => 'bool',
        'is_importer' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'home_tax' => null,
        'eu_tax_registered' => null,
        'eu_not_tax_registered' => null,
        'rest_of_world_tax' => null,
        'is_importer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'home_tax' => 'home_tax',
        'eu_tax_registered' => 'eu_tax_registered',
        'eu_not_tax_registered' => 'eu_not_tax_registered',
        'rest_of_world_tax' => 'rest_of_world_tax',
        'is_importer' => 'is_importer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'home_tax' => 'setHomeTax',
        'eu_tax_registered' => 'setEuTaxRegistered',
        'eu_not_tax_registered' => 'setEuNotTaxRegistered',
        'rest_of_world_tax' => 'setRestOfWorldTax',
        'is_importer' => 'setIsImporter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'home_tax' => 'getHomeTax',
        'eu_tax_registered' => 'getEuTaxRegistered',
        'eu_not_tax_registered' => 'getEuNotTaxRegistered',
        'rest_of_world_tax' => 'getRestOfWorldTax',
        'is_importer' => 'getIsImporter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['home_tax'] = isset($data['home_tax']) ? $data['home_tax'] : null;
        $this->container['eu_tax_registered'] = isset($data['eu_tax_registered']) ? $data['eu_tax_registered'] : null;
        $this->container['eu_not_tax_registered'] = isset($data['eu_not_tax_registered']) ? $data['eu_not_tax_registered'] : null;
        $this->container['rest_of_world_tax'] = isset($data['rest_of_world_tax']) ? $data['rest_of_world_tax'] : null;
        $this->container['is_importer'] = isset($data['is_importer']) ? $data['is_importer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets home_tax
     *
     * @return bool
     */
    public function getHomeTax()
    {
        return $this->container['home_tax'];
    }

    /**
     * Sets home_tax
     *
     * @param bool $home_tax Indicates a contact where home country tax rules should be applied
     *
     * @return $this
     */
    public function setHomeTax($home_tax)
    {
        $this->container['home_tax'] = $home_tax;

        return $this;
    }

    /**
     * Gets eu_tax_registered
     *
     * @return bool
     */
    public function getEuTaxRegistered()
    {
        return $this->container['eu_tax_registered'];
    }

    /**
     * Sets eu_tax_registered
     *
     * @param bool $eu_tax_registered Indicates a contact where EC tax rules should be applied
     *
     * @return $this
     */
    public function setEuTaxRegistered($eu_tax_registered)
    {
        $this->container['eu_tax_registered'] = $eu_tax_registered;

        return $this;
    }

    /**
     * Gets eu_not_tax_registered
     *
     * @return bool
     */
    public function getEuNotTaxRegistered()
    {
        return $this->container['eu_not_tax_registered'];
    }

    /**
     * Sets eu_not_tax_registered
     *
     * @param bool $eu_not_tax_registered Indicates an EU contact without a tax number - home tax rules should be applied
     *
     * @return $this
     */
    public function setEuNotTaxRegistered($eu_not_tax_registered)
    {
        $this->container['eu_not_tax_registered'] = $eu_not_tax_registered;

        return $this;
    }

    /**
     * Gets rest_of_world_tax
     *
     * @return bool
     */
    public function getRestOfWorldTax()
    {
        return $this->container['rest_of_world_tax'];
    }

    /**
     * Sets rest_of_world_tax
     *
     * @param bool $rest_of_world_tax Indicates a contact where rest of world tax rules should be applied
     *
     * @return $this
     */
    public function setRestOfWorldTax($rest_of_world_tax)
    {
        $this->container['rest_of_world_tax'] = $rest_of_world_tax;

        return $this;
    }

    /**
     * Gets is_importer
     *
     * @return bool
     */
    public function getIsImporter()
    {
        return $this->container['is_importer'];
    }

    /**
     * Sets is_importer
     *
     * @param bool $is_importer Indicates a contact where import rules should be appliedOnly used for suppliers and FR, ES, IE and UK businesses
     *
     * @return $this
     */
    public function setIsImporter($is_importer)
    {
        $this->container['is_importer'] = $is_importer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


