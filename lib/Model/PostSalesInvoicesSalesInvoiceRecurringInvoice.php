<?php
/**
 * PostSalesInvoicesSalesInvoiceRecurringInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PostSalesInvoicesSalesInvoiceRecurringInvoice Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostSalesInvoicesSalesInvoiceRecurringInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'postSalesInvoices_sales_invoice_recurring_invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'frequency' => 'int',
        'on_week_day' => 'int',
        'on_day_number' => 'int',
        'recurrence_type' => 'string',
        'recurrence_status_identifier' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'frequency' => 'int32',
        'on_week_day' => 'int32',
        'on_day_number' => 'int32',
        'recurrence_type' => null,
        'recurrence_status_identifier' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'frequency' => 'frequency',
        'on_week_day' => 'on_week_day',
        'on_day_number' => 'on_day_number',
        'recurrence_type' => 'recurrence_type',
        'recurrence_status_identifier' => 'recurrence_status_identifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'frequency' => 'setFrequency',
        'on_week_day' => 'setOnWeekDay',
        'on_day_number' => 'setOnDayNumber',
        'recurrence_type' => 'setRecurrenceType',
        'recurrence_status_identifier' => 'setRecurrenceStatusIdentifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'frequency' => 'getFrequency',
        'on_week_day' => 'getOnWeekDay',
        'on_day_number' => 'getOnDayNumber',
        'recurrence_type' => 'getRecurrenceType',
        'recurrence_status_identifier' => 'getRecurrenceStatusIdentifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['on_week_day'] = isset($data['on_week_day']) ? $data['on_week_day'] : null;
        $this->container['on_day_number'] = isset($data['on_day_number']) ? $data['on_day_number'] : null;
        $this->container['recurrence_type'] = isset($data['recurrence_type']) ? $data['recurrence_type'] : null;
        $this->container['recurrence_status_identifier'] = isset($data['recurrence_status_identifier']) ? $data['recurrence_status_identifier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets frequency
     *
     * @return int
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param int $frequency The invoice recurrence frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets on_week_day
     *
     * @return int
     */
    public function getOnWeekDay()
    {
        return $this->container['on_week_day'];
    }

    /**
     * Sets on_week_day
     *
     * @param int $on_week_day The invoice recurrence week day
     *
     * @return $this
     */
    public function setOnWeekDay($on_week_day)
    {
        $this->container['on_week_day'] = $on_week_day;

        return $this;
    }

    /**
     * Gets on_day_number
     *
     * @return int
     */
    public function getOnDayNumber()
    {
        return $this->container['on_day_number'];
    }

    /**
     * Sets on_day_number
     *
     * @param int $on_day_number The invoice recurrence day
     *
     * @return $this
     */
    public function setOnDayNumber($on_day_number)
    {
        $this->container['on_day_number'] = $on_day_number;

        return $this;
    }

    /**
     * Gets recurrence_type
     *
     * @return string
     */
    public function getRecurrenceType()
    {
        return $this->container['recurrence_type'];
    }

    /**
     * Sets recurrence_type
     *
     * @param string $recurrence_type The invoice recurrence type
     *
     * @return $this
     */
    public function setRecurrenceType($recurrence_type)
    {
        $this->container['recurrence_type'] = $recurrence_type;

        return $this;
    }

    /**
     * Gets recurrence_status_identifier
     *
     * @return string
     */
    public function getRecurrenceStatusIdentifier()
    {
        return $this->container['recurrence_status_identifier'];
    }

    /**
     * Sets recurrence_status_identifier
     *
     * @param string $recurrence_status_identifier The status of the recurrence
     *
     * @return $this
     */
    public function setRecurrenceStatusIdentifier($recurrence_status_identifier)
    {
        $this->container['recurrence_status_identifier'] = $recurrence_status_identifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


