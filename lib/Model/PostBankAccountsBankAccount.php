<?php
/**
 * PostBankAccountsBankAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PostBankAccountsBankAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostBankAccountsBankAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'postBankAccounts_bank_account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bank_account_type_id' => 'string',
        'ledger_account_id' => 'string',
        'nominal_code' => 'int',
        'default_payment_method_id' => 'string',
        'gifi_code' => 'int',
        'is_active' => 'bool',
        'bank_account_details' => '\Swagger\Client\Model\PostBankAccountsBankAccountBankAccountDetails',
        'main_address' => '\Swagger\Client\Model\PostBankAccountsBankAccountMainAddress',
        'main_contact_person' => '\Swagger\Client\Model\PostBankAccountsBankAccountMainContactPerson',
        'journal_code' => '\Swagger\Client\Model\PostJournalsJournalJournalCode'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bank_account_type_id' => null,
        'ledger_account_id' => null,
        'nominal_code' => 'int32',
        'default_payment_method_id' => null,
        'gifi_code' => 'int32',
        'is_active' => null,
        'bank_account_details' => null,
        'main_address' => null,
        'main_contact_person' => null,
        'journal_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bank_account_type_id' => 'bank_account_type_id',
        'ledger_account_id' => 'ledger_account_id',
        'nominal_code' => 'nominal_code',
        'default_payment_method_id' => 'default_payment_method_id',
        'gifi_code' => 'gifi_code',
        'is_active' => 'is_active',
        'bank_account_details' => 'bank_account_details',
        'main_address' => 'main_address',
        'main_contact_person' => 'main_contact_person',
        'journal_code' => 'journal_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bank_account_type_id' => 'setBankAccountTypeId',
        'ledger_account_id' => 'setLedgerAccountId',
        'nominal_code' => 'setNominalCode',
        'default_payment_method_id' => 'setDefaultPaymentMethodId',
        'gifi_code' => 'setGifiCode',
        'is_active' => 'setIsActive',
        'bank_account_details' => 'setBankAccountDetails',
        'main_address' => 'setMainAddress',
        'main_contact_person' => 'setMainContactPerson',
        'journal_code' => 'setJournalCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bank_account_type_id' => 'getBankAccountTypeId',
        'ledger_account_id' => 'getLedgerAccountId',
        'nominal_code' => 'getNominalCode',
        'default_payment_method_id' => 'getDefaultPaymentMethodId',
        'gifi_code' => 'getGifiCode',
        'is_active' => 'getIsActive',
        'bank_account_details' => 'getBankAccountDetails',
        'main_address' => 'getMainAddress',
        'main_contact_person' => 'getMainContactPerson',
        'journal_code' => 'getJournalCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bank_account_type_id'] = isset($data['bank_account_type_id']) ? $data['bank_account_type_id'] : null;
        $this->container['ledger_account_id'] = isset($data['ledger_account_id']) ? $data['ledger_account_id'] : null;
        $this->container['nominal_code'] = isset($data['nominal_code']) ? $data['nominal_code'] : null;
        $this->container['default_payment_method_id'] = isset($data['default_payment_method_id']) ? $data['default_payment_method_id'] : null;
        $this->container['gifi_code'] = isset($data['gifi_code']) ? $data['gifi_code'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['bank_account_details'] = isset($data['bank_account_details']) ? $data['bank_account_details'] : null;
        $this->container['main_address'] = isset($data['main_address']) ? $data['main_address'] : null;
        $this->container['main_contact_person'] = isset($data['main_contact_person']) ? $data['main_contact_person'] : null;
        $this->container['journal_code'] = isset($data['journal_code']) ? $data['journal_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bank_account_type_id'] === null) {
            $invalidProperties[] = "'bank_account_type_id' can't be null";
        }
        if (!is_null($this->container['nominal_code']) && ($this->container['nominal_code'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'nominal_code', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['nominal_code']) && ($this->container['nominal_code'] < 1)) {
            $invalidProperties[] = "invalid value for 'nominal_code', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['gifi_code']) && ($this->container['gifi_code'] > 9999)) {
            $invalidProperties[] = "invalid value for 'gifi_code', must be smaller than or equal to 9999.";
        }

        if (!is_null($this->container['gifi_code']) && ($this->container['gifi_code'] < 1000)) {
            $invalidProperties[] = "invalid value for 'gifi_code', must be bigger than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bank_account_type_id
     *
     * @return string
     */
    public function getBankAccountTypeId()
    {
        return $this->container['bank_account_type_id'];
    }

    /**
     * Sets bank_account_type_id
     *
     * @param string $bank_account_type_id The bank account type for the bank account
     *
     * @return $this
     */
    public function setBankAccountTypeId($bank_account_type_id)
    {
        $this->container['bank_account_type_id'] = $bank_account_type_id;

        return $this;
    }

    /**
     * Gets ledger_account_id
     *
     * @return string
     */
    public function getLedgerAccountId()
    {
        return $this->container['ledger_account_id'];
    }

    /**
     * Sets ledger_account_id
     *
     * @param string $ledger_account_id The ID of the Ledger Account.
     *
     * @return $this
     */
    public function setLedgerAccountId($ledger_account_id)
    {
        $this->container['ledger_account_id'] = $ledger_account_id;

        return $this;
    }

    /**
     * Gets nominal_code
     *
     * @return int
     */
    public function getNominalCode()
    {
        return $this->container['nominal_code'];
    }

    /**
     * Sets nominal_code
     *
     * @param int $nominal_code The nominal code of the bank account
     *
     * @return $this
     */
    public function setNominalCode($nominal_code)
    {

        if (!is_null($nominal_code) && ($nominal_code > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $nominal_code when calling PostBankAccountsBankAccount., must be smaller than or equal to 99999999.');
        }
        if (!is_null($nominal_code) && ($nominal_code < 1)) {
            throw new \InvalidArgumentException('invalid value for $nominal_code when calling PostBankAccountsBankAccount., must be bigger than or equal to 1.');
        }

        $this->container['nominal_code'] = $nominal_code;

        return $this;
    }

    /**
     * Gets default_payment_method_id
     *
     * @return string
     */
    public function getDefaultPaymentMethodId()
    {
        return $this->container['default_payment_method_id'];
    }

    /**
     * Sets default_payment_method_id
     *
     * @param string $default_payment_method_id The ID of the Default Payment Method.
     *
     * @return $this
     */
    public function setDefaultPaymentMethodId($default_payment_method_id)
    {
        $this->container['default_payment_method_id'] = $default_payment_method_id;

        return $this;
    }

    /**
     * Gets gifi_code
     *
     * @return int
     */
    public function getGifiCode()
    {
        return $this->container['gifi_code'];
    }

    /**
     * Sets gifi_code
     *
     * @param int $gifi_code The GIFI code of the bank ledger account'  GIFI is short for The General Index of Financial Information and it lets the CRA validate tax information electronically instead of manually. Information from financial statements is categorized under the appropriate 4-digit-long GIFI code and entered on corporate income tax returns. GIFI is needed when filing a T2 income tax return.  _Canada only_
     *
     * @return $this
     */
    public function setGifiCode($gifi_code)
    {

        if (!is_null($gifi_code) && ($gifi_code > 9999)) {
            throw new \InvalidArgumentException('invalid value for $gifi_code when calling PostBankAccountsBankAccount., must be smaller than or equal to 9999.');
        }
        if (!is_null($gifi_code) && ($gifi_code < 1000)) {
            throw new \InvalidArgumentException('invalid value for $gifi_code when calling PostBankAccountsBankAccount., must be bigger than or equal to 1000.');
        }

        $this->container['gifi_code'] = $gifi_code;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active Indicates whether the Bank account is active or inactive.
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets bank_account_details
     *
     * @return \Swagger\Client\Model\PostBankAccountsBankAccountBankAccountDetails
     */
    public function getBankAccountDetails()
    {
        return $this->container['bank_account_details'];
    }

    /**
     * Sets bank_account_details
     *
     * @param \Swagger\Client\Model\PostBankAccountsBankAccountBankAccountDetails $bank_account_details bank_account_details
     *
     * @return $this
     */
    public function setBankAccountDetails($bank_account_details)
    {
        $this->container['bank_account_details'] = $bank_account_details;

        return $this;
    }

    /**
     * Gets main_address
     *
     * @return \Swagger\Client\Model\PostBankAccountsBankAccountMainAddress
     */
    public function getMainAddress()
    {
        return $this->container['main_address'];
    }

    /**
     * Sets main_address
     *
     * @param \Swagger\Client\Model\PostBankAccountsBankAccountMainAddress $main_address main_address
     *
     * @return $this
     */
    public function setMainAddress($main_address)
    {
        $this->container['main_address'] = $main_address;

        return $this;
    }

    /**
     * Gets main_contact_person
     *
     * @return \Swagger\Client\Model\PostBankAccountsBankAccountMainContactPerson
     */
    public function getMainContactPerson()
    {
        return $this->container['main_contact_person'];
    }

    /**
     * Sets main_contact_person
     *
     * @param \Swagger\Client\Model\PostBankAccountsBankAccountMainContactPerson $main_contact_person main_contact_person
     *
     * @return $this
     */
    public function setMainContactPerson($main_contact_person)
    {
        $this->container['main_contact_person'] = $main_contact_person;

        return $this;
    }

    /**
     * Gets journal_code
     *
     * @return \Swagger\Client\Model\PostJournalsJournalJournalCode
     */
    public function getJournalCode()
    {
        return $this->container['journal_code'];
    }

    /**
     * Sets journal_code
     *
     * @param \Swagger\Client\Model\PostJournalsJournalJournalCode $journal_code journal_code
     *
     * @return $this
     */
    public function setJournalCode($journal_code)
    {
        $this->container['journal_code'] = $journal_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


