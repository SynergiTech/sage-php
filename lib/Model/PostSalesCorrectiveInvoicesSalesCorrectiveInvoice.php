<?php
/**
 * PostSalesCorrectiveInvoicesSalesCorrectiveInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PostSalesCorrectiveInvoicesSalesCorrectiveInvoice Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostSalesCorrectiveInvoicesSalesCorrectiveInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'postSalesCorrectiveInvoices_sales_corrective_invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vat_reverse_charge' => 'bool',
        'destination_consignment' => 'bool',
        'contact_id' => 'string',
        'invoice_number_prefix' => 'string',
        'invoice_number' => 'string',
        'contact_name' => 'string',
        'contact_reference' => 'string',
        'date' => '\DateTime',
        'due_date' => '\DateTime',
        'reference' => 'string',
        'notes' => 'string',
        'terms_and_conditions' => 'string',
        'shipping_net_amount' => 'double',
        'shipping_tax_rate_id' => 'string',
        'shipping_tax_amount' => 'double',
        'shipping_total_amount' => 'double',
        'total_quantity' => 'double',
        'net_amount' => 'double',
        'tax_amount' => 'double',
        'total_amount' => 'double',
        'currency_id' => 'string',
        'exchange_rate' => 'double',
        'inverse_exchange_rate' => 'double',
        'base_currency_shipping_net_amount' => 'double',
        'base_currency_shipping_tax_amount' => 'double',
        'base_currency_shipping_total_amount' => 'double',
        'total_discount_amount' => 'double',
        'base_currency_total_discount_amount' => 'double',
        'base_currency_net_amount' => 'double',
        'base_currency_tax_amount' => 'double',
        'base_currency_total_amount' => 'double',
        'status_id' => 'string',
        'sent' => 'bool',
        'withholding_tax_rate' => 'double',
        'withholding_tax_amount' => 'double',
        'base_currency_withholding_tax_amount' => 'double',
        'corrective_reason_code_id' => 'string',
        'original_invoice_id' => 'string',
        'original_invoice_number' => 'string',
        'original_invoice_date' => 'string',
        'details' => 'string',
        'main_address' => '\Swagger\Client\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress',
        'delivery_address' => '\Swagger\Client\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress',
        'invoice_lines' => '\Swagger\Client\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceInvoiceLines[]',
        'tax_analysis' => '\Swagger\Client\Model\PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vat_reverse_charge' => null,
        'destination_consignment' => null,
        'contact_id' => null,
        'invoice_number_prefix' => null,
        'invoice_number' => null,
        'contact_name' => null,
        'contact_reference' => null,
        'date' => 'date',
        'due_date' => 'date',
        'reference' => null,
        'notes' => null,
        'terms_and_conditions' => null,
        'shipping_net_amount' => 'double',
        'shipping_tax_rate_id' => null,
        'shipping_tax_amount' => 'double',
        'shipping_total_amount' => 'double',
        'total_quantity' => 'double',
        'net_amount' => 'double',
        'tax_amount' => 'double',
        'total_amount' => 'double',
        'currency_id' => null,
        'exchange_rate' => 'double',
        'inverse_exchange_rate' => 'double',
        'base_currency_shipping_net_amount' => 'double',
        'base_currency_shipping_tax_amount' => 'double',
        'base_currency_shipping_total_amount' => 'double',
        'total_discount_amount' => 'double',
        'base_currency_total_discount_amount' => 'double',
        'base_currency_net_amount' => 'double',
        'base_currency_tax_amount' => 'double',
        'base_currency_total_amount' => 'double',
        'status_id' => null,
        'sent' => null,
        'withholding_tax_rate' => 'double',
        'withholding_tax_amount' => 'double',
        'base_currency_withholding_tax_amount' => 'double',
        'corrective_reason_code_id' => null,
        'original_invoice_id' => null,
        'original_invoice_number' => null,
        'original_invoice_date' => null,
        'details' => null,
        'main_address' => null,
        'delivery_address' => null,
        'invoice_lines' => null,
        'tax_analysis' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vat_reverse_charge' => 'vat_reverse_charge',
        'destination_consignment' => 'destination_consignment',
        'contact_id' => 'contact_id',
        'invoice_number_prefix' => 'invoice_number_prefix',
        'invoice_number' => 'invoice_number',
        'contact_name' => 'contact_name',
        'contact_reference' => 'contact_reference',
        'date' => 'date',
        'due_date' => 'due_date',
        'reference' => 'reference',
        'notes' => 'notes',
        'terms_and_conditions' => 'terms_and_conditions',
        'shipping_net_amount' => 'shipping_net_amount',
        'shipping_tax_rate_id' => 'shipping_tax_rate_id',
        'shipping_tax_amount' => 'shipping_tax_amount',
        'shipping_total_amount' => 'shipping_total_amount',
        'total_quantity' => 'total_quantity',
        'net_amount' => 'net_amount',
        'tax_amount' => 'tax_amount',
        'total_amount' => 'total_amount',
        'currency_id' => 'currency_id',
        'exchange_rate' => 'exchange_rate',
        'inverse_exchange_rate' => 'inverse_exchange_rate',
        'base_currency_shipping_net_amount' => 'base_currency_shipping_net_amount',
        'base_currency_shipping_tax_amount' => 'base_currency_shipping_tax_amount',
        'base_currency_shipping_total_amount' => 'base_currency_shipping_total_amount',
        'total_discount_amount' => 'total_discount_amount',
        'base_currency_total_discount_amount' => 'base_currency_total_discount_amount',
        'base_currency_net_amount' => 'base_currency_net_amount',
        'base_currency_tax_amount' => 'base_currency_tax_amount',
        'base_currency_total_amount' => 'base_currency_total_amount',
        'status_id' => 'status_id',
        'sent' => 'sent',
        'withholding_tax_rate' => 'withholding_tax_rate',
        'withholding_tax_amount' => 'withholding_tax_amount',
        'base_currency_withholding_tax_amount' => 'base_currency_withholding_tax_amount',
        'corrective_reason_code_id' => 'corrective_reason_code_id',
        'original_invoice_id' => 'original_invoice_id',
        'original_invoice_number' => 'original_invoice_number',
        'original_invoice_date' => 'original_invoice_date',
        'details' => 'details',
        'main_address' => 'main_address',
        'delivery_address' => 'delivery_address',
        'invoice_lines' => 'invoice_lines',
        'tax_analysis' => 'tax_analysis'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vat_reverse_charge' => 'setVatReverseCharge',
        'destination_consignment' => 'setDestinationConsignment',
        'contact_id' => 'setContactId',
        'invoice_number_prefix' => 'setInvoiceNumberPrefix',
        'invoice_number' => 'setInvoiceNumber',
        'contact_name' => 'setContactName',
        'contact_reference' => 'setContactReference',
        'date' => 'setDate',
        'due_date' => 'setDueDate',
        'reference' => 'setReference',
        'notes' => 'setNotes',
        'terms_and_conditions' => 'setTermsAndConditions',
        'shipping_net_amount' => 'setShippingNetAmount',
        'shipping_tax_rate_id' => 'setShippingTaxRateId',
        'shipping_tax_amount' => 'setShippingTaxAmount',
        'shipping_total_amount' => 'setShippingTotalAmount',
        'total_quantity' => 'setTotalQuantity',
        'net_amount' => 'setNetAmount',
        'tax_amount' => 'setTaxAmount',
        'total_amount' => 'setTotalAmount',
        'currency_id' => 'setCurrencyId',
        'exchange_rate' => 'setExchangeRate',
        'inverse_exchange_rate' => 'setInverseExchangeRate',
        'base_currency_shipping_net_amount' => 'setBaseCurrencyShippingNetAmount',
        'base_currency_shipping_tax_amount' => 'setBaseCurrencyShippingTaxAmount',
        'base_currency_shipping_total_amount' => 'setBaseCurrencyShippingTotalAmount',
        'total_discount_amount' => 'setTotalDiscountAmount',
        'base_currency_total_discount_amount' => 'setBaseCurrencyTotalDiscountAmount',
        'base_currency_net_amount' => 'setBaseCurrencyNetAmount',
        'base_currency_tax_amount' => 'setBaseCurrencyTaxAmount',
        'base_currency_total_amount' => 'setBaseCurrencyTotalAmount',
        'status_id' => 'setStatusId',
        'sent' => 'setSent',
        'withholding_tax_rate' => 'setWithholdingTaxRate',
        'withholding_tax_amount' => 'setWithholdingTaxAmount',
        'base_currency_withholding_tax_amount' => 'setBaseCurrencyWithholdingTaxAmount',
        'corrective_reason_code_id' => 'setCorrectiveReasonCodeId',
        'original_invoice_id' => 'setOriginalInvoiceId',
        'original_invoice_number' => 'setOriginalInvoiceNumber',
        'original_invoice_date' => 'setOriginalInvoiceDate',
        'details' => 'setDetails',
        'main_address' => 'setMainAddress',
        'delivery_address' => 'setDeliveryAddress',
        'invoice_lines' => 'setInvoiceLines',
        'tax_analysis' => 'setTaxAnalysis'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vat_reverse_charge' => 'getVatReverseCharge',
        'destination_consignment' => 'getDestinationConsignment',
        'contact_id' => 'getContactId',
        'invoice_number_prefix' => 'getInvoiceNumberPrefix',
        'invoice_number' => 'getInvoiceNumber',
        'contact_name' => 'getContactName',
        'contact_reference' => 'getContactReference',
        'date' => 'getDate',
        'due_date' => 'getDueDate',
        'reference' => 'getReference',
        'notes' => 'getNotes',
        'terms_and_conditions' => 'getTermsAndConditions',
        'shipping_net_amount' => 'getShippingNetAmount',
        'shipping_tax_rate_id' => 'getShippingTaxRateId',
        'shipping_tax_amount' => 'getShippingTaxAmount',
        'shipping_total_amount' => 'getShippingTotalAmount',
        'total_quantity' => 'getTotalQuantity',
        'net_amount' => 'getNetAmount',
        'tax_amount' => 'getTaxAmount',
        'total_amount' => 'getTotalAmount',
        'currency_id' => 'getCurrencyId',
        'exchange_rate' => 'getExchangeRate',
        'inverse_exchange_rate' => 'getInverseExchangeRate',
        'base_currency_shipping_net_amount' => 'getBaseCurrencyShippingNetAmount',
        'base_currency_shipping_tax_amount' => 'getBaseCurrencyShippingTaxAmount',
        'base_currency_shipping_total_amount' => 'getBaseCurrencyShippingTotalAmount',
        'total_discount_amount' => 'getTotalDiscountAmount',
        'base_currency_total_discount_amount' => 'getBaseCurrencyTotalDiscountAmount',
        'base_currency_net_amount' => 'getBaseCurrencyNetAmount',
        'base_currency_tax_amount' => 'getBaseCurrencyTaxAmount',
        'base_currency_total_amount' => 'getBaseCurrencyTotalAmount',
        'status_id' => 'getStatusId',
        'sent' => 'getSent',
        'withholding_tax_rate' => 'getWithholdingTaxRate',
        'withholding_tax_amount' => 'getWithholdingTaxAmount',
        'base_currency_withholding_tax_amount' => 'getBaseCurrencyWithholdingTaxAmount',
        'corrective_reason_code_id' => 'getCorrectiveReasonCodeId',
        'original_invoice_id' => 'getOriginalInvoiceId',
        'original_invoice_number' => 'getOriginalInvoiceNumber',
        'original_invoice_date' => 'getOriginalInvoiceDate',
        'details' => 'getDetails',
        'main_address' => 'getMainAddress',
        'delivery_address' => 'getDeliveryAddress',
        'invoice_lines' => 'getInvoiceLines',
        'tax_analysis' => 'getTaxAnalysis'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vat_reverse_charge'] = isset($data['vat_reverse_charge']) ? $data['vat_reverse_charge'] : null;
        $this->container['destination_consignment'] = isset($data['destination_consignment']) ? $data['destination_consignment'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['invoice_number_prefix'] = isset($data['invoice_number_prefix']) ? $data['invoice_number_prefix'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['contact_reference'] = isset($data['contact_reference']) ? $data['contact_reference'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['terms_and_conditions'] = isset($data['terms_and_conditions']) ? $data['terms_and_conditions'] : null;
        $this->container['shipping_net_amount'] = isset($data['shipping_net_amount']) ? $data['shipping_net_amount'] : null;
        $this->container['shipping_tax_rate_id'] = isset($data['shipping_tax_rate_id']) ? $data['shipping_tax_rate_id'] : null;
        $this->container['shipping_tax_amount'] = isset($data['shipping_tax_amount']) ? $data['shipping_tax_amount'] : null;
        $this->container['shipping_total_amount'] = isset($data['shipping_total_amount']) ? $data['shipping_total_amount'] : null;
        $this->container['total_quantity'] = isset($data['total_quantity']) ? $data['total_quantity'] : null;
        $this->container['net_amount'] = isset($data['net_amount']) ? $data['net_amount'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['inverse_exchange_rate'] = isset($data['inverse_exchange_rate']) ? $data['inverse_exchange_rate'] : null;
        $this->container['base_currency_shipping_net_amount'] = isset($data['base_currency_shipping_net_amount']) ? $data['base_currency_shipping_net_amount'] : null;
        $this->container['base_currency_shipping_tax_amount'] = isset($data['base_currency_shipping_tax_amount']) ? $data['base_currency_shipping_tax_amount'] : null;
        $this->container['base_currency_shipping_total_amount'] = isset($data['base_currency_shipping_total_amount']) ? $data['base_currency_shipping_total_amount'] : null;
        $this->container['total_discount_amount'] = isset($data['total_discount_amount']) ? $data['total_discount_amount'] : null;
        $this->container['base_currency_total_discount_amount'] = isset($data['base_currency_total_discount_amount']) ? $data['base_currency_total_discount_amount'] : null;
        $this->container['base_currency_net_amount'] = isset($data['base_currency_net_amount']) ? $data['base_currency_net_amount'] : null;
        $this->container['base_currency_tax_amount'] = isset($data['base_currency_tax_amount']) ? $data['base_currency_tax_amount'] : null;
        $this->container['base_currency_total_amount'] = isset($data['base_currency_total_amount']) ? $data['base_currency_total_amount'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['sent'] = isset($data['sent']) ? $data['sent'] : null;
        $this->container['withholding_tax_rate'] = isset($data['withholding_tax_rate']) ? $data['withholding_tax_rate'] : null;
        $this->container['withholding_tax_amount'] = isset($data['withholding_tax_amount']) ? $data['withholding_tax_amount'] : null;
        $this->container['base_currency_withholding_tax_amount'] = isset($data['base_currency_withholding_tax_amount']) ? $data['base_currency_withholding_tax_amount'] : null;
        $this->container['corrective_reason_code_id'] = isset($data['corrective_reason_code_id']) ? $data['corrective_reason_code_id'] : null;
        $this->container['original_invoice_id'] = isset($data['original_invoice_id']) ? $data['original_invoice_id'] : null;
        $this->container['original_invoice_number'] = isset($data['original_invoice_number']) ? $data['original_invoice_number'] : null;
        $this->container['original_invoice_date'] = isset($data['original_invoice_date']) ? $data['original_invoice_date'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['main_address'] = isset($data['main_address']) ? $data['main_address'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['invoice_lines'] = isset($data['invoice_lines']) ? $data['invoice_lines'] : null;
        $this->container['tax_analysis'] = isset($data['tax_analysis']) ? $data['tax_analysis'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vat_reverse_charge
     *
     * @return bool
     */
    public function getVatReverseCharge()
    {
        return $this->container['vat_reverse_charge'];
    }

    /**
     * Sets vat_reverse_charge
     *
     * @param bool $vat_reverse_charge Indicates whether Domestic Reverser Charge is applied to the artefact. Only used for a UK business.
     *
     * @return $this
     */
    public function setVatReverseCharge($vat_reverse_charge)
    {
        $this->container['vat_reverse_charge'] = $vat_reverse_charge;

        return $this;
    }

    /**
     * Gets destination_consignment
     *
     * @return bool
     */
    public function getDestinationConsignment()
    {
        return $this->container['destination_consignment'];
    }

    /**
     * Sets destination_consignment
     *
     * @param bool $destination_consignment Indicates whether consignment checkbox for destination VAT is checked on the artefact. Only used for an UK business, where destination VAT was enabled in the settings.
     *
     * @return $this
     */
    public function setDestinationConsignment($destination_consignment)
    {
        $this->container['destination_consignment'] = $destination_consignment;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return string
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param string $contact_id The ID of the Contact.
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets invoice_number_prefix
     *
     * @return string
     */
    public function getInvoiceNumberPrefix()
    {
        return $this->container['invoice_number_prefix'];
    }

    /**
     * Sets invoice_number_prefix
     *
     * @param string $invoice_number_prefix The invoice number prefix
     *
     * @return $this
     */
    public function setInvoiceNumberPrefix($invoice_number_prefix)
    {
        $this->container['invoice_number_prefix'] = $invoice_number_prefix;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number The generated invoice number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name The name of the contact when the invoice was created
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_reference
     *
     * @return string
     */
    public function getContactReference()
    {
        return $this->container['contact_reference'];
    }

    /**
     * Sets contact_reference
     *
     * @param string $contact_reference The reference of the contact when the invoice was created
     *
     * @return $this
     */
    public function setContactReference($contact_reference)
    {
        $this->container['contact_reference'] = $contact_reference;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The date of the invoice
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date The due date of the invoice
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The reference for the invoice
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Invoice notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets terms_and_conditions
     *
     * @return string
     */
    public function getTermsAndConditions()
    {
        return $this->container['terms_and_conditions'];
    }

    /**
     * Sets terms_and_conditions
     *
     * @param string $terms_and_conditions Invoice terms and conditions
     *
     * @return $this
     */
    public function setTermsAndConditions($terms_and_conditions)
    {
        $this->container['terms_and_conditions'] = $terms_and_conditions;

        return $this;
    }

    /**
     * Gets shipping_net_amount
     *
     * @return double
     */
    public function getShippingNetAmount()
    {
        return $this->container['shipping_net_amount'];
    }

    /**
     * Sets shipping_net_amount
     *
     * @param double $shipping_net_amount The net shipping amount
     *
     * @return $this
     */
    public function setShippingNetAmount($shipping_net_amount)
    {
        $this->container['shipping_net_amount'] = $shipping_net_amount;

        return $this;
    }

    /**
     * Gets shipping_tax_rate_id
     *
     * @return string
     */
    public function getShippingTaxRateId()
    {
        return $this->container['shipping_tax_rate_id'];
    }

    /**
     * Sets shipping_tax_rate_id
     *
     * @param string $shipping_tax_rate_id The ID of the Shipping Tax Rate.
     *
     * @return $this
     */
    public function setShippingTaxRateId($shipping_tax_rate_id)
    {
        $this->container['shipping_tax_rate_id'] = $shipping_tax_rate_id;

        return $this;
    }

    /**
     * Gets shipping_tax_amount
     *
     * @return double
     */
    public function getShippingTaxAmount()
    {
        return $this->container['shipping_tax_amount'];
    }

    /**
     * Sets shipping_tax_amount
     *
     * @param double $shipping_tax_amount The tax shipping amount. NOTE: This is not required for POST/PUT requests as the shipping tax is calculated based on the shipping_net_amount and the shipping_tax_rate.
     *
     * @return $this
     */
    public function setShippingTaxAmount($shipping_tax_amount)
    {
        $this->container['shipping_tax_amount'] = $shipping_tax_amount;

        return $this;
    }

    /**
     * Gets shipping_total_amount
     *
     * @return double
     */
    public function getShippingTotalAmount()
    {
        return $this->container['shipping_total_amount'];
    }

    /**
     * Sets shipping_total_amount
     *
     * @param double $shipping_total_amount The total shipping amount
     *
     * @return $this
     */
    public function setShippingTotalAmount($shipping_total_amount)
    {
        $this->container['shipping_total_amount'] = $shipping_total_amount;

        return $this;
    }

    /**
     * Gets total_quantity
     *
     * @return double
     */
    public function getTotalQuantity()
    {
        return $this->container['total_quantity'];
    }

    /**
     * Sets total_quantity
     *
     * @param double $total_quantity The total quantity of the invoice
     *
     * @return $this
     */
    public function setTotalQuantity($total_quantity)
    {
        $this->container['total_quantity'] = $total_quantity;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return double
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param double $net_amount The net amount of the invoice
     *
     * @return $this
     */
    public function setNetAmount($net_amount)
    {
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return double
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param double $tax_amount The tax amount of the invoice
     *
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount The total amount of the invoice
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id The ID of the Currency.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return double
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param double $exchange_rate The exchange rate for the invoice
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets inverse_exchange_rate
     *
     * @return double
     */
    public function getInverseExchangeRate()
    {
        return $this->container['inverse_exchange_rate'];
    }

    /**
     * Sets inverse_exchange_rate
     *
     * @param double $inverse_exchange_rate The inverse exchange rate for the invoice
     *
     * @return $this
     */
    public function setInverseExchangeRate($inverse_exchange_rate)
    {
        $this->container['inverse_exchange_rate'] = $inverse_exchange_rate;

        return $this;
    }

    /**
     * Gets base_currency_shipping_net_amount
     *
     * @return double
     */
    public function getBaseCurrencyShippingNetAmount()
    {
        return $this->container['base_currency_shipping_net_amount'];
    }

    /**
     * Sets base_currency_shipping_net_amount
     *
     * @param double $base_currency_shipping_net_amount The net shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingNetAmount($base_currency_shipping_net_amount)
    {
        $this->container['base_currency_shipping_net_amount'] = $base_currency_shipping_net_amount;

        return $this;
    }

    /**
     * Gets base_currency_shipping_tax_amount
     *
     * @return double
     */
    public function getBaseCurrencyShippingTaxAmount()
    {
        return $this->container['base_currency_shipping_tax_amount'];
    }

    /**
     * Sets base_currency_shipping_tax_amount
     *
     * @param double $base_currency_shipping_tax_amount The tax shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingTaxAmount($base_currency_shipping_tax_amount)
    {
        $this->container['base_currency_shipping_tax_amount'] = $base_currency_shipping_tax_amount;

        return $this;
    }

    /**
     * Gets base_currency_shipping_total_amount
     *
     * @return double
     */
    public function getBaseCurrencyShippingTotalAmount()
    {
        return $this->container['base_currency_shipping_total_amount'];
    }

    /**
     * Sets base_currency_shipping_total_amount
     *
     * @param double $base_currency_shipping_total_amount The total shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingTotalAmount($base_currency_shipping_total_amount)
    {
        $this->container['base_currency_shipping_total_amount'] = $base_currency_shipping_total_amount;

        return $this;
    }

    /**
     * Gets total_discount_amount
     *
     * @return double
     */
    public function getTotalDiscountAmount()
    {
        return $this->container['total_discount_amount'];
    }

    /**
     * Sets total_discount_amount
     *
     * @param double $total_discount_amount The discount amount on the invoice
     *
     * @return $this
     */
    public function setTotalDiscountAmount($total_discount_amount)
    {
        $this->container['total_discount_amount'] = $total_discount_amount;

        return $this;
    }

    /**
     * Gets base_currency_total_discount_amount
     *
     * @return double
     */
    public function getBaseCurrencyTotalDiscountAmount()
    {
        return $this->container['base_currency_total_discount_amount'];
    }

    /**
     * Sets base_currency_total_discount_amount
     *
     * @param double $base_currency_total_discount_amount The discount amount on the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTotalDiscountAmount($base_currency_total_discount_amount)
    {
        $this->container['base_currency_total_discount_amount'] = $base_currency_total_discount_amount;

        return $this;
    }

    /**
     * Gets base_currency_net_amount
     *
     * @return double
     */
    public function getBaseCurrencyNetAmount()
    {
        return $this->container['base_currency_net_amount'];
    }

    /**
     * Sets base_currency_net_amount
     *
     * @param double $base_currency_net_amount The net amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyNetAmount($base_currency_net_amount)
    {
        $this->container['base_currency_net_amount'] = $base_currency_net_amount;

        return $this;
    }

    /**
     * Gets base_currency_tax_amount
     *
     * @return double
     */
    public function getBaseCurrencyTaxAmount()
    {
        return $this->container['base_currency_tax_amount'];
    }

    /**
     * Sets base_currency_tax_amount
     *
     * @param double $base_currency_tax_amount The tax amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTaxAmount($base_currency_tax_amount)
    {
        $this->container['base_currency_tax_amount'] = $base_currency_tax_amount;

        return $this;
    }

    /**
     * Gets base_currency_total_amount
     *
     * @return double
     */
    public function getBaseCurrencyTotalAmount()
    {
        return $this->container['base_currency_total_amount'];
    }

    /**
     * Sets base_currency_total_amount
     *
     * @param double $base_currency_total_amount The total amount of the invoice in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTotalAmount($base_currency_total_amount)
    {
        $this->container['base_currency_total_amount'] = $base_currency_total_amount;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return string
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param string $status_id The ID of the Status.
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return bool
     */
    public function getSent()
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param bool $sent Indicates whether the invoice has been sent
     *
     * @return $this
     */
    public function setSent($sent)
    {
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets withholding_tax_rate
     *
     * @return double
     */
    public function getWithholdingTaxRate()
    {
        return $this->container['withholding_tax_rate'];
    }

    /**
     * Sets withholding_tax_rate
     *
     * @param double $withholding_tax_rate IRPF Witheld Tax Rate (Spain only)
     *
     * @return $this
     */
    public function setWithholdingTaxRate($withholding_tax_rate)
    {
        $this->container['withholding_tax_rate'] = $withholding_tax_rate;

        return $this;
    }

    /**
     * Gets withholding_tax_amount
     *
     * @return double
     */
    public function getWithholdingTaxAmount()
    {
        return $this->container['withholding_tax_amount'];
    }

    /**
     * Sets withholding_tax_amount
     *
     * @param double $withholding_tax_amount IRPF Witheld Tax Amount (Spain only)
     *
     * @return $this
     */
    public function setWithholdingTaxAmount($withholding_tax_amount)
    {
        $this->container['withholding_tax_amount'] = $withholding_tax_amount;

        return $this;
    }

    /**
     * Gets base_currency_withholding_tax_amount
     *
     * @return double
     */
    public function getBaseCurrencyWithholdingTaxAmount()
    {
        return $this->container['base_currency_withholding_tax_amount'];
    }

    /**
     * Sets base_currency_withholding_tax_amount
     *
     * @param double $base_currency_withholding_tax_amount IRPF Witheld Tax Amount (Spain only) in the base currency
     *
     * @return $this
     */
    public function setBaseCurrencyWithholdingTaxAmount($base_currency_withholding_tax_amount)
    {
        $this->container['base_currency_withholding_tax_amount'] = $base_currency_withholding_tax_amount;

        return $this;
    }

    /**
     * Gets corrective_reason_code_id
     *
     * @return string
     */
    public function getCorrectiveReasonCodeId()
    {
        return $this->container['corrective_reason_code_id'];
    }

    /**
     * Sets corrective_reason_code_id
     *
     * @param string $corrective_reason_code_id The ID of the Corrective Reason Code.
     *
     * @return $this
     */
    public function setCorrectiveReasonCodeId($corrective_reason_code_id)
    {
        $this->container['corrective_reason_code_id'] = $corrective_reason_code_id;

        return $this;
    }

    /**
     * Gets original_invoice_id
     *
     * @return string
     */
    public function getOriginalInvoiceId()
    {
        return $this->container['original_invoice_id'];
    }

    /**
     * Sets original_invoice_id
     *
     * @param string $original_invoice_id The ID of the Original Invoice. (Spain only)
     *
     * @return $this
     */
    public function setOriginalInvoiceId($original_invoice_id)
    {
        $this->container['original_invoice_id'] = $original_invoice_id;

        return $this;
    }

    /**
     * Gets original_invoice_number
     *
     * @return string
     */
    public function getOriginalInvoiceNumber()
    {
        return $this->container['original_invoice_number'];
    }

    /**
     * Sets original_invoice_number
     *
     * @param string $original_invoice_number The number relating to the original invoice
     *
     * @return $this
     */
    public function setOriginalInvoiceNumber($original_invoice_number)
    {
        $this->container['original_invoice_number'] = $original_invoice_number;

        return $this;
    }

    /**
     * Gets original_invoice_date
     *
     * @return string
     */
    public function getOriginalInvoiceDate()
    {
        return $this->container['original_invoice_date'];
    }

    /**
     * Sets original_invoice_date
     *
     * @param string $original_invoice_date The Invoice date relating to the original invoice
     *
     * @return $this
     */
    public function setOriginalInvoiceDate($original_invoice_date)
    {
        $this->container['original_invoice_date'] = $original_invoice_date;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details The corrective invoice details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets main_address
     *
     * @return \Swagger\Client\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress
     */
    public function getMainAddress()
    {
        return $this->container['main_address'];
    }

    /**
     * Sets main_address
     *
     * @param \Swagger\Client\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress $main_address main_address
     *
     * @return $this
     */
    public function setMainAddress($main_address)
    {
        $this->container['main_address'] = $main_address;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \Swagger\Client\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \Swagger\Client\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress $delivery_address delivery_address
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets invoice_lines
     *
     * @return \Swagger\Client\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceInvoiceLines[]
     */
    public function getInvoiceLines()
    {
        return $this->container['invoice_lines'];
    }

    /**
     * Sets invoice_lines
     *
     * @param \Swagger\Client\Model\PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceInvoiceLines[] $invoice_lines invoice_lines
     *
     * @return $this
     */
    public function setInvoiceLines($invoice_lines)
    {
        $this->container['invoice_lines'] = $invoice_lines;

        return $this;
    }

    /**
     * Gets tax_analysis
     *
     * @return \Swagger\Client\Model\PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis[]
     */
    public function getTaxAnalysis()
    {
        return $this->container['tax_analysis'];
    }

    /**
     * Sets tax_analysis
     *
     * @param \Swagger\Client\Model\PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis[] $tax_analysis tax_analysis
     *
     * @return $this
     */
    public function setTaxAnalysis($tax_analysis)
    {
        $this->container['tax_analysis'] = $tax_analysis;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


