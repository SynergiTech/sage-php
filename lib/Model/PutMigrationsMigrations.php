<?php
/**
 * PutMigrationsMigrations
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PutMigrationsMigrations Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PutMigrationsMigrations implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'putMigrations_migrations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status_id' => 'string',
        'started_at' => '\DateTime',
        'completed_at' => '\DateTime',
        'source_product' => 'string',
        'source_product_version' => 'string',
        'source_license' => 'string',
        'source_tool' => 'string',
        'source_tool_version' => 'string',
        'schema_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'status_id' => null,
        'started_at' => 'date-time',
        'completed_at' => 'date-time',
        'source_product' => null,
        'source_product_version' => null,
        'source_license' => null,
        'source_tool' => null,
        'source_tool_version' => null,
        'schema_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status_id' => 'status_id',
        'started_at' => 'started_at',
        'completed_at' => 'completed_at',
        'source_product' => 'source_product',
        'source_product_version' => 'source_product_version',
        'source_license' => 'source_license',
        'source_tool' => 'source_tool',
        'source_tool_version' => 'source_tool_version',
        'schema_id' => 'schema_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status_id' => 'setStatusId',
        'started_at' => 'setStartedAt',
        'completed_at' => 'setCompletedAt',
        'source_product' => 'setSourceProduct',
        'source_product_version' => 'setSourceProductVersion',
        'source_license' => 'setSourceLicense',
        'source_tool' => 'setSourceTool',
        'source_tool_version' => 'setSourceToolVersion',
        'schema_id' => 'setSchemaId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status_id' => 'getStatusId',
        'started_at' => 'getStartedAt',
        'completed_at' => 'getCompletedAt',
        'source_product' => 'getSourceProduct',
        'source_product_version' => 'getSourceProductVersion',
        'source_license' => 'getSourceLicense',
        'source_tool' => 'getSourceTool',
        'source_tool_version' => 'getSourceToolVersion',
        'schema_id' => 'getSchemaId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['started_at'] = isset($data['started_at']) ? $data['started_at'] : null;
        $this->container['completed_at'] = isset($data['completed_at']) ? $data['completed_at'] : null;
        $this->container['source_product'] = isset($data['source_product']) ? $data['source_product'] : null;
        $this->container['source_product_version'] = isset($data['source_product_version']) ? $data['source_product_version'] : null;
        $this->container['source_license'] = isset($data['source_license']) ? $data['source_license'] : null;
        $this->container['source_tool'] = isset($data['source_tool']) ? $data['source_tool'] : null;
        $this->container['source_tool_version'] = isset($data['source_tool_version']) ? $data['source_tool_version'] : null;
        $this->container['schema_id'] = isset($data['schema_id']) ? $data['schema_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status_id
     *
     * @return string
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param string $status_id The ID of the Status.
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets started_at
     *
     * @return \DateTime
     */
    public function getStartedAt()
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     *
     * @param \DateTime $started_at The date/time the migration started
     *
     * @return $this
     */
    public function setStartedAt($started_at)
    {
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param \DateTime $completed_at The date/time the migration completed
     *
     * @return $this
     */
    public function setCompletedAt($completed_at)
    {
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets source_product
     *
     * @return string
     */
    public function getSourceProduct()
    {
        return $this->container['source_product'];
    }

    /**
     * Sets source_product
     *
     * @param string $source_product The source product for the migration
     *
     * @return $this
     */
    public function setSourceProduct($source_product)
    {
        $this->container['source_product'] = $source_product;

        return $this;
    }

    /**
     * Gets source_product_version
     *
     * @return string
     */
    public function getSourceProductVersion()
    {
        return $this->container['source_product_version'];
    }

    /**
     * Sets source_product_version
     *
     * @param string $source_product_version The source product version for the migration
     *
     * @return $this
     */
    public function setSourceProductVersion($source_product_version)
    {
        $this->container['source_product_version'] = $source_product_version;

        return $this;
    }

    /**
     * Gets source_license
     *
     * @return string
     */
    public function getSourceLicense()
    {
        return $this->container['source_license'];
    }

    /**
     * Sets source_license
     *
     * @param string $source_license The source product license for the migration
     *
     * @return $this
     */
    public function setSourceLicense($source_license)
    {
        $this->container['source_license'] = $source_license;

        return $this;
    }

    /**
     * Gets source_tool
     *
     * @return string
     */
    public function getSourceTool()
    {
        return $this->container['source_tool'];
    }

    /**
     * Sets source_tool
     *
     * @param string $source_tool The source product extract tool for the migration
     *
     * @return $this
     */
    public function setSourceTool($source_tool)
    {
        $this->container['source_tool'] = $source_tool;

        return $this;
    }

    /**
     * Gets source_tool_version
     *
     * @return string
     */
    public function getSourceToolVersion()
    {
        return $this->container['source_tool_version'];
    }

    /**
     * Sets source_tool_version
     *
     * @param string $source_tool_version The source product extract tool version for the migration
     *
     * @return $this
     */
    public function setSourceToolVersion($source_tool_version)
    {
        $this->container['source_tool_version'] = $source_tool_version;

        return $this;
    }

    /**
     * Gets schema_id
     *
     * @return string
     */
    public function getSchemaId()
    {
        return $this->container['schema_id'];
    }

    /**
     * Sets schema_id
     *
     * @param string $schema_id The schema id used for the migration
     *
     * @return $this
     */
    public function setSchemaId($schema_id)
    {
        $this->container['schema_id'] = $schema_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


