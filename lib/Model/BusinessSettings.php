<?php
/**
 * BusinessSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BusinessSettings Class Doc Comment
 *
 * @category Class
 * @description ### Endpoint Availability  * Accounting Plus: ğŸ‡¨ğŸ‡¦, ğŸ‡ªğŸ‡¸, ğŸ‡«ğŸ‡·, ğŸ‡¬ğŸ‡§, ğŸ‡®ğŸ‡ª, ğŸ‡ºğŸ‡¸ * Accounting Standard: ğŸ‡¬ğŸ‡§, ğŸ‡®ğŸ‡ª * Accounting Start: ğŸ‡¨ğŸ‡¦, ğŸ‡ªğŸ‡¸, ğŸ‡«ğŸ‡·, ğŸ‡¬ğŸ‡§, ğŸ‡®ğŸ‡ª, ğŸ‡ºğŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any of the following roles in the area &#x60;Settings&#x60;: Full Access
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BusinessSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BusinessSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'path' => 'string',
        'siret' => 'string',
        'management_centre_member' => 'bool',
        'rcs_number' => 'string',
        'share_capital' => 'double',
        'business_activity_type' => '\Swagger\Client\Model\BusinessActivityType',
        'legal_form_type' => '\Swagger\Client\Model\LegalFormType',
        'auxiliary_accounts_visible' => 'bool',
        'default_ledger_accounts' => '\Swagger\Client\Model\DefaultLedgerAccounts',
        'business_type' => '\Swagger\Client\Model\BusinessType',
        'country_of_registration' => '\Swagger\Client\Model\Base',
        'business_created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'path' => null,
        'siret' => null,
        'management_centre_member' => null,
        'rcs_number' => null,
        'share_capital' => 'double',
        'business_activity_type' => null,
        'legal_form_type' => null,
        'auxiliary_accounts_visible' => null,
        'default_ledger_accounts' => null,
        'business_type' => null,
        'country_of_registration' => null,
        'business_created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => '$path',
        'siret' => 'siret',
        'management_centre_member' => 'management_centre_member',
        'rcs_number' => 'rcs_number',
        'share_capital' => 'share_capital',
        'business_activity_type' => 'business_activity_type',
        'legal_form_type' => 'legal_form_type',
        'auxiliary_accounts_visible' => 'auxiliary_accounts_visible',
        'default_ledger_accounts' => 'default_ledger_accounts',
        'business_type' => 'business_type',
        'country_of_registration' => 'country_of_registration',
        'business_created_at' => 'business_created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'siret' => 'setSiret',
        'management_centre_member' => 'setManagementCentreMember',
        'rcs_number' => 'setRcsNumber',
        'share_capital' => 'setShareCapital',
        'business_activity_type' => 'setBusinessActivityType',
        'legal_form_type' => 'setLegalFormType',
        'auxiliary_accounts_visible' => 'setAuxiliaryAccountsVisible',
        'default_ledger_accounts' => 'setDefaultLedgerAccounts',
        'business_type' => 'setBusinessType',
        'country_of_registration' => 'setCountryOfRegistration',
        'business_created_at' => 'setBusinessCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'siret' => 'getSiret',
        'management_centre_member' => 'getManagementCentreMember',
        'rcs_number' => 'getRcsNumber',
        'share_capital' => 'getShareCapital',
        'business_activity_type' => 'getBusinessActivityType',
        'legal_form_type' => 'getLegalFormType',
        'auxiliary_accounts_visible' => 'getAuxiliaryAccountsVisible',
        'default_ledger_accounts' => 'getDefaultLedgerAccounts',
        'business_type' => 'getBusinessType',
        'country_of_registration' => 'getCountryOfRegistration',
        'business_created_at' => 'getBusinessCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['siret'] = isset($data['siret']) ? $data['siret'] : null;
        $this->container['management_centre_member'] = isset($data['management_centre_member']) ? $data['management_centre_member'] : null;
        $this->container['rcs_number'] = isset($data['rcs_number']) ? $data['rcs_number'] : null;
        $this->container['share_capital'] = isset($data['share_capital']) ? $data['share_capital'] : null;
        $this->container['business_activity_type'] = isset($data['business_activity_type']) ? $data['business_activity_type'] : null;
        $this->container['legal_form_type'] = isset($data['legal_form_type']) ? $data['legal_form_type'] : null;
        $this->container['auxiliary_accounts_visible'] = isset($data['auxiliary_accounts_visible']) ? $data['auxiliary_accounts_visible'] : null;
        $this->container['default_ledger_accounts'] = isset($data['default_ledger_accounts']) ? $data['default_ledger_accounts'] : null;
        $this->container['business_type'] = isset($data['business_type']) ? $data['business_type'] : null;
        $this->container['country_of_registration'] = isset($data['country_of_registration']) ? $data['country_of_registration'] : null;
        $this->container['business_created_at'] = isset($data['business_created_at']) ? $data['business_created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The path for the resource
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets siret
     *
     * @return string
     */
    public function getSiret()
    {
        return $this->container['siret'];
    }

    /**
     * Sets siret
     *
     * @param string $siret SIRET Number (France only)
     *
     * @return $this
     */
    public function setSiret($siret)
    {
        $this->container['siret'] = $siret;

        return $this;
    }

    /**
     * Gets management_centre_member
     *
     * @return bool
     */
    public function getManagementCentreMember()
    {
        return $this->container['management_centre_member'];
    }

    /**
     * Sets management_centre_member
     *
     * @param bool $management_centre_member Member of Approved Management Centres (France only)
     *
     * @return $this
     */
    public function setManagementCentreMember($management_centre_member)
    {
        $this->container['management_centre_member'] = $management_centre_member;

        return $this;
    }

    /**
     * Gets rcs_number
     *
     * @return string
     */
    public function getRcsNumber()
    {
        return $this->container['rcs_number'];
    }

    /**
     * Sets rcs_number
     *
     * @param string $rcs_number RCS Number (France only)
     *
     * @return $this
     */
    public function setRcsNumber($rcs_number)
    {
        $this->container['rcs_number'] = $rcs_number;

        return $this;
    }

    /**
     * Gets share_capital
     *
     * @return double
     */
    public function getShareCapital()
    {
        return $this->container['share_capital'];
    }

    /**
     * Sets share_capital
     *
     * @param double $share_capital Share Capital (France only)
     *
     * @return $this
     */
    public function setShareCapital($share_capital)
    {
        $this->container['share_capital'] = $share_capital;

        return $this;
    }

    /**
     * Gets business_activity_type
     *
     * @return \Swagger\Client\Model\BusinessActivityType
     */
    public function getBusinessActivityType()
    {
        return $this->container['business_activity_type'];
    }

    /**
     * Sets business_activity_type
     *
     * @param \Swagger\Client\Model\BusinessActivityType $business_activity_type Business Activity Type (France only)
     *
     * @return $this
     */
    public function setBusinessActivityType($business_activity_type)
    {
        $this->container['business_activity_type'] = $business_activity_type;

        return $this;
    }

    /**
     * Gets legal_form_type
     *
     * @return \Swagger\Client\Model\LegalFormType
     */
    public function getLegalFormType()
    {
        return $this->container['legal_form_type'];
    }

    /**
     * Sets legal_form_type
     *
     * @param \Swagger\Client\Model\LegalFormType $legal_form_type Legal Form Business Type (France only)
     *
     * @return $this
     */
    public function setLegalFormType($legal_form_type)
    {
        $this->container['legal_form_type'] = $legal_form_type;

        return $this;
    }

    /**
     * Gets auxiliary_accounts_visible
     *
     * @return bool
     */
    public function getAuxiliaryAccountsVisible()
    {
        return $this->container['auxiliary_accounts_visible'];
    }

    /**
     * Sets auxiliary_accounts_visible
     *
     * @param bool $auxiliary_accounts_visible Auxiliary Accounts Visible (France & Spain only)
     *
     * @return $this
     */
    public function setAuxiliaryAccountsVisible($auxiliary_accounts_visible)
    {
        $this->container['auxiliary_accounts_visible'] = $auxiliary_accounts_visible;

        return $this;
    }

    /**
     * Gets default_ledger_accounts
     *
     * @return \Swagger\Client\Model\DefaultLedgerAccounts
     */
    public function getDefaultLedgerAccounts()
    {
        return $this->container['default_ledger_accounts'];
    }

    /**
     * Sets default_ledger_accounts
     *
     * @param \Swagger\Client\Model\DefaultLedgerAccounts $default_ledger_accounts The default ledger accounts for the business
     *
     * @return $this
     */
    public function setDefaultLedgerAccounts($default_ledger_accounts)
    {
        $this->container['default_ledger_accounts'] = $default_ledger_accounts;

        return $this;
    }

    /**
     * Gets business_type
     *
     * @return \Swagger\Client\Model\BusinessType
     */
    public function getBusinessType()
    {
        return $this->container['business_type'];
    }

    /**
     * Sets business_type
     *
     * @param \Swagger\Client\Model\BusinessType $business_type The type of the business
     *
     * @return $this
     */
    public function setBusinessType($business_type)
    {
        $this->container['business_type'] = $business_type;

        return $this;
    }

    /**
     * Gets country_of_registration
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getCountryOfRegistration()
    {
        return $this->container['country_of_registration'];
    }

    /**
     * Sets country_of_registration
     *
     * @param \Swagger\Client\Model\Base $country_of_registration One of the political entities identified by [\"ENGLAND_AND_WALES\", \"WALES\", \"SCOTLAND\", \"NORTHERN_IRELAND\", \"REPUBLIC_OF_IRELAND\"]. Only for businesses registered on the British Isles
     *
     * @return $this
     */
    public function setCountryOfRegistration($country_of_registration)
    {
        $this->container['country_of_registration'] = $country_of_registration;

        return $this;
    }

    /**
     * Gets business_created_at
     *
     * @return \DateTime
     */
    public function getBusinessCreatedAt()
    {
        return $this->container['business_created_at'];
    }

    /**
     * Sets business_created_at
     *
     * @param \DateTime $business_created_at The timestamp on which the business was created. This can be the timestamp of the initial creation or the latest business reset.
     *
     * @return $this
     */
    public function setBusinessCreatedAt($business_created_at)
    {
        $this->container['business_created_at'] = $business_created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


