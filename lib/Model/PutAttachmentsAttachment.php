<?php
/**
 * PutAttachmentsAttachment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PutAttachmentsAttachment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PutAttachmentsAttachment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'putAttachments_attachment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'file' => 'string',
        'file_name' => 'string',
        'mime_type' => 'string',
        'description' => 'string',
        'file_extension' => 'string',
        'transaction_id' => 'string',
        'file_size' => 'int',
        'attachment_context_type_id' => 'string',
        'attachment_context_id' => 'string',
        'is_public' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'file' => null,
        'file_name' => null,
        'mime_type' => null,
        'description' => null,
        'file_extension' => null,
        'transaction_id' => null,
        'file_size' => 'int32',
        'attachment_context_type_id' => null,
        'attachment_context_id' => null,
        'is_public' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file' => 'file',
        'file_name' => 'file_name',
        'mime_type' => 'mime_type',
        'description' => 'description',
        'file_extension' => 'file_extension',
        'transaction_id' => 'transaction_id',
        'file_size' => 'file_size',
        'attachment_context_type_id' => 'attachment_context_type_id',
        'attachment_context_id' => 'attachment_context_id',
        'is_public' => 'is_public'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file' => 'setFile',
        'file_name' => 'setFileName',
        'mime_type' => 'setMimeType',
        'description' => 'setDescription',
        'file_extension' => 'setFileExtension',
        'transaction_id' => 'setTransactionId',
        'file_size' => 'setFileSize',
        'attachment_context_type_id' => 'setAttachmentContextTypeId',
        'attachment_context_id' => 'setAttachmentContextId',
        'is_public' => 'setIsPublic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file' => 'getFile',
        'file_name' => 'getFileName',
        'mime_type' => 'getMimeType',
        'description' => 'getDescription',
        'file_extension' => 'getFileExtension',
        'transaction_id' => 'getTransactionId',
        'file_size' => 'getFileSize',
        'attachment_context_type_id' => 'getAttachmentContextTypeId',
        'attachment_context_id' => 'getAttachmentContextId',
        'is_public' => 'getIsPublic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['mime_type'] = isset($data['mime_type']) ? $data['mime_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['file_extension'] = isset($data['file_extension']) ? $data['file_extension'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['file_size'] = isset($data['file_size']) ? $data['file_size'] : null;
        $this->container['attachment_context_type_id'] = isset($data['attachment_context_type_id']) ? $data['attachment_context_type_id'] : null;
        $this->container['attachment_context_id'] = isset($data['attachment_context_id']) ? $data['attachment_context_id'] : null;
        $this->container['is_public'] = isset($data['is_public']) ? $data['is_public'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['file_size']) && ($this->container['file_size'] > 2621440)) {
            $invalidProperties[] = "invalid value for 'file_size', must be smaller than or equal to 2621440.";
        }

        if (!is_null($this->container['file_size']) && ($this->container['file_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'file_size', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file
     *
     * @return string
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string $file The base64 encoded representation of the file
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name The file name of the attachment
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets mime_type
     *
     * @return string
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string $mime_type The mime type of the attachment
     *
     * @return $this
     */
    public function setMimeType($mime_type)
    {
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the attachment
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets file_extension
     *
     * @return string
     */
    public function getFileExtension()
    {
        return $this->container['file_extension'];
    }

    /**
     * Sets file_extension
     *
     * @param string $file_extension The file extension of the attachment
     *
     * @return $this
     */
    public function setFileExtension($file_extension)
    {
        $this->container['file_extension'] = $file_extension;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id The ID of the Transaction.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return int
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param int $file_size The file size of the attachment in Bytes
     *
     * @return $this
     */
    public function setFileSize($file_size)
    {

        if (!is_null($file_size) && ($file_size > 2621440)) {
            throw new \InvalidArgumentException('invalid value for $file_size when calling PutAttachmentsAttachment., must be smaller than or equal to 2621440.');
        }
        if (!is_null($file_size) && ($file_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $file_size when calling PutAttachmentsAttachment., must be bigger than or equal to 0.');
        }

        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets attachment_context_type_id
     *
     * @return string
     */
    public function getAttachmentContextTypeId()
    {
        return $this->container['attachment_context_type_id'];
    }

    /**
     * Sets attachment_context_type_id
     *
     * @param string $attachment_context_type_id The ID of the Attachment Context Type.
     *
     * @return $this
     */
    public function setAttachmentContextTypeId($attachment_context_type_id)
    {
        $this->container['attachment_context_type_id'] = $attachment_context_type_id;

        return $this;
    }

    /**
     * Gets attachment_context_id
     *
     * @return string
     */
    public function getAttachmentContextId()
    {
        return $this->container['attachment_context_id'];
    }

    /**
     * Sets attachment_context_id
     *
     * @param string $attachment_context_id The ID of the Attachment Context.
     *
     * @return $this
     */
    public function setAttachmentContextId($attachment_context_id)
    {
        $this->container['attachment_context_id'] = $attachment_context_id;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool $is_public Flag to determine whether the attachment should be visible to customers
     *
     * @return $this
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


