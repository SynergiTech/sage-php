<?php
/**
 * PaymentAllocation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PaymentAllocation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentAllocation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentAllocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\Swagger\Client\Model\Link[]',
        'date' => '\DateTime',
        'type' => 'string',
        'reference' => 'string',
        'amount' => 'double',
        'discount' => 'double',
        'stripe_transaction_id' => 'string',
        'contact_allocation' => '\Swagger\Client\Model\ContactAllocation',
        'artefact' => '\Swagger\Client\Model\Generic',
        'contact_payment' => '\Swagger\Client\Model\ContactPayment',
        'displayed_as' => 'string',
        'negative_payment' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'date' => 'date',
        'type' => null,
        'reference' => null,
        'amount' => 'double',
        'discount' => 'double',
        'stripe_transaction_id' => null,
        'contact_allocation' => null,
        'artefact' => null,
        'contact_payment' => null,
        'displayed_as' => null,
        'negative_payment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => 'links',
        'date' => 'date',
        'type' => 'type',
        'reference' => 'reference',
        'amount' => 'amount',
        'discount' => 'discount',
        'stripe_transaction_id' => 'stripe_transaction_id',
        'contact_allocation' => 'contact_allocation',
        'artefact' => 'artefact',
        'contact_payment' => 'contact_payment',
        'displayed_as' => 'displayed_as',
        'negative_payment' => 'negative_payment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'date' => 'setDate',
        'type' => 'setType',
        'reference' => 'setReference',
        'amount' => 'setAmount',
        'discount' => 'setDiscount',
        'stripe_transaction_id' => 'setStripeTransactionId',
        'contact_allocation' => 'setContactAllocation',
        'artefact' => 'setArtefact',
        'contact_payment' => 'setContactPayment',
        'displayed_as' => 'setDisplayedAs',
        'negative_payment' => 'setNegativePayment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'date' => 'getDate',
        'type' => 'getType',
        'reference' => 'getReference',
        'amount' => 'getAmount',
        'discount' => 'getDiscount',
        'stripe_transaction_id' => 'getStripeTransactionId',
        'contact_allocation' => 'getContactAllocation',
        'artefact' => 'getArtefact',
        'contact_payment' => 'getContactPayment',
        'displayed_as' => 'getDisplayedAs',
        'negative_payment' => 'getNegativePayment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['stripe_transaction_id'] = isset($data['stripe_transaction_id']) ? $data['stripe_transaction_id'] : null;
        $this->container['contact_allocation'] = isset($data['contact_allocation']) ? $data['contact_allocation'] : null;
        $this->container['artefact'] = isset($data['artefact']) ? $data['artefact'] : null;
        $this->container['contact_payment'] = isset($data['contact_payment']) ? $data['contact_payment'] : null;
        $this->container['displayed_as'] = isset($data['displayed_as']) ? $data['displayed_as'] : null;
        $this->container['negative_payment'] = isset($data['negative_payment']) ? $data['negative_payment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\Link[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\Link[] $links Links for the resource
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The date for the payment/allocation
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the payment/allocation
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The reference for the payment/allocation
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The allocated amount of the payment/allocation
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return double
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param double $discount The discount amount of the payment/allocation
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets stripe_transaction_id
     *
     * @return string
     */
    public function getStripeTransactionId()
    {
        return $this->container['stripe_transaction_id'];
    }

    /**
     * Sets stripe_transaction_id
     *
     * @param string $stripe_transaction_id stripe_transaction_id
     *
     * @return $this
     */
    public function setStripeTransactionId($stripe_transaction_id)
    {
        $this->container['stripe_transaction_id'] = $stripe_transaction_id;

        return $this;
    }

    /**
     * Gets contact_allocation
     *
     * @return \Swagger\Client\Model\ContactAllocation
     */
    public function getContactAllocation()
    {
        return $this->container['contact_allocation'];
    }

    /**
     * Sets contact_allocation
     *
     * @param \Swagger\Client\Model\ContactAllocation $contact_allocation The related contact allocation
     *
     * @return $this
     */
    public function setContactAllocation($contact_allocation)
    {
        $this->container['contact_allocation'] = $contact_allocation;

        return $this;
    }

    /**
     * Gets artefact
     *
     * @return \Swagger\Client\Model\Generic
     */
    public function getArtefact()
    {
        return $this->container['artefact'];
    }

    /**
     * Sets artefact
     *
     * @param \Swagger\Client\Model\Generic $artefact The artefact the allocation relates to
     *
     * @return $this
     */
    public function setArtefact($artefact)
    {
        $this->container['artefact'] = $artefact;

        return $this;
    }

    /**
     * Gets contact_payment
     *
     * @return \Swagger\Client\Model\ContactPayment
     */
    public function getContactPayment()
    {
        return $this->container['contact_payment'];
    }

    /**
     * Sets contact_payment
     *
     * @param \Swagger\Client\Model\ContactPayment $contact_payment The related contact payment
     *
     * @return $this
     */
    public function setContactPayment($contact_payment)
    {
        $this->container['contact_payment'] = $contact_payment;

        return $this;
    }

    /**
     * Gets displayed_as
     *
     * @return string
     */
    public function getDisplayedAs()
    {
        return $this->container['displayed_as'];
    }

    /**
     * Sets displayed_as
     *
     * @param string $displayed_as Display text for the item
     *
     * @return $this
     */
    public function setDisplayedAs($displayed_as)
    {
        $this->container['displayed_as'] = $displayed_as;

        return $this;
    }

    /**
     * Gets negative_payment
     *
     * @return bool
     */
    public function getNegativePayment()
    {
        return $this->container['negative_payment'];
    }

    /**
     * Sets negative_payment
     *
     * @param bool $negative_payment This is a negative payment
     *
     * @return $this
     */
    public function setNegativePayment($negative_payment)
    {
        $this->container['negative_payment'] = $negative_payment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


