<?php
/**
 * Contact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Contact Class Doc Comment
 *
 * @category Class
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Standard: ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª * Accounting Start: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any mentioned role in one of the listed areas: * Area: &#x60;Contacts&#x60;: Restricted Access, Full Access
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Contact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'legacy_id' => 'int',
        'id' => 'string',
        'displayed_as' => 'string',
        'path' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'links' => '\Swagger\Client\Model\Link[]',
        'deleted_at' => '\DateTime',
        'balance' => 'double',
        'contact_types' => '\Swagger\Client\Model\Base[]',
        'name' => 'string',
        'reference' => 'string',
        'default_sales_ledger_account' => '\Swagger\Client\Model\LedgerAccount',
        'default_sales_tax_rate' => '\Swagger\Client\Model\Base',
        'default_purchase_ledger_account' => '\Swagger\Client\Model\LedgerAccount',
        'tax_number' => 'string',
        'notes' => 'string',
        'locale' => 'string',
        'main_address' => '\Swagger\Client\Model\Address',
        'delivery_address' => '\Swagger\Client\Model\Address',
        'main_contact_person' => '\Swagger\Client\Model\ContactPerson',
        'bank_account_details' => '\Swagger\Client\Model\BankAccountDetails',
        'credit_limit' => 'double',
        'credit_days' => 'int',
        'credit_terms_and_conditions' => 'string',
        'product_sales_price_type' => '\Swagger\Client\Model\Base',
        'source_guid' => 'string',
        'currency' => '\Swagger\Client\Model\Base',
        'aux_reference' => 'string',
        'registered_number' => 'string',
        'deletable' => 'bool',
        'tax_treatment' => '\Swagger\Client\Model\ContactTaxTreatment',
        'email' => 'string',
        'tax_calculation' => 'string',
        'auxiliary_account' => 'string',
        'gdpr_obfuscated' => 'bool',
        'system' => 'bool',
        'has_unfinished_recurring_invoices' => 'bool',
        'cis_registered' => 'bool',
        'ni_based' => 'bool',
        'gb_based' => 'bool',
        'cis_settings' => '\Swagger\Client\Model\ContactCisSettings',
        'destination_vat_blocking' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'legacy_id' => 'int32',
        'id' => null,
        'displayed_as' => null,
        'path' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'links' => null,
        'deleted_at' => 'date-time',
        'balance' => 'double',
        'contact_types' => null,
        'name' => null,
        'reference' => null,
        'default_sales_ledger_account' => null,
        'default_sales_tax_rate' => null,
        'default_purchase_ledger_account' => null,
        'tax_number' => null,
        'notes' => null,
        'locale' => null,
        'main_address' => null,
        'delivery_address' => null,
        'main_contact_person' => null,
        'bank_account_details' => null,
        'credit_limit' => 'double',
        'credit_days' => 'int32',
        'credit_terms_and_conditions' => null,
        'product_sales_price_type' => null,
        'source_guid' => null,
        'currency' => null,
        'aux_reference' => null,
        'registered_number' => null,
        'deletable' => null,
        'tax_treatment' => null,
        'email' => null,
        'tax_calculation' => null,
        'auxiliary_account' => null,
        'gdpr_obfuscated' => null,
        'system' => null,
        'has_unfinished_recurring_invoices' => null,
        'cis_registered' => null,
        'ni_based' => null,
        'gb_based' => null,
        'cis_settings' => null,
        'destination_vat_blocking' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legacy_id' => 'legacy_id',
        'id' => 'id',
        'displayed_as' => 'displayed_as',
        'path' => '$path',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'links' => 'links',
        'deleted_at' => 'deleted_at',
        'balance' => 'balance',
        'contact_types' => 'contact_types',
        'name' => 'name',
        'reference' => 'reference',
        'default_sales_ledger_account' => 'default_sales_ledger_account',
        'default_sales_tax_rate' => 'default_sales_tax_rate',
        'default_purchase_ledger_account' => 'default_purchase_ledger_account',
        'tax_number' => 'tax_number',
        'notes' => 'notes',
        'locale' => 'locale',
        'main_address' => 'main_address',
        'delivery_address' => 'delivery_address',
        'main_contact_person' => 'main_contact_person',
        'bank_account_details' => 'bank_account_details',
        'credit_limit' => 'credit_limit',
        'credit_days' => 'credit_days',
        'credit_terms_and_conditions' => 'credit_terms_and_conditions',
        'product_sales_price_type' => 'product_sales_price_type',
        'source_guid' => 'source_guid',
        'currency' => 'currency',
        'aux_reference' => 'aux_reference',
        'registered_number' => 'registered_number',
        'deletable' => 'deletable',
        'tax_treatment' => 'tax_treatment',
        'email' => 'email',
        'tax_calculation' => 'tax_calculation',
        'auxiliary_account' => 'auxiliary_account',
        'gdpr_obfuscated' => 'gdpr_obfuscated',
        'system' => 'system',
        'has_unfinished_recurring_invoices' => 'has_unfinished_recurring_invoices',
        'cis_registered' => 'cis_registered',
        'ni_based' => 'ni_based',
        'gb_based' => 'gb_based',
        'cis_settings' => 'cis_settings',
        'destination_vat_blocking' => 'destination_vat_blocking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legacy_id' => 'setLegacyId',
        'id' => 'setId',
        'displayed_as' => 'setDisplayedAs',
        'path' => 'setPath',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'links' => 'setLinks',
        'deleted_at' => 'setDeletedAt',
        'balance' => 'setBalance',
        'contact_types' => 'setContactTypes',
        'name' => 'setName',
        'reference' => 'setReference',
        'default_sales_ledger_account' => 'setDefaultSalesLedgerAccount',
        'default_sales_tax_rate' => 'setDefaultSalesTaxRate',
        'default_purchase_ledger_account' => 'setDefaultPurchaseLedgerAccount',
        'tax_number' => 'setTaxNumber',
        'notes' => 'setNotes',
        'locale' => 'setLocale',
        'main_address' => 'setMainAddress',
        'delivery_address' => 'setDeliveryAddress',
        'main_contact_person' => 'setMainContactPerson',
        'bank_account_details' => 'setBankAccountDetails',
        'credit_limit' => 'setCreditLimit',
        'credit_days' => 'setCreditDays',
        'credit_terms_and_conditions' => 'setCreditTermsAndConditions',
        'product_sales_price_type' => 'setProductSalesPriceType',
        'source_guid' => 'setSourceGuid',
        'currency' => 'setCurrency',
        'aux_reference' => 'setAuxReference',
        'registered_number' => 'setRegisteredNumber',
        'deletable' => 'setDeletable',
        'tax_treatment' => 'setTaxTreatment',
        'email' => 'setEmail',
        'tax_calculation' => 'setTaxCalculation',
        'auxiliary_account' => 'setAuxiliaryAccount',
        'gdpr_obfuscated' => 'setGdprObfuscated',
        'system' => 'setSystem',
        'has_unfinished_recurring_invoices' => 'setHasUnfinishedRecurringInvoices',
        'cis_registered' => 'setCisRegistered',
        'ni_based' => 'setNiBased',
        'gb_based' => 'setGbBased',
        'cis_settings' => 'setCisSettings',
        'destination_vat_blocking' => 'setDestinationVatBlocking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legacy_id' => 'getLegacyId',
        'id' => 'getId',
        'displayed_as' => 'getDisplayedAs',
        'path' => 'getPath',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'links' => 'getLinks',
        'deleted_at' => 'getDeletedAt',
        'balance' => 'getBalance',
        'contact_types' => 'getContactTypes',
        'name' => 'getName',
        'reference' => 'getReference',
        'default_sales_ledger_account' => 'getDefaultSalesLedgerAccount',
        'default_sales_tax_rate' => 'getDefaultSalesTaxRate',
        'default_purchase_ledger_account' => 'getDefaultPurchaseLedgerAccount',
        'tax_number' => 'getTaxNumber',
        'notes' => 'getNotes',
        'locale' => 'getLocale',
        'main_address' => 'getMainAddress',
        'delivery_address' => 'getDeliveryAddress',
        'main_contact_person' => 'getMainContactPerson',
        'bank_account_details' => 'getBankAccountDetails',
        'credit_limit' => 'getCreditLimit',
        'credit_days' => 'getCreditDays',
        'credit_terms_and_conditions' => 'getCreditTermsAndConditions',
        'product_sales_price_type' => 'getProductSalesPriceType',
        'source_guid' => 'getSourceGuid',
        'currency' => 'getCurrency',
        'aux_reference' => 'getAuxReference',
        'registered_number' => 'getRegisteredNumber',
        'deletable' => 'getDeletable',
        'tax_treatment' => 'getTaxTreatment',
        'email' => 'getEmail',
        'tax_calculation' => 'getTaxCalculation',
        'auxiliary_account' => 'getAuxiliaryAccount',
        'gdpr_obfuscated' => 'getGdprObfuscated',
        'system' => 'getSystem',
        'has_unfinished_recurring_invoices' => 'getHasUnfinishedRecurringInvoices',
        'cis_registered' => 'getCisRegistered',
        'ni_based' => 'getNiBased',
        'gb_based' => 'getGbBased',
        'cis_settings' => 'getCisSettings',
        'destination_vat_blocking' => 'getDestinationVatBlocking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['legacy_id'] = isset($data['legacy_id']) ? $data['legacy_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['displayed_as'] = isset($data['displayed_as']) ? $data['displayed_as'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['contact_types'] = isset($data['contact_types']) ? $data['contact_types'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['default_sales_ledger_account'] = isset($data['default_sales_ledger_account']) ? $data['default_sales_ledger_account'] : null;
        $this->container['default_sales_tax_rate'] = isset($data['default_sales_tax_rate']) ? $data['default_sales_tax_rate'] : null;
        $this->container['default_purchase_ledger_account'] = isset($data['default_purchase_ledger_account']) ? $data['default_purchase_ledger_account'] : null;
        $this->container['tax_number'] = isset($data['tax_number']) ? $data['tax_number'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['main_address'] = isset($data['main_address']) ? $data['main_address'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['main_contact_person'] = isset($data['main_contact_person']) ? $data['main_contact_person'] : null;
        $this->container['bank_account_details'] = isset($data['bank_account_details']) ? $data['bank_account_details'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['credit_days'] = isset($data['credit_days']) ? $data['credit_days'] : null;
        $this->container['credit_terms_and_conditions'] = isset($data['credit_terms_and_conditions']) ? $data['credit_terms_and_conditions'] : null;
        $this->container['product_sales_price_type'] = isset($data['product_sales_price_type']) ? $data['product_sales_price_type'] : null;
        $this->container['source_guid'] = isset($data['source_guid']) ? $data['source_guid'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['aux_reference'] = isset($data['aux_reference']) ? $data['aux_reference'] : null;
        $this->container['registered_number'] = isset($data['registered_number']) ? $data['registered_number'] : null;
        $this->container['deletable'] = isset($data['deletable']) ? $data['deletable'] : null;
        $this->container['tax_treatment'] = isset($data['tax_treatment']) ? $data['tax_treatment'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['tax_calculation'] = isset($data['tax_calculation']) ? $data['tax_calculation'] : null;
        $this->container['auxiliary_account'] = isset($data['auxiliary_account']) ? $data['auxiliary_account'] : null;
        $this->container['gdpr_obfuscated'] = isset($data['gdpr_obfuscated']) ? $data['gdpr_obfuscated'] : null;
        $this->container['system'] = isset($data['system']) ? $data['system'] : null;
        $this->container['has_unfinished_recurring_invoices'] = isset($data['has_unfinished_recurring_invoices']) ? $data['has_unfinished_recurring_invoices'] : null;
        $this->container['cis_registered'] = isset($data['cis_registered']) ? $data['cis_registered'] : null;
        $this->container['ni_based'] = isset($data['ni_based']) ? $data['ni_based'] : null;
        $this->container['gb_based'] = isset($data['gb_based']) ? $data['gb_based'] : null;
        $this->container['cis_settings'] = isset($data['cis_settings']) ? $data['cis_settings'] : null;
        $this->container['destination_vat_blocking'] = isset($data['destination_vat_blocking']) ? $data['destination_vat_blocking'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['tax_number']) && (mb_strlen($this->container['tax_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'tax_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) > 4000)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['locale']) && (mb_strlen($this->container['locale']) > 10)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['credit_terms_and_conditions']) && (mb_strlen($this->container['credit_terms_and_conditions']) > 2000)) {
            $invalidProperties[] = "invalid value for 'credit_terms_and_conditions', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['source_guid']) && (mb_strlen($this->container['source_guid']) > 255)) {
            $invalidProperties[] = "invalid value for 'source_guid', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['aux_reference']) && (mb_strlen($this->container['aux_reference']) > 4)) {
            $invalidProperties[] = "invalid value for 'aux_reference', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['registered_number']) && (mb_strlen($this->container['registered_number']) > 25)) {
            $invalidProperties[] = "invalid value for 'registered_number', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['auxiliary_account']) && (mb_strlen($this->container['auxiliary_account']) > 25)) {
            $invalidProperties[] = "invalid value for 'auxiliary_account', the character length must be smaller than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacy_id
     *
     * @return int
     */
    public function getLegacyId()
    {
        return $this->container['legacy_id'];
    }

    /**
     * Sets legacy_id
     *
     * @param int $legacy_id The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId($legacy_id)
    {
        $this->container['legacy_id'] = $legacy_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayed_as
     *
     * @return string
     */
    public function getDisplayedAs()
    {
        return $this->container['displayed_as'];
    }

    /**
     * Sets displayed_as
     *
     * @param string $displayed_as The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs($displayed_as)
    {
        $this->container['displayed_as'] = $displayed_as;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The API path for the resource
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The datetime when the item was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\Link[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\Link[] $links Links for the resource
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at The datetime when the item was deleted
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double $balance The contact balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets contact_types
     *
     * @return \Swagger\Client\Model\Base[]
     */
    public function getContactTypes()
    {
        return $this->container['contact_types'];
    }

    /**
     * Sets contact_types
     *
     * @param \Swagger\Client\Model\Base[] $contact_types The type of the contact. It has to be either CUSTOMER or VENDOR
     *
     * @return $this
     */
    public function setContactTypes($contact_types)
    {
        $this->container['contact_types'] = $contact_types;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The contact's full name or business name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Contact., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Unique reference for the contact
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (mb_strlen($reference) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling Contact., must be smaller than or equal to 10.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets default_sales_ledger_account
     *
     * @return \Swagger\Client\Model\LedgerAccount
     */
    public function getDefaultSalesLedgerAccount()
    {
        return $this->container['default_sales_ledger_account'];
    }

    /**
     * Sets default_sales_ledger_account
     *
     * @param \Swagger\Client\Model\LedgerAccount $default_sales_ledger_account The default sales ledger account for the contact <br><i>Customers only</i>
     *
     * @return $this
     */
    public function setDefaultSalesLedgerAccount($default_sales_ledger_account)
    {
        $this->container['default_sales_ledger_account'] = $default_sales_ledger_account;

        return $this;
    }

    /**
     * Gets default_sales_tax_rate
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getDefaultSalesTaxRate()
    {
        return $this->container['default_sales_tax_rate'];
    }

    /**
     * Sets default_sales_tax_rate
     *
     * @param \Swagger\Client\Model\Base $default_sales_tax_rate The default sales tax rate for the contact <br><i>Customers only</i>
     *
     * @return $this
     */
    public function setDefaultSalesTaxRate($default_sales_tax_rate)
    {
        $this->container['default_sales_tax_rate'] = $default_sales_tax_rate;

        return $this;
    }

    /**
     * Gets default_purchase_ledger_account
     *
     * @return \Swagger\Client\Model\LedgerAccount
     */
    public function getDefaultPurchaseLedgerAccount()
    {
        return $this->container['default_purchase_ledger_account'];
    }

    /**
     * Sets default_purchase_ledger_account
     *
     * @param \Swagger\Client\Model\LedgerAccount $default_purchase_ledger_account The default purchase ledger account for the contact <br><i>Vendors only</i>
     *
     * @return $this
     */
    public function setDefaultPurchaseLedgerAccount($default_purchase_ledger_account)
    {
        $this->container['default_purchase_ledger_account'] = $default_purchase_ledger_account;

        return $this;
    }

    /**
     * Gets tax_number
     *
     * @return string
     */
    public function getTaxNumber()
    {
        return $this->container['tax_number'];
    }

    /**
     * Sets tax_number
     *
     * @param string $tax_number The VAT registration number of the contact. The format will be validated.
     *
     * @return $this
     */
    public function setTaxNumber($tax_number)
    {
        if (!is_null($tax_number) && (mb_strlen($tax_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $tax_number when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['tax_number'] = $tax_number;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes The notes for the contact
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        if (!is_null($notes) && (mb_strlen($notes) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $notes when calling Contact., must be smaller than or equal to 4000.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale The locale for the contact
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        if (!is_null($locale) && (mb_strlen($locale) > 10)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling Contact., must be smaller than or equal to 10.');
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets main_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getMainAddress()
    {
        return $this->container['main_address'];
    }

    /**
     * Sets main_address
     *
     * @param \Swagger\Client\Model\Address $main_address The main address associated with the contact
     *
     * @return $this
     */
    public function setMainAddress($main_address)
    {
        $this->container['main_address'] = $main_address;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \Swagger\Client\Model\Address $delivery_address The delivery address <br><i>Customers only</i>
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets main_contact_person
     *
     * @return \Swagger\Client\Model\ContactPerson
     */
    public function getMainContactPerson()
    {
        return $this->container['main_contact_person'];
    }

    /**
     * Sets main_contact_person
     *
     * @param \Swagger\Client\Model\ContactPerson $main_contact_person The main contact person of the contact.
     *
     * @return $this
     */
    public function setMainContactPerson($main_contact_person)
    {
        $this->container['main_contact_person'] = $main_contact_person;

        return $this;
    }

    /**
     * Gets bank_account_details
     *
     * @return \Swagger\Client\Model\BankAccountDetails
     */
    public function getBankAccountDetails()
    {
        return $this->container['bank_account_details'];
    }

    /**
     * Sets bank_account_details
     *
     * @param \Swagger\Client\Model\BankAccountDetails $bank_account_details The account details for the contact's bank account
     *
     * @return $this
     */
    public function setBankAccountDetails($bank_account_details)
    {
        $this->container['bank_account_details'] = $bank_account_details;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return double
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param double $credit_limit Custom credit limit amount for the contact <br><i>not applicable to Start</i>
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets credit_days
     *
     * @return int
     */
    public function getCreditDays()
    {
        return $this->container['credit_days'];
    }

    /**
     * Sets credit_days
     *
     * @param int $credit_days Custom credit days for the contact.<br> If returned as null in a GET response, you may want to GET /invoice_settings and use 'customer_credit_days'/'vendor_credit_days' as default/fallback according to your use case.
     *
     * @return $this
     */
    public function setCreditDays($credit_days)
    {
        $this->container['credit_days'] = $credit_days;

        return $this;
    }

    /**
     * Gets credit_terms_and_conditions
     *
     * @return string
     */
    public function getCreditTermsAndConditions()
    {
        return $this->container['credit_terms_and_conditions'];
    }

    /**
     * Sets credit_terms_and_conditions
     *
     * @param string $credit_terms_and_conditions Custom terms and conditions for the contact. If set will override global /invoice_settings default terms and conditions. <br><i>Customers only</i>
     *
     * @return $this
     */
    public function setCreditTermsAndConditions($credit_terms_and_conditions)
    {
        if (!is_null($credit_terms_and_conditions) && (mb_strlen($credit_terms_and_conditions) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $credit_terms_and_conditions when calling Contact., must be smaller than or equal to 2000.');
        }

        $this->container['credit_terms_and_conditions'] = $credit_terms_and_conditions;

        return $this;
    }

    /**
     * Gets product_sales_price_type
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getProductSalesPriceType()
    {
        return $this->container['product_sales_price_type'];
    }

    /**
     * Sets product_sales_price_type
     *
     * @param \Swagger\Client\Model\Base $product_sales_price_type All default product_sales_price_type defaults. <a   href=\"https://developer.sage.com/api/accounting/guides/inventory/#product-sales-prices--service-rates\"   target=\"_blank\">Learn more about sales price types </a> <br><i>Customers only, not applicable to Start<i>
     *
     * @return $this
     */
    public function setProductSalesPriceType($product_sales_price_type)
    {
        $this->container['product_sales_price_type'] = $product_sales_price_type;

        return $this;
    }

    /**
     * Gets source_guid
     *
     * @return string
     */
    public function getSourceGuid()
    {
        return $this->container['source_guid'];
    }

    /**
     * Sets source_guid
     *
     * @param string $source_guid Used when importing contacts from external sources
     *
     * @return $this
     */
    public function setSourceGuid($source_guid)
    {
        if (!is_null($source_guid) && (mb_strlen($source_guid) > 255)) {
            throw new \InvalidArgumentException('invalid length for $source_guid when calling Contact., must be smaller than or equal to 255.');
        }

        $this->container['source_guid'] = $source_guid;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Swagger\Client\Model\Base $currency The currency that the contact trades in <br><i>not applicable to Start</i>
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets aux_reference
     *
     * @return string
     */
    public function getAuxReference()
    {
        return $this->container['aux_reference'];
    }

    /**
     * Sets aux_reference
     *
     * @param string $aux_reference Auxiliary reference. Used for German \"Kreditorennummer\" and \"Debitorennummer\". <br> <a href=\"https://developer.sage.com/accounting/reference/settings/#tag/Datev-Settings\">   See Datev Settings endpoint reference </a>
     *
     * @return $this
     */
    public function setAuxReference($aux_reference)
    {
        if (!is_null($aux_reference) && (mb_strlen($aux_reference) > 4)) {
            throw new \InvalidArgumentException('invalid length for $aux_reference when calling Contact., must be smaller than or equal to 4.');
        }

        $this->container['aux_reference'] = $aux_reference;

        return $this;
    }

    /**
     * Gets registered_number
     *
     * @return string
     */
    public function getRegisteredNumber()
    {
        return $this->container['registered_number'];
    }

    /**
     * Sets registered_number
     *
     * @param string $registered_number The registered number of the contact's business. Only used for German businesses and represents the \"Steuernummer\" there (not the \"USt-ID\").
     *
     * @return $this
     */
    public function setRegisteredNumber($registered_number)
    {
        if (!is_null($registered_number) && (mb_strlen($registered_number) > 25)) {
            throw new \InvalidArgumentException('invalid length for $registered_number when calling Contact., must be smaller than or equal to 25.');
        }

        $this->container['registered_number'] = $registered_number;

        return $this;
    }

    /**
     * Gets deletable
     *
     * @return bool
     */
    public function getDeletable()
    {
        return $this->container['deletable'];
    }

    /**
     * Sets deletable
     *
     * @param bool $deletable Indicates whether the contact can be deleted successfully
     *
     * @return $this
     */
    public function setDeletable($deletable)
    {
        $this->container['deletable'] = $deletable;

        return $this;
    }

    /**
     * Gets tax_treatment
     *
     * @return \Swagger\Client\Model\ContactTaxTreatment
     */
    public function getTaxTreatment()
    {
        return $this->container['tax_treatment'];
    }

    /**
     * Sets tax_treatment
     *
     * @param \Swagger\Client\Model\ContactTaxTreatment $tax_treatment The tax treatment - indicates which tax rules to apply for a contact
     *
     * @return $this
     */
    public function setTaxTreatment($tax_treatment)
    {
        $this->container['tax_treatment'] = $tax_treatment;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address for the given contact
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Contact., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets tax_calculation
     *
     * @return string
     */
    public function getTaxCalculation()
    {
        return $this->container['tax_calculation'];
    }

    /**
     * Sets tax_calculation
     *
     * @param string $tax_calculation <b>France:</b> The tax calculation method used to define tax treatment <i>Vendors only</i> <br> <b>Spain:</b> Defines if contact is a retailer and tax is subject to Recargo de Equivalencia <i>Customers only</i> <b>United Kingdom:</b> Defines if contact tax treatment is domestic reverse charge <i>Customers & Suppliers</i>
     *
     * @return $this
     */
    public function setTaxCalculation($tax_calculation)
    {
        $this->container['tax_calculation'] = $tax_calculation;

        return $this;
    }

    /**
     * Gets auxiliary_account
     *
     * @return string
     */
    public function getAuxiliaryAccount()
    {
        return $this->container['auxiliary_account'];
    }

    /**
     * Sets auxiliary_account
     *
     * @param string $auxiliary_account Auxiliary account - used when auxiliary accounting is enabled in business settings. <br><i>Available only in Spain and France</i>
     *
     * @return $this
     */
    public function setAuxiliaryAccount($auxiliary_account)
    {
        if (!is_null($auxiliary_account) && (mb_strlen($auxiliary_account) > 25)) {
            throw new \InvalidArgumentException('invalid length for $auxiliary_account when calling Contact., must be smaller than or equal to 25.');
        }

        $this->container['auxiliary_account'] = $auxiliary_account;

        return $this;
    }

    /**
     * Gets gdpr_obfuscated
     *
     * @return bool
     */
    public function getGdprObfuscated()
    {
        return $this->container['gdpr_obfuscated'];
    }

    /**
     * Sets gdpr_obfuscated
     *
     * @param bool $gdpr_obfuscated General Data Protection Regulation (GDPR) came into effect on 25th May 2018. It introduces new rules for how business owners manage their contacts' personal data. When this field returns 'true', means that the contact has been requested to be obfuscated and you can not create any artifact (sales invoices, purchase invoices, ...) but you can still check previously created artifacts.
     *
     * @return $this
     */
    public function setGdprObfuscated($gdpr_obfuscated)
    {
        $this->container['gdpr_obfuscated'] = $gdpr_obfuscated;

        return $this;
    }

    /**
     * Gets system
     *
     * @return bool
     */
    public function getSystem()
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     *
     * @param bool $system Identifies a contact as being a system contact used for processing specific transaction types and reserved specifically for those transaction types such as tax return payments/refunds.
     *
     * @return $this
     */
    public function setSystem($system)
    {
        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets has_unfinished_recurring_invoices
     *
     * @return bool
     */
    public function getHasUnfinishedRecurringInvoices()
    {
        return $this->container['has_unfinished_recurring_invoices'];
    }

    /**
     * Sets has_unfinished_recurring_invoices
     *
     * @param bool $has_unfinished_recurring_invoices Indicates whether the contact is associated with any unfinished recurring invoices
     *
     * @return $this
     */
    public function setHasUnfinishedRecurringInvoices($has_unfinished_recurring_invoices)
    {
        $this->container['has_unfinished_recurring_invoices'] = $has_unfinished_recurring_invoices;

        return $this;
    }

    /**
     * Gets cis_registered
     *
     * @return bool
     */
    public function getCisRegistered()
    {
        return $this->container['cis_registered'];
    }

    /**
     * Sets cis_registered
     *
     * @param bool $cis_registered Identifies a contact as being registered as CIS.<br><i>only applicable to UK business</i>
     *
     * @return $this
     */
    public function setCisRegistered($cis_registered)
    {
        $this->container['cis_registered'] = $cis_registered;

        return $this;
    }

    /**
     * Gets ni_based
     *
     * @return bool
     */
    public function getNiBased()
    {
        return $this->container['ni_based'];
    }

    /**
     * Sets ni_based
     *
     * @param bool $ni_based Identifies a contact as being based in Northern Ireland.
     *
     * @return $this
     */
    public function setNiBased($ni_based)
    {
        $this->container['ni_based'] = $ni_based;

        return $this;
    }

    /**
     * Gets gb_based
     *
     * @return bool
     */
    public function getGbBased()
    {
        return $this->container['gb_based'];
    }

    /**
     * Sets gb_based
     *
     * @param bool $gb_based Identifies a contact as being based in Great Britain.
     *
     * @return $this
     */
    public function setGbBased($gb_based)
    {
        $this->container['gb_based'] = $gb_based;

        return $this;
    }

    /**
     * Gets cis_settings
     *
     * @return \Swagger\Client\Model\ContactCisSettings
     */
    public function getCisSettings()
    {
        return $this->container['cis_settings'];
    }

    /**
     * Sets cis_settings
     *
     * @param \Swagger\Client\Model\ContactCisSettings $cis_settings The CIS Settings for the contact
     *
     * @return $this
     */
    public function setCisSettings($cis_settings)
    {
        $this->container['cis_settings'] = $cis_settings;

        return $this;
    }

    /**
     * Gets destination_vat_blocking
     *
     * @return bool
     */
    public function getDestinationVatBlocking()
    {
        return $this->container['destination_vat_blocking'];
    }

    /**
     * Sets destination_vat_blocking
     *
     * @param bool $destination_vat_blocking Identifies a contact should be blocked due to destination vat
     *
     * @return $this
     */
    public function setDestinationVatBlocking($destination_vat_blocking)
    {
        $this->container['destination_vat_blocking'] = $destination_vat_blocking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


