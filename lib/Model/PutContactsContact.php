<?php
/**
 * PutContactsContact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PutContactsContact Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PutContactsContact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'putContacts_contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'contact_type_ids' => 'string[]',
        'reference' => 'string',
        'default_sales_ledger_account_id' => 'string',
        'default_sales_tax_rate_id' => 'string',
        'default_purchase_ledger_account_id' => 'string',
        'tax_number' => 'string',
        'notes' => 'string',
        'locale' => 'string',
        'credit_limit' => 'double',
        'credit_days' => 'int',
        'credit_terms_and_conditions' => 'string',
        'product_sales_price_type_id' => 'string',
        'source_guid' => 'string',
        'currency_id' => 'string',
        'aux_reference' => 'string',
        'registered_number' => 'string',
        'tax_calculation' => 'string',
        'auxiliary_account' => 'string',
        'destination_vat_blocking' => 'bool',
        'main_address' => '\Swagger\Client\Model\PostBankAccountsBankAccountMainAddress',
        'delivery_address' => '\Swagger\Client\Model\PostBankAccountsBankAccountMainAddress',
        'main_contact_person' => '\Swagger\Client\Model\PostContactsContactMainContactPerson',
        'bank_account_details' => '\Swagger\Client\Model\PutBankAccountsBankAccountBankAccountDetails',
        'tax_treatment' => '\Swagger\Client\Model\PostContactsContactTaxTreatment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'contact_type_ids' => null,
        'reference' => null,
        'default_sales_ledger_account_id' => null,
        'default_sales_tax_rate_id' => null,
        'default_purchase_ledger_account_id' => null,
        'tax_number' => null,
        'notes' => null,
        'locale' => null,
        'credit_limit' => 'double',
        'credit_days' => 'int32',
        'credit_terms_and_conditions' => null,
        'product_sales_price_type_id' => null,
        'source_guid' => null,
        'currency_id' => null,
        'aux_reference' => null,
        'registered_number' => null,
        'tax_calculation' => null,
        'auxiliary_account' => null,
        'destination_vat_blocking' => null,
        'main_address' => null,
        'delivery_address' => null,
        'main_contact_person' => null,
        'bank_account_details' => null,
        'tax_treatment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'contact_type_ids' => 'contact_type_ids',
        'reference' => 'reference',
        'default_sales_ledger_account_id' => 'default_sales_ledger_account_id',
        'default_sales_tax_rate_id' => 'default_sales_tax_rate_id',
        'default_purchase_ledger_account_id' => 'default_purchase_ledger_account_id',
        'tax_number' => 'tax_number',
        'notes' => 'notes',
        'locale' => 'locale',
        'credit_limit' => 'credit_limit',
        'credit_days' => 'credit_days',
        'credit_terms_and_conditions' => 'credit_terms_and_conditions',
        'product_sales_price_type_id' => 'product_sales_price_type_id',
        'source_guid' => 'source_guid',
        'currency_id' => 'currency_id',
        'aux_reference' => 'aux_reference',
        'registered_number' => 'registered_number',
        'tax_calculation' => 'tax_calculation',
        'auxiliary_account' => 'auxiliary_account',
        'destination_vat_blocking' => 'destination_vat_blocking',
        'main_address' => 'main_address',
        'delivery_address' => 'delivery_address',
        'main_contact_person' => 'main_contact_person',
        'bank_account_details' => 'bank_account_details',
        'tax_treatment' => 'tax_treatment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'contact_type_ids' => 'setContactTypeIds',
        'reference' => 'setReference',
        'default_sales_ledger_account_id' => 'setDefaultSalesLedgerAccountId',
        'default_sales_tax_rate_id' => 'setDefaultSalesTaxRateId',
        'default_purchase_ledger_account_id' => 'setDefaultPurchaseLedgerAccountId',
        'tax_number' => 'setTaxNumber',
        'notes' => 'setNotes',
        'locale' => 'setLocale',
        'credit_limit' => 'setCreditLimit',
        'credit_days' => 'setCreditDays',
        'credit_terms_and_conditions' => 'setCreditTermsAndConditions',
        'product_sales_price_type_id' => 'setProductSalesPriceTypeId',
        'source_guid' => 'setSourceGuid',
        'currency_id' => 'setCurrencyId',
        'aux_reference' => 'setAuxReference',
        'registered_number' => 'setRegisteredNumber',
        'tax_calculation' => 'setTaxCalculation',
        'auxiliary_account' => 'setAuxiliaryAccount',
        'destination_vat_blocking' => 'setDestinationVatBlocking',
        'main_address' => 'setMainAddress',
        'delivery_address' => 'setDeliveryAddress',
        'main_contact_person' => 'setMainContactPerson',
        'bank_account_details' => 'setBankAccountDetails',
        'tax_treatment' => 'setTaxTreatment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'contact_type_ids' => 'getContactTypeIds',
        'reference' => 'getReference',
        'default_sales_ledger_account_id' => 'getDefaultSalesLedgerAccountId',
        'default_sales_tax_rate_id' => 'getDefaultSalesTaxRateId',
        'default_purchase_ledger_account_id' => 'getDefaultPurchaseLedgerAccountId',
        'tax_number' => 'getTaxNumber',
        'notes' => 'getNotes',
        'locale' => 'getLocale',
        'credit_limit' => 'getCreditLimit',
        'credit_days' => 'getCreditDays',
        'credit_terms_and_conditions' => 'getCreditTermsAndConditions',
        'product_sales_price_type_id' => 'getProductSalesPriceTypeId',
        'source_guid' => 'getSourceGuid',
        'currency_id' => 'getCurrencyId',
        'aux_reference' => 'getAuxReference',
        'registered_number' => 'getRegisteredNumber',
        'tax_calculation' => 'getTaxCalculation',
        'auxiliary_account' => 'getAuxiliaryAccount',
        'destination_vat_blocking' => 'getDestinationVatBlocking',
        'main_address' => 'getMainAddress',
        'delivery_address' => 'getDeliveryAddress',
        'main_contact_person' => 'getMainContactPerson',
        'bank_account_details' => 'getBankAccountDetails',
        'tax_treatment' => 'getTaxTreatment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['contact_type_ids'] = isset($data['contact_type_ids']) ? $data['contact_type_ids'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['default_sales_ledger_account_id'] = isset($data['default_sales_ledger_account_id']) ? $data['default_sales_ledger_account_id'] : null;
        $this->container['default_sales_tax_rate_id'] = isset($data['default_sales_tax_rate_id']) ? $data['default_sales_tax_rate_id'] : null;
        $this->container['default_purchase_ledger_account_id'] = isset($data['default_purchase_ledger_account_id']) ? $data['default_purchase_ledger_account_id'] : null;
        $this->container['tax_number'] = isset($data['tax_number']) ? $data['tax_number'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['credit_days'] = isset($data['credit_days']) ? $data['credit_days'] : null;
        $this->container['credit_terms_and_conditions'] = isset($data['credit_terms_and_conditions']) ? $data['credit_terms_and_conditions'] : null;
        $this->container['product_sales_price_type_id'] = isset($data['product_sales_price_type_id']) ? $data['product_sales_price_type_id'] : null;
        $this->container['source_guid'] = isset($data['source_guid']) ? $data['source_guid'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['aux_reference'] = isset($data['aux_reference']) ? $data['aux_reference'] : null;
        $this->container['registered_number'] = isset($data['registered_number']) ? $data['registered_number'] : null;
        $this->container['tax_calculation'] = isset($data['tax_calculation']) ? $data['tax_calculation'] : null;
        $this->container['auxiliary_account'] = isset($data['auxiliary_account']) ? $data['auxiliary_account'] : null;
        $this->container['destination_vat_blocking'] = isset($data['destination_vat_blocking']) ? $data['destination_vat_blocking'] : null;
        $this->container['main_address'] = isset($data['main_address']) ? $data['main_address'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['main_contact_person'] = isset($data['main_contact_person']) ? $data['main_contact_person'] : null;
        $this->container['bank_account_details'] = isset($data['bank_account_details']) ? $data['bank_account_details'] : null;
        $this->container['tax_treatment'] = isset($data['tax_treatment']) ? $data['tax_treatment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['credit_days']) && ($this->container['credit_days'] > 365)) {
            $invalidProperties[] = "invalid value for 'credit_days', must be smaller than or equal to 365.";
        }

        if (!is_null($this->container['credit_days']) && ($this->container['credit_days'] < 0)) {
            $invalidProperties[] = "invalid value for 'credit_days', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The contact's full name or business name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets contact_type_ids
     *
     * @return string[]
     */
    public function getContactTypeIds()
    {
        return $this->container['contact_type_ids'];
    }

    /**
     * Sets contact_type_ids
     *
     * @param string[] $contact_type_ids The IDs of the Contact Types.
     *
     * @return $this
     */
    public function setContactTypeIds($contact_type_ids)
    {
        $this->container['contact_type_ids'] = $contact_type_ids;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Unique reference for the contact
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets default_sales_ledger_account_id
     *
     * @return string
     */
    public function getDefaultSalesLedgerAccountId()
    {
        return $this->container['default_sales_ledger_account_id'];
    }

    /**
     * Sets default_sales_ledger_account_id
     *
     * @param string $default_sales_ledger_account_id The ID of the Default Sales Ledger Account.
     *
     * @return $this
     */
    public function setDefaultSalesLedgerAccountId($default_sales_ledger_account_id)
    {
        $this->container['default_sales_ledger_account_id'] = $default_sales_ledger_account_id;

        return $this;
    }

    /**
     * Gets default_sales_tax_rate_id
     *
     * @return string
     */
    public function getDefaultSalesTaxRateId()
    {
        return $this->container['default_sales_tax_rate_id'];
    }

    /**
     * Sets default_sales_tax_rate_id
     *
     * @param string $default_sales_tax_rate_id The ID of the Default Sales Tax Rate.
     *
     * @return $this
     */
    public function setDefaultSalesTaxRateId($default_sales_tax_rate_id)
    {
        $this->container['default_sales_tax_rate_id'] = $default_sales_tax_rate_id;

        return $this;
    }

    /**
     * Gets default_purchase_ledger_account_id
     *
     * @return string
     */
    public function getDefaultPurchaseLedgerAccountId()
    {
        return $this->container['default_purchase_ledger_account_id'];
    }

    /**
     * Sets default_purchase_ledger_account_id
     *
     * @param string $default_purchase_ledger_account_id The ID of the Default Purchase Ledger Account.
     *
     * @return $this
     */
    public function setDefaultPurchaseLedgerAccountId($default_purchase_ledger_account_id)
    {
        $this->container['default_purchase_ledger_account_id'] = $default_purchase_ledger_account_id;

        return $this;
    }

    /**
     * Gets tax_number
     *
     * @return string
     */
    public function getTaxNumber()
    {
        return $this->container['tax_number'];
    }

    /**
     * Sets tax_number
     *
     * @param string $tax_number The VAT registration number of the contact. The format will be validated.
     *
     * @return $this
     */
    public function setTaxNumber($tax_number)
    {
        $this->container['tax_number'] = $tax_number;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes The notes for the contact
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale The locale for the contact
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return double
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param double $credit_limit Custom credit limit amount for the contact <br><i>not applicable to Start</i>
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets credit_days
     *
     * @return int
     */
    public function getCreditDays()
    {
        return $this->container['credit_days'];
    }

    /**
     * Sets credit_days
     *
     * @param int $credit_days Custom credit days for the contact.<br> If returned as null in a GET response, you may want to GET /invoice_settings and use 'customer_credit_days'/'vendor_credit_days' as default/fallback according to your use case.
     *
     * @return $this
     */
    public function setCreditDays($credit_days)
    {

        if (!is_null($credit_days) && ($credit_days > 365)) {
            throw new \InvalidArgumentException('invalid value for $credit_days when calling PutContactsContact., must be smaller than or equal to 365.');
        }
        if (!is_null($credit_days) && ($credit_days < 0)) {
            throw new \InvalidArgumentException('invalid value for $credit_days when calling PutContactsContact., must be bigger than or equal to 0.');
        }

        $this->container['credit_days'] = $credit_days;

        return $this;
    }

    /**
     * Gets credit_terms_and_conditions
     *
     * @return string
     */
    public function getCreditTermsAndConditions()
    {
        return $this->container['credit_terms_and_conditions'];
    }

    /**
     * Sets credit_terms_and_conditions
     *
     * @param string $credit_terms_and_conditions Custom terms and conditions for the contact. If set will override global /invoice_settings default terms and conditions. <br><i>Customers only</i>
     *
     * @return $this
     */
    public function setCreditTermsAndConditions($credit_terms_and_conditions)
    {
        $this->container['credit_terms_and_conditions'] = $credit_terms_and_conditions;

        return $this;
    }

    /**
     * Gets product_sales_price_type_id
     *
     * @return string
     */
    public function getProductSalesPriceTypeId()
    {
        return $this->container['product_sales_price_type_id'];
    }

    /**
     * Sets product_sales_price_type_id
     *
     * @param string $product_sales_price_type_id The ID of the Product Sales Price Type.
     *
     * @return $this
     */
    public function setProductSalesPriceTypeId($product_sales_price_type_id)
    {
        $this->container['product_sales_price_type_id'] = $product_sales_price_type_id;

        return $this;
    }

    /**
     * Gets source_guid
     *
     * @return string
     */
    public function getSourceGuid()
    {
        return $this->container['source_guid'];
    }

    /**
     * Sets source_guid
     *
     * @param string $source_guid Used when importing contacts from external sources
     *
     * @return $this
     */
    public function setSourceGuid($source_guid)
    {
        $this->container['source_guid'] = $source_guid;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id The ID of the Currency.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets aux_reference
     *
     * @return string
     */
    public function getAuxReference()
    {
        return $this->container['aux_reference'];
    }

    /**
     * Sets aux_reference
     *
     * @param string $aux_reference Auxiliary reference. Used for German \"Kreditorennummer\" and \"Debitorennummer\". <br> <a href=\"https://developer.sage.com/accounting/reference/settings/#tag/Datev-Settings\">   See Datev Settings endpoint reference </a>
     *
     * @return $this
     */
    public function setAuxReference($aux_reference)
    {
        $this->container['aux_reference'] = $aux_reference;

        return $this;
    }

    /**
     * Gets registered_number
     *
     * @return string
     */
    public function getRegisteredNumber()
    {
        return $this->container['registered_number'];
    }

    /**
     * Sets registered_number
     *
     * @param string $registered_number The registered number of the contact's business. Only used for German businesses and represents the \"Steuernummer\" there (not the \"USt-ID\").
     *
     * @return $this
     */
    public function setRegisteredNumber($registered_number)
    {
        $this->container['registered_number'] = $registered_number;

        return $this;
    }

    /**
     * Gets tax_calculation
     *
     * @return string
     */
    public function getTaxCalculation()
    {
        return $this->container['tax_calculation'];
    }

    /**
     * Sets tax_calculation
     *
     * @param string $tax_calculation <b>France:</b> The tax calculation method used to define tax treatment <i>Vendors only</i> <br> <b>Spain:</b> Defines if contact is a retailer and tax is subject to Recargo de Equivalencia <i>Customers only</i> <b>United Kingdom:</b> Defines if contact tax treatment is domestic reverse charge <i>Customers & Suppliers</i>
     *
     * @return $this
     */
    public function setTaxCalculation($tax_calculation)
    {
        $this->container['tax_calculation'] = $tax_calculation;

        return $this;
    }

    /**
     * Gets auxiliary_account
     *
     * @return string
     */
    public function getAuxiliaryAccount()
    {
        return $this->container['auxiliary_account'];
    }

    /**
     * Sets auxiliary_account
     *
     * @param string $auxiliary_account Auxiliary account - used when auxiliary accounting is enabled in business settings. <br><i>Available only in Spain and France</i>
     *
     * @return $this
     */
    public function setAuxiliaryAccount($auxiliary_account)
    {
        $this->container['auxiliary_account'] = $auxiliary_account;

        return $this;
    }

    /**
     * Gets destination_vat_blocking
     *
     * @return bool
     */
    public function getDestinationVatBlocking()
    {
        return $this->container['destination_vat_blocking'];
    }

    /**
     * Sets destination_vat_blocking
     *
     * @param bool $destination_vat_blocking Identifies a contact should be blocked due to destination vat
     *
     * @return $this
     */
    public function setDestinationVatBlocking($destination_vat_blocking)
    {
        $this->container['destination_vat_blocking'] = $destination_vat_blocking;

        return $this;
    }

    /**
     * Gets main_address
     *
     * @return \Swagger\Client\Model\PostBankAccountsBankAccountMainAddress
     */
    public function getMainAddress()
    {
        return $this->container['main_address'];
    }

    /**
     * Sets main_address
     *
     * @param \Swagger\Client\Model\PostBankAccountsBankAccountMainAddress $main_address main_address
     *
     * @return $this
     */
    public function setMainAddress($main_address)
    {
        $this->container['main_address'] = $main_address;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \Swagger\Client\Model\PostBankAccountsBankAccountMainAddress
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \Swagger\Client\Model\PostBankAccountsBankAccountMainAddress $delivery_address delivery_address
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets main_contact_person
     *
     * @return \Swagger\Client\Model\PostContactsContactMainContactPerson
     */
    public function getMainContactPerson()
    {
        return $this->container['main_contact_person'];
    }

    /**
     * Sets main_contact_person
     *
     * @param \Swagger\Client\Model\PostContactsContactMainContactPerson $main_contact_person main_contact_person
     *
     * @return $this
     */
    public function setMainContactPerson($main_contact_person)
    {
        $this->container['main_contact_person'] = $main_contact_person;

        return $this;
    }

    /**
     * Gets bank_account_details
     *
     * @return \Swagger\Client\Model\PutBankAccountsBankAccountBankAccountDetails
     */
    public function getBankAccountDetails()
    {
        return $this->container['bank_account_details'];
    }

    /**
     * Sets bank_account_details
     *
     * @param \Swagger\Client\Model\PutBankAccountsBankAccountBankAccountDetails $bank_account_details bank_account_details
     *
     * @return $this
     */
    public function setBankAccountDetails($bank_account_details)
    {
        $this->container['bank_account_details'] = $bank_account_details;

        return $this;
    }

    /**
     * Gets tax_treatment
     *
     * @return \Swagger\Client\Model\PostContactsContactTaxTreatment
     */
    public function getTaxTreatment()
    {
        return $this->container['tax_treatment'];
    }

    /**
     * Sets tax_treatment
     *
     * @param \Swagger\Client\Model\PostContactsContactTaxTreatment $tax_treatment tax_treatment
     *
     * @return $this
     */
    public function setTaxTreatment($tax_treatment)
    {
        $this->container['tax_treatment'] = $tax_treatment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


