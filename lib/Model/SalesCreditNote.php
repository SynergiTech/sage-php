<?php
/**
 * SalesCreditNote
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SalesCreditNote Class Doc Comment
 *
 * @category Class
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡«ðŸ‡·, ðŸ‡®ðŸ‡ª, ðŸ‡¬ðŸ‡§, ðŸ‡ºðŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any of the following roles in the area &#x60;Sales&#x60;: Full Access, Restricted Access
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesCreditNote implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesCreditNote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'legacy_id' => 'int',
        'id' => 'string',
        'displayed_as' => 'string',
        'path' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'links' => '\Swagger\Client\Model\Link[]',
        'editable' => 'bool',
        'vat_reverse_charge' => 'bool',
        'tax_calculation_method' => 'string',
        'destination_consignment' => 'bool',
        'destination_vat_rates_in_use' => 'bool',
        'transaction' => '\Swagger\Client\Model\Transaction',
        'transaction_type' => '\Swagger\Client\Model\Base',
        'deleted_at' => '\DateTime',
        'is_cis' => 'bool',
        'cis_applicable_amount' => 'double',
        'base_currency_cis_applicable_amount' => 'double',
        'total_after_cis_deduction' => 'double',
        'base_currency_total_after_cis_deduction' => 'double',
        'has_cis_labour' => 'bool',
        'has_cis_materials' => 'bool',
        'contact' => '\Swagger\Client\Model\Contact',
        'credit_note_number_prefix' => 'string',
        'credit_note_number' => 'string',
        'contact_name' => 'string',
        'contact_reference' => 'string',
        'date' => '\DateTime',
        'original_invoice_date' => '\DateTime',
        'reference' => 'string',
        'main_address_free_form' => 'string',
        'main_address' => '\Swagger\Client\Model\SalesArtefactAddress',
        'delivery_address_free_form' => 'string',
        'delivery_address' => '\Swagger\Client\Model\SalesArtefactAddress',
        'notes' => 'string',
        'terms_and_conditions' => 'string',
        'shipping_net_amount' => 'double',
        'shipping_tax_rate' => '\Swagger\Client\Model\Base',
        'shipping_tax_amount' => 'double',
        'shipping_tax_breakdown' => '\Swagger\Client\Model\TaxBreakdown[]',
        'total_quantity' => 'double',
        'shipping_total_amount' => 'double',
        'net_amount' => 'double',
        'tax_amount' => 'double',
        'total_amount' => 'double',
        'payments_allocations_total_amount' => 'double',
        'payments_allocations_total_discount' => 'double',
        'total_paid' => 'double',
        'outstanding_amount' => 'double',
        'currency' => '\Swagger\Client\Model\Base',
        'exchange_rate' => 'double',
        'inverse_exchange_rate' => 'double',
        'base_currency_shipping_net_amount' => 'double',
        'base_currency_shipping_tax_amount' => 'double',
        'base_currency_shipping_tax_breakdown' => '\Swagger\Client\Model\TaxBreakdown[]',
        'base_currency_shipping_total_amount' => 'double',
        'total_discount_amount' => 'double',
        'base_currency_total_discount_amount' => 'double',
        'base_currency_net_amount' => 'double',
        'base_currency_tax_amount' => 'double',
        'base_currency_total_amount' => 'double',
        'base_currency_outstanding_amount' => 'double',
        'status' => '\Swagger\Client\Model\Base',
        'sent' => 'bool',
        'sent_by_email' => 'bool',
        'void_reason' => 'string',
        'credit_note_lines' => '\Swagger\Client\Model\SalesCreditNoteLineItem[]',
        'tax_analysis' => '\Swagger\Client\Model\ArtefactTaxAnalysis[]',
        'detailed_tax_analysis' => '\Swagger\Client\Model\ArtefactDetailedTaxAnalysis',
        'payments_allocations' => '\Swagger\Client\Model\PaymentAllocation[]',
        'last_paid' => '\DateTime',
        'tax_address_region' => '\Swagger\Client\Model\Base',
        'tax_reconciled' => 'bool',
        'migrated' => 'bool',
        'withholding_tax_rate' => 'double',
        'withholding_tax_amount' => 'double',
        'base_currency_withholding_tax_amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'legacy_id' => 'int32',
        'id' => null,
        'displayed_as' => null,
        'path' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'links' => null,
        'editable' => null,
        'vat_reverse_charge' => null,
        'tax_calculation_method' => null,
        'destination_consignment' => null,
        'destination_vat_rates_in_use' => null,
        'transaction' => null,
        'transaction_type' => null,
        'deleted_at' => 'date-time',
        'is_cis' => null,
        'cis_applicable_amount' => 'double',
        'base_currency_cis_applicable_amount' => 'double',
        'total_after_cis_deduction' => 'double',
        'base_currency_total_after_cis_deduction' => 'double',
        'has_cis_labour' => null,
        'has_cis_materials' => null,
        'contact' => null,
        'credit_note_number_prefix' => null,
        'credit_note_number' => null,
        'contact_name' => null,
        'contact_reference' => null,
        'date' => 'date',
        'original_invoice_date' => 'date',
        'reference' => null,
        'main_address_free_form' => null,
        'main_address' => null,
        'delivery_address_free_form' => null,
        'delivery_address' => null,
        'notes' => null,
        'terms_and_conditions' => null,
        'shipping_net_amount' => 'double',
        'shipping_tax_rate' => null,
        'shipping_tax_amount' => 'double',
        'shipping_tax_breakdown' => null,
        'total_quantity' => 'double',
        'shipping_total_amount' => 'double',
        'net_amount' => 'double',
        'tax_amount' => 'double',
        'total_amount' => 'double',
        'payments_allocations_total_amount' => 'double',
        'payments_allocations_total_discount' => 'double',
        'total_paid' => 'double',
        'outstanding_amount' => 'double',
        'currency' => null,
        'exchange_rate' => 'double',
        'inverse_exchange_rate' => 'double',
        'base_currency_shipping_net_amount' => 'double',
        'base_currency_shipping_tax_amount' => 'double',
        'base_currency_shipping_tax_breakdown' => null,
        'base_currency_shipping_total_amount' => 'double',
        'total_discount_amount' => 'double',
        'base_currency_total_discount_amount' => 'double',
        'base_currency_net_amount' => 'double',
        'base_currency_tax_amount' => 'double',
        'base_currency_total_amount' => 'double',
        'base_currency_outstanding_amount' => 'double',
        'status' => null,
        'sent' => null,
        'sent_by_email' => null,
        'void_reason' => null,
        'credit_note_lines' => null,
        'tax_analysis' => null,
        'detailed_tax_analysis' => null,
        'payments_allocations' => null,
        'last_paid' => 'date',
        'tax_address_region' => null,
        'tax_reconciled' => null,
        'migrated' => null,
        'withholding_tax_rate' => 'double',
        'withholding_tax_amount' => 'double',
        'base_currency_withholding_tax_amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legacy_id' => 'legacy_id',
        'id' => 'id',
        'displayed_as' => 'displayed_as',
        'path' => '$path',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'links' => 'links',
        'editable' => 'editable',
        'vat_reverse_charge' => 'vat_reverse_charge',
        'tax_calculation_method' => 'tax_calculation_method',
        'destination_consignment' => 'destination_consignment',
        'destination_vat_rates_in_use' => 'destination_vat_rates_in_use',
        'transaction' => 'transaction',
        'transaction_type' => 'transaction_type',
        'deleted_at' => 'deleted_at',
        'is_cis' => 'is_cis',
        'cis_applicable_amount' => 'cis_applicable_amount',
        'base_currency_cis_applicable_amount' => 'base_currency_cis_applicable_amount',
        'total_after_cis_deduction' => 'total_after_cis_deduction',
        'base_currency_total_after_cis_deduction' => 'base_currency_total_after_cis_deduction',
        'has_cis_labour' => 'has_cis_labour',
        'has_cis_materials' => 'has_cis_materials',
        'contact' => 'contact',
        'credit_note_number_prefix' => 'credit_note_number_prefix',
        'credit_note_number' => 'credit_note_number',
        'contact_name' => 'contact_name',
        'contact_reference' => 'contact_reference',
        'date' => 'date',
        'original_invoice_date' => 'original_invoice_date',
        'reference' => 'reference',
        'main_address_free_form' => 'main_address_free_form',
        'main_address' => 'main_address',
        'delivery_address_free_form' => 'delivery_address_free_form',
        'delivery_address' => 'delivery_address',
        'notes' => 'notes',
        'terms_and_conditions' => 'terms_and_conditions',
        'shipping_net_amount' => 'shipping_net_amount',
        'shipping_tax_rate' => 'shipping_tax_rate',
        'shipping_tax_amount' => 'shipping_tax_amount',
        'shipping_tax_breakdown' => 'shipping_tax_breakdown',
        'total_quantity' => 'total_quantity',
        'shipping_total_amount' => 'shipping_total_amount',
        'net_amount' => 'net_amount',
        'tax_amount' => 'tax_amount',
        'total_amount' => 'total_amount',
        'payments_allocations_total_amount' => 'payments_allocations_total_amount',
        'payments_allocations_total_discount' => 'payments_allocations_total_discount',
        'total_paid' => 'total_paid',
        'outstanding_amount' => 'outstanding_amount',
        'currency' => 'currency',
        'exchange_rate' => 'exchange_rate',
        'inverse_exchange_rate' => 'inverse_exchange_rate',
        'base_currency_shipping_net_amount' => 'base_currency_shipping_net_amount',
        'base_currency_shipping_tax_amount' => 'base_currency_shipping_tax_amount',
        'base_currency_shipping_tax_breakdown' => 'base_currency_shipping_tax_breakdown',
        'base_currency_shipping_total_amount' => 'base_currency_shipping_total_amount',
        'total_discount_amount' => 'total_discount_amount',
        'base_currency_total_discount_amount' => 'base_currency_total_discount_amount',
        'base_currency_net_amount' => 'base_currency_net_amount',
        'base_currency_tax_amount' => 'base_currency_tax_amount',
        'base_currency_total_amount' => 'base_currency_total_amount',
        'base_currency_outstanding_amount' => 'base_currency_outstanding_amount',
        'status' => 'status',
        'sent' => 'sent',
        'sent_by_email' => 'sent_by_email',
        'void_reason' => 'void_reason',
        'credit_note_lines' => 'credit_note_lines',
        'tax_analysis' => 'tax_analysis',
        'detailed_tax_analysis' => 'detailed_tax_analysis',
        'payments_allocations' => 'payments_allocations',
        'last_paid' => 'last_paid',
        'tax_address_region' => 'tax_address_region',
        'tax_reconciled' => 'tax_reconciled',
        'migrated' => 'migrated',
        'withholding_tax_rate' => 'withholding_tax_rate',
        'withholding_tax_amount' => 'withholding_tax_amount',
        'base_currency_withholding_tax_amount' => 'base_currency_withholding_tax_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legacy_id' => 'setLegacyId',
        'id' => 'setId',
        'displayed_as' => 'setDisplayedAs',
        'path' => 'setPath',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'links' => 'setLinks',
        'editable' => 'setEditable',
        'vat_reverse_charge' => 'setVatReverseCharge',
        'tax_calculation_method' => 'setTaxCalculationMethod',
        'destination_consignment' => 'setDestinationConsignment',
        'destination_vat_rates_in_use' => 'setDestinationVatRatesInUse',
        'transaction' => 'setTransaction',
        'transaction_type' => 'setTransactionType',
        'deleted_at' => 'setDeletedAt',
        'is_cis' => 'setIsCis',
        'cis_applicable_amount' => 'setCisApplicableAmount',
        'base_currency_cis_applicable_amount' => 'setBaseCurrencyCisApplicableAmount',
        'total_after_cis_deduction' => 'setTotalAfterCisDeduction',
        'base_currency_total_after_cis_deduction' => 'setBaseCurrencyTotalAfterCisDeduction',
        'has_cis_labour' => 'setHasCisLabour',
        'has_cis_materials' => 'setHasCisMaterials',
        'contact' => 'setContact',
        'credit_note_number_prefix' => 'setCreditNoteNumberPrefix',
        'credit_note_number' => 'setCreditNoteNumber',
        'contact_name' => 'setContactName',
        'contact_reference' => 'setContactReference',
        'date' => 'setDate',
        'original_invoice_date' => 'setOriginalInvoiceDate',
        'reference' => 'setReference',
        'main_address_free_form' => 'setMainAddressFreeForm',
        'main_address' => 'setMainAddress',
        'delivery_address_free_form' => 'setDeliveryAddressFreeForm',
        'delivery_address' => 'setDeliveryAddress',
        'notes' => 'setNotes',
        'terms_and_conditions' => 'setTermsAndConditions',
        'shipping_net_amount' => 'setShippingNetAmount',
        'shipping_tax_rate' => 'setShippingTaxRate',
        'shipping_tax_amount' => 'setShippingTaxAmount',
        'shipping_tax_breakdown' => 'setShippingTaxBreakdown',
        'total_quantity' => 'setTotalQuantity',
        'shipping_total_amount' => 'setShippingTotalAmount',
        'net_amount' => 'setNetAmount',
        'tax_amount' => 'setTaxAmount',
        'total_amount' => 'setTotalAmount',
        'payments_allocations_total_amount' => 'setPaymentsAllocationsTotalAmount',
        'payments_allocations_total_discount' => 'setPaymentsAllocationsTotalDiscount',
        'total_paid' => 'setTotalPaid',
        'outstanding_amount' => 'setOutstandingAmount',
        'currency' => 'setCurrency',
        'exchange_rate' => 'setExchangeRate',
        'inverse_exchange_rate' => 'setInverseExchangeRate',
        'base_currency_shipping_net_amount' => 'setBaseCurrencyShippingNetAmount',
        'base_currency_shipping_tax_amount' => 'setBaseCurrencyShippingTaxAmount',
        'base_currency_shipping_tax_breakdown' => 'setBaseCurrencyShippingTaxBreakdown',
        'base_currency_shipping_total_amount' => 'setBaseCurrencyShippingTotalAmount',
        'total_discount_amount' => 'setTotalDiscountAmount',
        'base_currency_total_discount_amount' => 'setBaseCurrencyTotalDiscountAmount',
        'base_currency_net_amount' => 'setBaseCurrencyNetAmount',
        'base_currency_tax_amount' => 'setBaseCurrencyTaxAmount',
        'base_currency_total_amount' => 'setBaseCurrencyTotalAmount',
        'base_currency_outstanding_amount' => 'setBaseCurrencyOutstandingAmount',
        'status' => 'setStatus',
        'sent' => 'setSent',
        'sent_by_email' => 'setSentByEmail',
        'void_reason' => 'setVoidReason',
        'credit_note_lines' => 'setCreditNoteLines',
        'tax_analysis' => 'setTaxAnalysis',
        'detailed_tax_analysis' => 'setDetailedTaxAnalysis',
        'payments_allocations' => 'setPaymentsAllocations',
        'last_paid' => 'setLastPaid',
        'tax_address_region' => 'setTaxAddressRegion',
        'tax_reconciled' => 'setTaxReconciled',
        'migrated' => 'setMigrated',
        'withholding_tax_rate' => 'setWithholdingTaxRate',
        'withholding_tax_amount' => 'setWithholdingTaxAmount',
        'base_currency_withholding_tax_amount' => 'setBaseCurrencyWithholdingTaxAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legacy_id' => 'getLegacyId',
        'id' => 'getId',
        'displayed_as' => 'getDisplayedAs',
        'path' => 'getPath',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'links' => 'getLinks',
        'editable' => 'getEditable',
        'vat_reverse_charge' => 'getVatReverseCharge',
        'tax_calculation_method' => 'getTaxCalculationMethod',
        'destination_consignment' => 'getDestinationConsignment',
        'destination_vat_rates_in_use' => 'getDestinationVatRatesInUse',
        'transaction' => 'getTransaction',
        'transaction_type' => 'getTransactionType',
        'deleted_at' => 'getDeletedAt',
        'is_cis' => 'getIsCis',
        'cis_applicable_amount' => 'getCisApplicableAmount',
        'base_currency_cis_applicable_amount' => 'getBaseCurrencyCisApplicableAmount',
        'total_after_cis_deduction' => 'getTotalAfterCisDeduction',
        'base_currency_total_after_cis_deduction' => 'getBaseCurrencyTotalAfterCisDeduction',
        'has_cis_labour' => 'getHasCisLabour',
        'has_cis_materials' => 'getHasCisMaterials',
        'contact' => 'getContact',
        'credit_note_number_prefix' => 'getCreditNoteNumberPrefix',
        'credit_note_number' => 'getCreditNoteNumber',
        'contact_name' => 'getContactName',
        'contact_reference' => 'getContactReference',
        'date' => 'getDate',
        'original_invoice_date' => 'getOriginalInvoiceDate',
        'reference' => 'getReference',
        'main_address_free_form' => 'getMainAddressFreeForm',
        'main_address' => 'getMainAddress',
        'delivery_address_free_form' => 'getDeliveryAddressFreeForm',
        'delivery_address' => 'getDeliveryAddress',
        'notes' => 'getNotes',
        'terms_and_conditions' => 'getTermsAndConditions',
        'shipping_net_amount' => 'getShippingNetAmount',
        'shipping_tax_rate' => 'getShippingTaxRate',
        'shipping_tax_amount' => 'getShippingTaxAmount',
        'shipping_tax_breakdown' => 'getShippingTaxBreakdown',
        'total_quantity' => 'getTotalQuantity',
        'shipping_total_amount' => 'getShippingTotalAmount',
        'net_amount' => 'getNetAmount',
        'tax_amount' => 'getTaxAmount',
        'total_amount' => 'getTotalAmount',
        'payments_allocations_total_amount' => 'getPaymentsAllocationsTotalAmount',
        'payments_allocations_total_discount' => 'getPaymentsAllocationsTotalDiscount',
        'total_paid' => 'getTotalPaid',
        'outstanding_amount' => 'getOutstandingAmount',
        'currency' => 'getCurrency',
        'exchange_rate' => 'getExchangeRate',
        'inverse_exchange_rate' => 'getInverseExchangeRate',
        'base_currency_shipping_net_amount' => 'getBaseCurrencyShippingNetAmount',
        'base_currency_shipping_tax_amount' => 'getBaseCurrencyShippingTaxAmount',
        'base_currency_shipping_tax_breakdown' => 'getBaseCurrencyShippingTaxBreakdown',
        'base_currency_shipping_total_amount' => 'getBaseCurrencyShippingTotalAmount',
        'total_discount_amount' => 'getTotalDiscountAmount',
        'base_currency_total_discount_amount' => 'getBaseCurrencyTotalDiscountAmount',
        'base_currency_net_amount' => 'getBaseCurrencyNetAmount',
        'base_currency_tax_amount' => 'getBaseCurrencyTaxAmount',
        'base_currency_total_amount' => 'getBaseCurrencyTotalAmount',
        'base_currency_outstanding_amount' => 'getBaseCurrencyOutstandingAmount',
        'status' => 'getStatus',
        'sent' => 'getSent',
        'sent_by_email' => 'getSentByEmail',
        'void_reason' => 'getVoidReason',
        'credit_note_lines' => 'getCreditNoteLines',
        'tax_analysis' => 'getTaxAnalysis',
        'detailed_tax_analysis' => 'getDetailedTaxAnalysis',
        'payments_allocations' => 'getPaymentsAllocations',
        'last_paid' => 'getLastPaid',
        'tax_address_region' => 'getTaxAddressRegion',
        'tax_reconciled' => 'getTaxReconciled',
        'migrated' => 'getMigrated',
        'withholding_tax_rate' => 'getWithholdingTaxRate',
        'withholding_tax_amount' => 'getWithholdingTaxAmount',
        'base_currency_withholding_tax_amount' => 'getBaseCurrencyWithholdingTaxAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['legacy_id'] = isset($data['legacy_id']) ? $data['legacy_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['displayed_as'] = isset($data['displayed_as']) ? $data['displayed_as'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['editable'] = isset($data['editable']) ? $data['editable'] : null;
        $this->container['vat_reverse_charge'] = isset($data['vat_reverse_charge']) ? $data['vat_reverse_charge'] : null;
        $this->container['tax_calculation_method'] = isset($data['tax_calculation_method']) ? $data['tax_calculation_method'] : null;
        $this->container['destination_consignment'] = isset($data['destination_consignment']) ? $data['destination_consignment'] : null;
        $this->container['destination_vat_rates_in_use'] = isset($data['destination_vat_rates_in_use']) ? $data['destination_vat_rates_in_use'] : null;
        $this->container['transaction'] = isset($data['transaction']) ? $data['transaction'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['is_cis'] = isset($data['is_cis']) ? $data['is_cis'] : null;
        $this->container['cis_applicable_amount'] = isset($data['cis_applicable_amount']) ? $data['cis_applicable_amount'] : null;
        $this->container['base_currency_cis_applicable_amount'] = isset($data['base_currency_cis_applicable_amount']) ? $data['base_currency_cis_applicable_amount'] : null;
        $this->container['total_after_cis_deduction'] = isset($data['total_after_cis_deduction']) ? $data['total_after_cis_deduction'] : null;
        $this->container['base_currency_total_after_cis_deduction'] = isset($data['base_currency_total_after_cis_deduction']) ? $data['base_currency_total_after_cis_deduction'] : null;
        $this->container['has_cis_labour'] = isset($data['has_cis_labour']) ? $data['has_cis_labour'] : null;
        $this->container['has_cis_materials'] = isset($data['has_cis_materials']) ? $data['has_cis_materials'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['credit_note_number_prefix'] = isset($data['credit_note_number_prefix']) ? $data['credit_note_number_prefix'] : null;
        $this->container['credit_note_number'] = isset($data['credit_note_number']) ? $data['credit_note_number'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['contact_reference'] = isset($data['contact_reference']) ? $data['contact_reference'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['original_invoice_date'] = isset($data['original_invoice_date']) ? $data['original_invoice_date'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['main_address_free_form'] = isset($data['main_address_free_form']) ? $data['main_address_free_form'] : null;
        $this->container['main_address'] = isset($data['main_address']) ? $data['main_address'] : null;
        $this->container['delivery_address_free_form'] = isset($data['delivery_address_free_form']) ? $data['delivery_address_free_form'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['terms_and_conditions'] = isset($data['terms_and_conditions']) ? $data['terms_and_conditions'] : null;
        $this->container['shipping_net_amount'] = isset($data['shipping_net_amount']) ? $data['shipping_net_amount'] : null;
        $this->container['shipping_tax_rate'] = isset($data['shipping_tax_rate']) ? $data['shipping_tax_rate'] : null;
        $this->container['shipping_tax_amount'] = isset($data['shipping_tax_amount']) ? $data['shipping_tax_amount'] : null;
        $this->container['shipping_tax_breakdown'] = isset($data['shipping_tax_breakdown']) ? $data['shipping_tax_breakdown'] : null;
        $this->container['total_quantity'] = isset($data['total_quantity']) ? $data['total_quantity'] : null;
        $this->container['shipping_total_amount'] = isset($data['shipping_total_amount']) ? $data['shipping_total_amount'] : null;
        $this->container['net_amount'] = isset($data['net_amount']) ? $data['net_amount'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['payments_allocations_total_amount'] = isset($data['payments_allocations_total_amount']) ? $data['payments_allocations_total_amount'] : null;
        $this->container['payments_allocations_total_discount'] = isset($data['payments_allocations_total_discount']) ? $data['payments_allocations_total_discount'] : null;
        $this->container['total_paid'] = isset($data['total_paid']) ? $data['total_paid'] : null;
        $this->container['outstanding_amount'] = isset($data['outstanding_amount']) ? $data['outstanding_amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['inverse_exchange_rate'] = isset($data['inverse_exchange_rate']) ? $data['inverse_exchange_rate'] : null;
        $this->container['base_currency_shipping_net_amount'] = isset($data['base_currency_shipping_net_amount']) ? $data['base_currency_shipping_net_amount'] : null;
        $this->container['base_currency_shipping_tax_amount'] = isset($data['base_currency_shipping_tax_amount']) ? $data['base_currency_shipping_tax_amount'] : null;
        $this->container['base_currency_shipping_tax_breakdown'] = isset($data['base_currency_shipping_tax_breakdown']) ? $data['base_currency_shipping_tax_breakdown'] : null;
        $this->container['base_currency_shipping_total_amount'] = isset($data['base_currency_shipping_total_amount']) ? $data['base_currency_shipping_total_amount'] : null;
        $this->container['total_discount_amount'] = isset($data['total_discount_amount']) ? $data['total_discount_amount'] : null;
        $this->container['base_currency_total_discount_amount'] = isset($data['base_currency_total_discount_amount']) ? $data['base_currency_total_discount_amount'] : null;
        $this->container['base_currency_net_amount'] = isset($data['base_currency_net_amount']) ? $data['base_currency_net_amount'] : null;
        $this->container['base_currency_tax_amount'] = isset($data['base_currency_tax_amount']) ? $data['base_currency_tax_amount'] : null;
        $this->container['base_currency_total_amount'] = isset($data['base_currency_total_amount']) ? $data['base_currency_total_amount'] : null;
        $this->container['base_currency_outstanding_amount'] = isset($data['base_currency_outstanding_amount']) ? $data['base_currency_outstanding_amount'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sent'] = isset($data['sent']) ? $data['sent'] : null;
        $this->container['sent_by_email'] = isset($data['sent_by_email']) ? $data['sent_by_email'] : null;
        $this->container['void_reason'] = isset($data['void_reason']) ? $data['void_reason'] : null;
        $this->container['credit_note_lines'] = isset($data['credit_note_lines']) ? $data['credit_note_lines'] : null;
        $this->container['tax_analysis'] = isset($data['tax_analysis']) ? $data['tax_analysis'] : null;
        $this->container['detailed_tax_analysis'] = isset($data['detailed_tax_analysis']) ? $data['detailed_tax_analysis'] : null;
        $this->container['payments_allocations'] = isset($data['payments_allocations']) ? $data['payments_allocations'] : null;
        $this->container['last_paid'] = isset($data['last_paid']) ? $data['last_paid'] : null;
        $this->container['tax_address_region'] = isset($data['tax_address_region']) ? $data['tax_address_region'] : null;
        $this->container['tax_reconciled'] = isset($data['tax_reconciled']) ? $data['tax_reconciled'] : null;
        $this->container['migrated'] = isset($data['migrated']) ? $data['migrated'] : null;
        $this->container['withholding_tax_rate'] = isset($data['withholding_tax_rate']) ? $data['withholding_tax_rate'] : null;
        $this->container['withholding_tax_amount'] = isset($data['withholding_tax_amount']) ? $data['withholding_tax_amount'] : null;
        $this->container['base_currency_withholding_tax_amount'] = isset($data['base_currency_withholding_tax_amount']) ? $data['base_currency_withholding_tax_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['credit_note_number_prefix']) && (mb_strlen($this->container['credit_note_number_prefix']) > 6)) {
            $invalidProperties[] = "invalid value for 'credit_note_number_prefix', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['contact_name']) && (mb_strlen($this->container['contact_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contact_reference']) && (mb_strlen($this->container['contact_reference']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_reference', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 25)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['main_address_free_form']) && (mb_strlen($this->container['main_address_free_form']) > 500)) {
            $invalidProperties[] = "invalid value for 'main_address_free_form', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['delivery_address_free_form']) && (mb_strlen($this->container['delivery_address_free_form']) > 500)) {
            $invalidProperties[] = "invalid value for 'delivery_address_free_form', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) > 2000)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['terms_and_conditions']) && (mb_strlen($this->container['terms_and_conditions']) > 65535)) {
            $invalidProperties[] = "invalid value for 'terms_and_conditions', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['void_reason']) && (mb_strlen($this->container['void_reason']) > 200)) {
            $invalidProperties[] = "invalid value for 'void_reason', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacy_id
     *
     * @return int
     */
    public function getLegacyId()
    {
        return $this->container['legacy_id'];
    }

    /**
     * Sets legacy_id
     *
     * @param int $legacy_id The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId($legacy_id)
    {
        $this->container['legacy_id'] = $legacy_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayed_as
     *
     * @return string
     */
    public function getDisplayedAs()
    {
        return $this->container['displayed_as'];
    }

    /**
     * Sets displayed_as
     *
     * @param string $displayed_as The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs($displayed_as)
    {
        $this->container['displayed_as'] = $displayed_as;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The API path for the resource
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The datetime when the item was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\Link[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\Link[] $links Links for the resource
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool $editable Indicates whether artefact can be edited
     *
     * @return $this
     */
    public function setEditable($editable)
    {
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets vat_reverse_charge
     *
     * @return bool
     */
    public function getVatReverseCharge()
    {
        return $this->container['vat_reverse_charge'];
    }

    /**
     * Sets vat_reverse_charge
     *
     * @param bool $vat_reverse_charge Indicates whether Domestic Reverser Charge is applied to the artefact. Only used for a UK business.
     *
     * @return $this
     */
    public function setVatReverseCharge($vat_reverse_charge)
    {
        $this->container['vat_reverse_charge'] = $vat_reverse_charge;

        return $this;
    }

    /**
     * Gets tax_calculation_method
     *
     * @return string
     */
    public function getTaxCalculationMethod()
    {
        return $this->container['tax_calculation_method'];
    }

    /**
     * Sets tax_calculation_method
     *
     * @param string $tax_calculation_method The tax calculation method, if applicable, for this sales credit note, returns invoice or cash.
     *
     * @return $this
     */
    public function setTaxCalculationMethod($tax_calculation_method)
    {
        $this->container['tax_calculation_method'] = $tax_calculation_method;

        return $this;
    }

    /**
     * Gets destination_consignment
     *
     * @return bool
     */
    public function getDestinationConsignment()
    {
        return $this->container['destination_consignment'];
    }

    /**
     * Sets destination_consignment
     *
     * @param bool $destination_consignment Indicates whether consignment checkbox for destination VAT is checked on the artefact. Only used for an UK business, where destination VAT was enabled in the settings.
     *
     * @return $this
     */
    public function setDestinationConsignment($destination_consignment)
    {
        $this->container['destination_consignment'] = $destination_consignment;

        return $this;
    }

    /**
     * Gets destination_vat_rates_in_use
     *
     * @return bool
     */
    public function getDestinationVatRatesInUse()
    {
        return $this->container['destination_vat_rates_in_use'];
    }

    /**
     * Sets destination_vat_rates_in_use
     *
     * @param bool $destination_vat_rates_in_use Indicates whether destination vat rates are in use
     *
     * @return $this
     */
    public function setDestinationVatRatesInUse($destination_vat_rates_in_use)
    {
        $this->container['destination_vat_rates_in_use'] = $destination_vat_rates_in_use;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return \Swagger\Client\Model\Transaction
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \Swagger\Client\Model\Transaction $transaction The transaction record for the sales credit note
     *
     * @return $this
     */
    public function setTransaction($transaction)
    {
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param \Swagger\Client\Model\Base $transaction_type The transaction type of the item
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at The datetime when the item was deleted
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets is_cis
     *
     * @return bool
     */
    public function getIsCis()
    {
        return $this->container['is_cis'];
    }

    /**
     * Sets is_cis
     *
     * @param bool $is_cis Identifies an artefact as CIS (Construction Industry Scheme) applicable - UK only
     *
     * @return $this
     */
    public function setIsCis($is_cis)
    {
        $this->container['is_cis'] = $is_cis;

        return $this;
    }

    /**
     * Gets cis_applicable_amount
     *
     * @return double
     */
    public function getCisApplicableAmount()
    {
        return $this->container['cis_applicable_amount'];
    }

    /**
     * Sets cis_applicable_amount
     *
     * @param double $cis_applicable_amount The total amount of CIS deductible labour - only applicable in UK
     *
     * @return $this
     */
    public function setCisApplicableAmount($cis_applicable_amount)
    {
        $this->container['cis_applicable_amount'] = $cis_applicable_amount;

        return $this;
    }

    /**
     * Gets base_currency_cis_applicable_amount
     *
     * @return double
     */
    public function getBaseCurrencyCisApplicableAmount()
    {
        return $this->container['base_currency_cis_applicable_amount'];
    }

    /**
     * Sets base_currency_cis_applicable_amount
     *
     * @param double $base_currency_cis_applicable_amount The total amount of CIS deductible labour in the base currency - only applicable in UK
     *
     * @return $this
     */
    public function setBaseCurrencyCisApplicableAmount($base_currency_cis_applicable_amount)
    {
        $this->container['base_currency_cis_applicable_amount'] = $base_currency_cis_applicable_amount;

        return $this;
    }

    /**
     * Gets total_after_cis_deduction
     *
     * @return double
     */
    public function getTotalAfterCisDeduction()
    {
        return $this->container['total_after_cis_deduction'];
    }

    /**
     * Sets total_after_cis_deduction
     *
     * @param double $total_after_cis_deduction The total of the artefact with the total of CIS deducted - only applicable in UK
     *
     * @return $this
     */
    public function setTotalAfterCisDeduction($total_after_cis_deduction)
    {
        $this->container['total_after_cis_deduction'] = $total_after_cis_deduction;

        return $this;
    }

    /**
     * Gets base_currency_total_after_cis_deduction
     *
     * @return double
     */
    public function getBaseCurrencyTotalAfterCisDeduction()
    {
        return $this->container['base_currency_total_after_cis_deduction'];
    }

    /**
     * Sets base_currency_total_after_cis_deduction
     *
     * @param double $base_currency_total_after_cis_deduction The total of the artefact with the total of CIS deducted in the base currency - only applicable in UK
     *
     * @return $this
     */
    public function setBaseCurrencyTotalAfterCisDeduction($base_currency_total_after_cis_deduction)
    {
        $this->container['base_currency_total_after_cis_deduction'] = $base_currency_total_after_cis_deduction;

        return $this;
    }

    /**
     * Gets has_cis_labour
     *
     * @return bool
     */
    public function getHasCisLabour()
    {
        return $this->container['has_cis_labour'];
    }

    /**
     * Sets has_cis_labour
     *
     * @param bool $has_cis_labour Identifies an artefact as having CIS Labour line items
     *
     * @return $this
     */
    public function setHasCisLabour($has_cis_labour)
    {
        $this->container['has_cis_labour'] = $has_cis_labour;

        return $this;
    }

    /**
     * Gets has_cis_materials
     *
     * @return bool
     */
    public function getHasCisMaterials()
    {
        return $this->container['has_cis_materials'];
    }

    /**
     * Sets has_cis_materials
     *
     * @param bool $has_cis_materials Identifies an artefact as having CIS Materials line items
     *
     * @return $this
     */
    public function setHasCisMaterials($has_cis_materials)
    {
        $this->container['has_cis_materials'] = $has_cis_materials;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\Contact $contact The contact the sales credit note relates to
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets credit_note_number_prefix
     *
     * @return string
     */
    public function getCreditNoteNumberPrefix()
    {
        return $this->container['credit_note_number_prefix'];
    }

    /**
     * Sets credit_note_number_prefix
     *
     * @param string $credit_note_number_prefix The credit note number prefix
     *
     * @return $this
     */
    public function setCreditNoteNumberPrefix($credit_note_number_prefix)
    {
        if (!is_null($credit_note_number_prefix) && (mb_strlen($credit_note_number_prefix) > 6)) {
            throw new \InvalidArgumentException('invalid length for $credit_note_number_prefix when calling SalesCreditNote., must be smaller than or equal to 6.');
        }

        $this->container['credit_note_number_prefix'] = $credit_note_number_prefix;

        return $this;
    }

    /**
     * Gets credit_note_number
     *
     * @return string
     */
    public function getCreditNoteNumber()
    {
        return $this->container['credit_note_number'];
    }

    /**
     * Sets credit_note_number
     *
     * @param string $credit_note_number The generated credit note number
     *
     * @return $this
     */
    public function setCreditNoteNumber($credit_note_number)
    {
        $this->container['credit_note_number'] = $credit_note_number;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name The name of the contact when the credit note was created
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        if (!is_null($contact_name) && (mb_strlen($contact_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_name when calling SalesCreditNote., must be smaller than or equal to 255.');
        }

        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_reference
     *
     * @return string
     */
    public function getContactReference()
    {
        return $this->container['contact_reference'];
    }

    /**
     * Sets contact_reference
     *
     * @param string $contact_reference The reference of the contact when the credit note was created
     *
     * @return $this
     */
    public function setContactReference($contact_reference)
    {
        if (!is_null($contact_reference) && (mb_strlen($contact_reference) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_reference when calling SalesCreditNote., must be smaller than or equal to 255.');
        }

        $this->container['contact_reference'] = $contact_reference;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The date of the credit note
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets original_invoice_date
     *
     * @return \DateTime
     */
    public function getOriginalInvoiceDate()
    {
        return $this->container['original_invoice_date'];
    }

    /**
     * Sets original_invoice_date
     *
     * @param \DateTime $original_invoice_date The date of the original invoice
     *
     * @return $this
     */
    public function setOriginalInvoiceDate($original_invoice_date)
    {
        $this->container['original_invoice_date'] = $original_invoice_date;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The reference for the credit note
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (mb_strlen($reference) > 25)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling SalesCreditNote., must be smaller than or equal to 25.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets main_address_free_form
     *
     * @return string
     */
    public function getMainAddressFreeForm()
    {
        return $this->container['main_address_free_form'];
    }

    /**
     * Sets main_address_free_form
     *
     * @param string $main_address_free_form The free-form main address of the credit note Note: An upper length limit of 500 characters is imposed conditionally and may not apply in every request. A hard upper limit of 65535 characters is imposed by the storage layer, though.
     *
     * @return $this
     */
    public function setMainAddressFreeForm($main_address_free_form)
    {
        if (!is_null($main_address_free_form) && (mb_strlen($main_address_free_form) > 500)) {
            throw new \InvalidArgumentException('invalid length for $main_address_free_form when calling SalesCreditNote., must be smaller than or equal to 500.');
        }

        $this->container['main_address_free_form'] = $main_address_free_form;

        return $this;
    }

    /**
     * Gets main_address
     *
     * @return \Swagger\Client\Model\SalesArtefactAddress
     */
    public function getMainAddress()
    {
        return $this->container['main_address'];
    }

    /**
     * Sets main_address
     *
     * @param \Swagger\Client\Model\SalesArtefactAddress $main_address The main address of the credit note
     *
     * @return $this
     */
    public function setMainAddress($main_address)
    {
        $this->container['main_address'] = $main_address;

        return $this;
    }

    /**
     * Gets delivery_address_free_form
     *
     * @return string
     */
    public function getDeliveryAddressFreeForm()
    {
        return $this->container['delivery_address_free_form'];
    }

    /**
     * Sets delivery_address_free_form
     *
     * @param string $delivery_address_free_form The free-form delivery address of the credit note Note: An upper length limit of 500 characters is imposed conditionally and may not apply in every request. A hard upper limit of 65535 characters is imposed by the storage layer, though.
     *
     * @return $this
     */
    public function setDeliveryAddressFreeForm($delivery_address_free_form)
    {
        if (!is_null($delivery_address_free_form) && (mb_strlen($delivery_address_free_form) > 500)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address_free_form when calling SalesCreditNote., must be smaller than or equal to 500.');
        }

        $this->container['delivery_address_free_form'] = $delivery_address_free_form;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \Swagger\Client\Model\SalesArtefactAddress
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \Swagger\Client\Model\SalesArtefactAddress $delivery_address The delivery address of the credit note
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes credit note notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        if (!is_null($notes) && (mb_strlen($notes) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $notes when calling SalesCreditNote., must be smaller than or equal to 2000.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets terms_and_conditions
     *
     * @return string
     */
    public function getTermsAndConditions()
    {
        return $this->container['terms_and_conditions'];
    }

    /**
     * Sets terms_and_conditions
     *
     * @param string $terms_and_conditions Credit note terms and conditions
     *
     * @return $this
     */
    public function setTermsAndConditions($terms_and_conditions)
    {
        if (!is_null($terms_and_conditions) && (mb_strlen($terms_and_conditions) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $terms_and_conditions when calling SalesCreditNote., must be smaller than or equal to 65535.');
        }

        $this->container['terms_and_conditions'] = $terms_and_conditions;

        return $this;
    }

    /**
     * Gets shipping_net_amount
     *
     * @return double
     */
    public function getShippingNetAmount()
    {
        return $this->container['shipping_net_amount'];
    }

    /**
     * Sets shipping_net_amount
     *
     * @param double $shipping_net_amount The net shipping amount
     *
     * @return $this
     */
    public function setShippingNetAmount($shipping_net_amount)
    {
        $this->container['shipping_net_amount'] = $shipping_net_amount;

        return $this;
    }

    /**
     * Gets shipping_tax_rate
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getShippingTaxRate()
    {
        return $this->container['shipping_tax_rate'];
    }

    /**
     * Sets shipping_tax_rate
     *
     * @param \Swagger\Client\Model\Base $shipping_tax_rate The shipping tax rate
     *
     * @return $this
     */
    public function setShippingTaxRate($shipping_tax_rate)
    {
        $this->container['shipping_tax_rate'] = $shipping_tax_rate;

        return $this;
    }

    /**
     * Gets shipping_tax_amount
     *
     * @return double
     */
    public function getShippingTaxAmount()
    {
        return $this->container['shipping_tax_amount'];
    }

    /**
     * Sets shipping_tax_amount
     *
     * @param double $shipping_tax_amount The tax shipping amount. NOTE: This is not required for POST/PUT requests as the shipping tax is calculated based on the shipping_net_amount and the shipping_tax_rate.
     *
     * @return $this
     */
    public function setShippingTaxAmount($shipping_tax_amount)
    {
        $this->container['shipping_tax_amount'] = $shipping_tax_amount;

        return $this;
    }

    /**
     * Gets shipping_tax_breakdown
     *
     * @return \Swagger\Client\Model\TaxBreakdown[]
     */
    public function getShippingTaxBreakdown()
    {
        return $this->container['shipping_tax_breakdown'];
    }

    /**
     * Sets shipping_tax_breakdown
     *
     * @param \Swagger\Client\Model\TaxBreakdown[] $shipping_tax_breakdown The shipping tax breakdown for the credit note
     *
     * @return $this
     */
    public function setShippingTaxBreakdown($shipping_tax_breakdown)
    {
        $this->container['shipping_tax_breakdown'] = $shipping_tax_breakdown;

        return $this;
    }

    /**
     * Gets total_quantity
     *
     * @return double
     */
    public function getTotalQuantity()
    {
        return $this->container['total_quantity'];
    }

    /**
     * Sets total_quantity
     *
     * @param double $total_quantity The total quantity of the credit note
     *
     * @return $this
     */
    public function setTotalQuantity($total_quantity)
    {
        $this->container['total_quantity'] = $total_quantity;

        return $this;
    }

    /**
     * Gets shipping_total_amount
     *
     * @return double
     */
    public function getShippingTotalAmount()
    {
        return $this->container['shipping_total_amount'];
    }

    /**
     * Sets shipping_total_amount
     *
     * @param double $shipping_total_amount The total shipping amount
     *
     * @return $this
     */
    public function setShippingTotalAmount($shipping_total_amount)
    {
        $this->container['shipping_total_amount'] = $shipping_total_amount;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return double
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param double $net_amount The net amount of the credit note
     *
     * @return $this
     */
    public function setNetAmount($net_amount)
    {
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return double
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param double $tax_amount The tax amount of the credit note
     *
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount The total amount of the credit note
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets payments_allocations_total_amount
     *
     * @return double
     */
    public function getPaymentsAllocationsTotalAmount()
    {
        return $this->container['payments_allocations_total_amount'];
    }

    /**
     * Sets payments_allocations_total_amount
     *
     * @param double $payments_allocations_total_amount The total amount of all payments and allocations
     *
     * @return $this
     */
    public function setPaymentsAllocationsTotalAmount($payments_allocations_total_amount)
    {
        $this->container['payments_allocations_total_amount'] = $payments_allocations_total_amount;

        return $this;
    }

    /**
     * Gets payments_allocations_total_discount
     *
     * @return double
     */
    public function getPaymentsAllocationsTotalDiscount()
    {
        return $this->container['payments_allocations_total_discount'];
    }

    /**
     * Sets payments_allocations_total_discount
     *
     * @param double $payments_allocations_total_discount The total discount of all payments and allocations
     *
     * @return $this
     */
    public function setPaymentsAllocationsTotalDiscount($payments_allocations_total_discount)
    {
        $this->container['payments_allocations_total_discount'] = $payments_allocations_total_discount;

        return $this;
    }

    /**
     * Gets total_paid
     *
     * @return double
     */
    public function getTotalPaid()
    {
        return $this->container['total_paid'];
    }

    /**
     * Sets total_paid
     *
     * @param double $total_paid The total paid amount of the credit note including any payments, allocations and discounts
     *
     * @return $this
     */
    public function setTotalPaid($total_paid)
    {
        $this->container['total_paid'] = $total_paid;

        return $this;
    }

    /**
     * Gets outstanding_amount
     *
     * @return double
     */
    public function getOutstandingAmount()
    {
        return $this->container['outstanding_amount'];
    }

    /**
     * Sets outstanding_amount
     *
     * @param double $outstanding_amount The outstanding amount of the credit note
     *
     * @return $this
     */
    public function setOutstandingAmount($outstanding_amount)
    {
        $this->container['outstanding_amount'] = $outstanding_amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Swagger\Client\Model\Base $currency The currency for the credit note
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return double
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param double $exchange_rate The exchange rate for the credit note
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets inverse_exchange_rate
     *
     * @return double
     */
    public function getInverseExchangeRate()
    {
        return $this->container['inverse_exchange_rate'];
    }

    /**
     * Sets inverse_exchange_rate
     *
     * @param double $inverse_exchange_rate The inverse exchange rate for the credit note
     *
     * @return $this
     */
    public function setInverseExchangeRate($inverse_exchange_rate)
    {
        $this->container['inverse_exchange_rate'] = $inverse_exchange_rate;

        return $this;
    }

    /**
     * Gets base_currency_shipping_net_amount
     *
     * @return double
     */
    public function getBaseCurrencyShippingNetAmount()
    {
        return $this->container['base_currency_shipping_net_amount'];
    }

    /**
     * Sets base_currency_shipping_net_amount
     *
     * @param double $base_currency_shipping_net_amount The net shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingNetAmount($base_currency_shipping_net_amount)
    {
        $this->container['base_currency_shipping_net_amount'] = $base_currency_shipping_net_amount;

        return $this;
    }

    /**
     * Gets base_currency_shipping_tax_amount
     *
     * @return double
     */
    public function getBaseCurrencyShippingTaxAmount()
    {
        return $this->container['base_currency_shipping_tax_amount'];
    }

    /**
     * Sets base_currency_shipping_tax_amount
     *
     * @param double $base_currency_shipping_tax_amount The tax shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingTaxAmount($base_currency_shipping_tax_amount)
    {
        $this->container['base_currency_shipping_tax_amount'] = $base_currency_shipping_tax_amount;

        return $this;
    }

    /**
     * Gets base_currency_shipping_tax_breakdown
     *
     * @return \Swagger\Client\Model\TaxBreakdown[]
     */
    public function getBaseCurrencyShippingTaxBreakdown()
    {
        return $this->container['base_currency_shipping_tax_breakdown'];
    }

    /**
     * Sets base_currency_shipping_tax_breakdown
     *
     * @param \Swagger\Client\Model\TaxBreakdown[] $base_currency_shipping_tax_breakdown The shipping tax breakdown for the credit note in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingTaxBreakdown($base_currency_shipping_tax_breakdown)
    {
        $this->container['base_currency_shipping_tax_breakdown'] = $base_currency_shipping_tax_breakdown;

        return $this;
    }

    /**
     * Gets base_currency_shipping_total_amount
     *
     * @return double
     */
    public function getBaseCurrencyShippingTotalAmount()
    {
        return $this->container['base_currency_shipping_total_amount'];
    }

    /**
     * Sets base_currency_shipping_total_amount
     *
     * @param double $base_currency_shipping_total_amount The total shipping amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyShippingTotalAmount($base_currency_shipping_total_amount)
    {
        $this->container['base_currency_shipping_total_amount'] = $base_currency_shipping_total_amount;

        return $this;
    }

    /**
     * Gets total_discount_amount
     *
     * @return double
     */
    public function getTotalDiscountAmount()
    {
        return $this->container['total_discount_amount'];
    }

    /**
     * Sets total_discount_amount
     *
     * @param double $total_discount_amount The discount amount on the credit note
     *
     * @return $this
     */
    public function setTotalDiscountAmount($total_discount_amount)
    {
        $this->container['total_discount_amount'] = $total_discount_amount;

        return $this;
    }

    /**
     * Gets base_currency_total_discount_amount
     *
     * @return double
     */
    public function getBaseCurrencyTotalDiscountAmount()
    {
        return $this->container['base_currency_total_discount_amount'];
    }

    /**
     * Sets base_currency_total_discount_amount
     *
     * @param double $base_currency_total_discount_amount The discount amount on the credit note in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTotalDiscountAmount($base_currency_total_discount_amount)
    {
        $this->container['base_currency_total_discount_amount'] = $base_currency_total_discount_amount;

        return $this;
    }

    /**
     * Gets base_currency_net_amount
     *
     * @return double
     */
    public function getBaseCurrencyNetAmount()
    {
        return $this->container['base_currency_net_amount'];
    }

    /**
     * Sets base_currency_net_amount
     *
     * @param double $base_currency_net_amount The net amount of the credit note in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyNetAmount($base_currency_net_amount)
    {
        $this->container['base_currency_net_amount'] = $base_currency_net_amount;

        return $this;
    }

    /**
     * Gets base_currency_tax_amount
     *
     * @return double
     */
    public function getBaseCurrencyTaxAmount()
    {
        return $this->container['base_currency_tax_amount'];
    }

    /**
     * Sets base_currency_tax_amount
     *
     * @param double $base_currency_tax_amount The tax amount of the credit note in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTaxAmount($base_currency_tax_amount)
    {
        $this->container['base_currency_tax_amount'] = $base_currency_tax_amount;

        return $this;
    }

    /**
     * Gets base_currency_total_amount
     *
     * @return double
     */
    public function getBaseCurrencyTotalAmount()
    {
        return $this->container['base_currency_total_amount'];
    }

    /**
     * Sets base_currency_total_amount
     *
     * @param double $base_currency_total_amount The total amount of the credit note in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyTotalAmount($base_currency_total_amount)
    {
        $this->container['base_currency_total_amount'] = $base_currency_total_amount;

        return $this;
    }

    /**
     * Gets base_currency_outstanding_amount
     *
     * @return double
     */
    public function getBaseCurrencyOutstandingAmount()
    {
        return $this->container['base_currency_outstanding_amount'];
    }

    /**
     * Sets base_currency_outstanding_amount
     *
     * @param double $base_currency_outstanding_amount The outstanding amount of the credit note in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyOutstandingAmount($base_currency_outstanding_amount)
    {
        $this->container['base_currency_outstanding_amount'] = $base_currency_outstanding_amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\Base $status The status of the credit note
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return bool
     */
    public function getSent()
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param bool $sent Indicates whether the credit note has been sent
     *
     * @return $this
     */
    public function setSent($sent)
    {
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets sent_by_email
     *
     * @return bool
     */
    public function getSentByEmail()
    {
        return $this->container['sent_by_email'];
    }

    /**
     * Sets sent_by_email
     *
     * @param bool $sent_by_email Indicates whether the credit note has been emailed
     *
     * @return $this
     */
    public function setSentByEmail($sent_by_email)
    {
        $this->container['sent_by_email'] = $sent_by_email;

        return $this;
    }

    /**
     * Gets void_reason
     *
     * @return string
     */
    public function getVoidReason()
    {
        return $this->container['void_reason'];
    }

    /**
     * Sets void_reason
     *
     * @param string $void_reason The reason the credit note was voided
     *
     * @return $this
     */
    public function setVoidReason($void_reason)
    {
        if (!is_null($void_reason) && (mb_strlen($void_reason) > 200)) {
            throw new \InvalidArgumentException('invalid length for $void_reason when calling SalesCreditNote., must be smaller than or equal to 200.');
        }

        $this->container['void_reason'] = $void_reason;

        return $this;
    }

    /**
     * Gets credit_note_lines
     *
     * @return \Swagger\Client\Model\SalesCreditNoteLineItem[]
     */
    public function getCreditNoteLines()
    {
        return $this->container['credit_note_lines'];
    }

    /**
     * Sets credit_note_lines
     *
     * @param \Swagger\Client\Model\SalesCreditNoteLineItem[] $credit_note_lines The credit note lines of the credit note
     *
     * @return $this
     */
    public function setCreditNoteLines($credit_note_lines)
    {
        $this->container['credit_note_lines'] = $credit_note_lines;

        return $this;
    }

    /**
     * Gets tax_analysis
     *
     * @return \Swagger\Client\Model\ArtefactTaxAnalysis[]
     */
    public function getTaxAnalysis()
    {
        return $this->container['tax_analysis'];
    }

    /**
     * Sets tax_analysis
     *
     * @param \Swagger\Client\Model\ArtefactTaxAnalysis[] $tax_analysis The credit note tax analysis
     *
     * @return $this
     */
    public function setTaxAnalysis($tax_analysis)
    {
        $this->container['tax_analysis'] = $tax_analysis;

        return $this;
    }

    /**
     * Gets detailed_tax_analysis
     *
     * @return \Swagger\Client\Model\ArtefactDetailedTaxAnalysis
     */
    public function getDetailedTaxAnalysis()
    {
        return $this->container['detailed_tax_analysis'];
    }

    /**
     * Sets detailed_tax_analysis
     *
     * @param \Swagger\Client\Model\ArtefactDetailedTaxAnalysis $detailed_tax_analysis detailed_tax_analysis
     *
     * @return $this
     */
    public function setDetailedTaxAnalysis($detailed_tax_analysis)
    {
        $this->container['detailed_tax_analysis'] = $detailed_tax_analysis;

        return $this;
    }

    /**
     * Gets payments_allocations
     *
     * @return \Swagger\Client\Model\PaymentAllocation[]
     */
    public function getPaymentsAllocations()
    {
        return $this->container['payments_allocations'];
    }

    /**
     * Sets payments_allocations
     *
     * @param \Swagger\Client\Model\PaymentAllocation[] $payments_allocations The associated payments and allocations
     *
     * @return $this
     */
    public function setPaymentsAllocations($payments_allocations)
    {
        $this->container['payments_allocations'] = $payments_allocations;

        return $this;
    }

    /**
     * Gets last_paid
     *
     * @return \DateTime
     */
    public function getLastPaid()
    {
        return $this->container['last_paid'];
    }

    /**
     * Sets last_paid
     *
     * @param \DateTime $last_paid The date of the last payment
     *
     * @return $this
     */
    public function setLastPaid($last_paid)
    {
        $this->container['last_paid'] = $last_paid;

        return $this;
    }

    /**
     * Gets tax_address_region
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getTaxAddressRegion()
    {
        return $this->container['tax_address_region'];
    }

    /**
     * Sets tax_address_region
     *
     * @param \Swagger\Client\Model\Base $tax_address_region The address region for tax purposes (Canada only)
     *
     * @return $this
     */
    public function setTaxAddressRegion($tax_address_region)
    {
        $this->container['tax_address_region'] = $tax_address_region;

        return $this;
    }

    /**
     * Gets tax_reconciled
     *
     * @return bool
     */
    public function getTaxReconciled()
    {
        return $this->container['tax_reconciled'];
    }

    /**
     * Sets tax_reconciled
     *
     * @param bool $tax_reconciled Indicates if the sales credit note is tax reconciled or not.
     *
     * @return $this
     */
    public function setTaxReconciled($tax_reconciled)
    {
        $this->container['tax_reconciled'] = $tax_reconciled;

        return $this;
    }

    /**
     * Gets migrated
     *
     * @return bool
     */
    public function getMigrated()
    {
        return $this->container['migrated'];
    }

    /**
     * Sets migrated
     *
     * @param bool $migrated Indicates if the sales credit note was migrated from another system.
     *
     * @return $this
     */
    public function setMigrated($migrated)
    {
        $this->container['migrated'] = $migrated;

        return $this;
    }

    /**
     * Gets withholding_tax_rate
     *
     * @return double
     */
    public function getWithholdingTaxRate()
    {
        return $this->container['withholding_tax_rate'];
    }

    /**
     * Sets withholding_tax_rate
     *
     * @param double $withholding_tax_rate The withheld Tax Rate - only applicable in UK (CIS subcontractor tax rate)
     *
     * @return $this
     */
    public function setWithholdingTaxRate($withholding_tax_rate)
    {
        $this->container['withholding_tax_rate'] = $withholding_tax_rate;

        return $this;
    }

    /**
     * Gets withholding_tax_amount
     *
     * @return double
     */
    public function getWithholdingTaxAmount()
    {
        return $this->container['withholding_tax_amount'];
    }

    /**
     * Sets withholding_tax_amount
     *
     * @param double $withholding_tax_amount The withheld Tax Amount - only applicable in UK (CIS subcontractor tax)
     *
     * @return $this
     */
    public function setWithholdingTaxAmount($withholding_tax_amount)
    {
        $this->container['withholding_tax_amount'] = $withholding_tax_amount;

        return $this;
    }

    /**
     * Gets base_currency_withholding_tax_amount
     *
     * @return double
     */
    public function getBaseCurrencyWithholdingTaxAmount()
    {
        return $this->container['base_currency_withholding_tax_amount'];
    }

    /**
     * Sets base_currency_withholding_tax_amount
     *
     * @param double $base_currency_withholding_tax_amount The withheld Tax Amount in the base currency - only applicable in UK (CIS subcontractor tax)
     *
     * @return $this
     */
    public function setBaseCurrencyWithholdingTaxAmount($base_currency_withholding_tax_amount)
    {
        $this->container['base_currency_withholding_tax_amount'] = $base_currency_withholding_tax_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


