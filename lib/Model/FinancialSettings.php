<?php
/**
 * FinancialSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FinancialSettings Class Doc Comment
 *
 * @category Class
 * @description ### Endpoint Availability  * Accounting Plus: ğŸ‡¨ğŸ‡¦, ğŸ‡ªğŸ‡¸, ğŸ‡«ğŸ‡·, ğŸ‡¬ğŸ‡§, ğŸ‡®ğŸ‡ª, ğŸ‡ºğŸ‡¸ * Accounting Standard: ğŸ‡¬ğŸ‡§, ğŸ‡®ğŸ‡ª * Accounting Start: ğŸ‡¨ğŸ‡¦, ğŸ‡ªğŸ‡¸, ğŸ‡«ğŸ‡·, ğŸ‡¬ğŸ‡§, ğŸ‡®ğŸ‡ª, ğŸ‡ºğŸ‡¸  ### Access Control Restrictions  Requires the authenticated user to have any mentioned role in one of the listed areas: * Area: &#x60;Settings&#x60;: Full Access
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FinancialSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FinancialSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'path' => 'string',
        'year_end_date' => '\DateTime',
        'year_end_lockdown_date' => '\DateTime',
        'accounting_type' => 'string',
        'accounts_start_date' => '\DateTime',
        'base_currency' => '\Swagger\Client\Model\Base',
        'multi_currency_enabled' => 'bool',
        'use_live_exchange_rates' => 'bool',
        'mtd_activation_status' => 'string',
        'mtd_connected' => 'bool',
        'mtd_authenticated_date' => '\DateTime',
        'tax_scheme' => '\Swagger\Client\Model\TaxScheme',
        'tax_return_frequency' => '\Swagger\Client\Model\Base',
        'tax_number' => 'string',
        'general_tax_number' => 'string',
        'tax_office' => '\Swagger\Client\Model\Base',
        'default_irpf_rate' => 'double',
        'flat_rate_tax_percentage' => 'double',
        'recoverable_percentage' => 'double',
        'sales_tax_calculation' => 'string',
        'purchase_tax_calculation' => 'string',
        'updated_at' => '\DateTime',
        'postponed_accounting' => 'bool',
        'destination_vat' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'path' => null,
        'year_end_date' => 'date',
        'year_end_lockdown_date' => 'date',
        'accounting_type' => null,
        'accounts_start_date' => 'date',
        'base_currency' => null,
        'multi_currency_enabled' => null,
        'use_live_exchange_rates' => null,
        'mtd_activation_status' => null,
        'mtd_connected' => null,
        'mtd_authenticated_date' => 'date',
        'tax_scheme' => null,
        'tax_return_frequency' => null,
        'tax_number' => null,
        'general_tax_number' => null,
        'tax_office' => null,
        'default_irpf_rate' => 'double',
        'flat_rate_tax_percentage' => 'double',
        'recoverable_percentage' => 'double',
        'sales_tax_calculation' => null,
        'purchase_tax_calculation' => null,
        'updated_at' => 'date-time',
        'postponed_accounting' => null,
        'destination_vat' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => '$path',
        'year_end_date' => 'year_end_date',
        'year_end_lockdown_date' => 'year_end_lockdown_date',
        'accounting_type' => 'accounting_type',
        'accounts_start_date' => 'accounts_start_date',
        'base_currency' => 'base_currency',
        'multi_currency_enabled' => 'multi_currency_enabled',
        'use_live_exchange_rates' => 'use_live_exchange_rates',
        'mtd_activation_status' => 'mtd_activation_status',
        'mtd_connected' => 'mtd_connected',
        'mtd_authenticated_date' => 'mtd_authenticated_date',
        'tax_scheme' => 'tax_scheme',
        'tax_return_frequency' => 'tax_return_frequency',
        'tax_number' => 'tax_number',
        'general_tax_number' => 'general_tax_number',
        'tax_office' => 'tax_office',
        'default_irpf_rate' => 'default_irpf_rate',
        'flat_rate_tax_percentage' => 'flat_rate_tax_percentage',
        'recoverable_percentage' => 'recoverable_percentage',
        'sales_tax_calculation' => 'sales_tax_calculation',
        'purchase_tax_calculation' => 'purchase_tax_calculation',
        'updated_at' => 'updated_at',
        'postponed_accounting' => 'postponed_accounting',
        'destination_vat' => 'destination_vat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'year_end_date' => 'setYearEndDate',
        'year_end_lockdown_date' => 'setYearEndLockdownDate',
        'accounting_type' => 'setAccountingType',
        'accounts_start_date' => 'setAccountsStartDate',
        'base_currency' => 'setBaseCurrency',
        'multi_currency_enabled' => 'setMultiCurrencyEnabled',
        'use_live_exchange_rates' => 'setUseLiveExchangeRates',
        'mtd_activation_status' => 'setMtdActivationStatus',
        'mtd_connected' => 'setMtdConnected',
        'mtd_authenticated_date' => 'setMtdAuthenticatedDate',
        'tax_scheme' => 'setTaxScheme',
        'tax_return_frequency' => 'setTaxReturnFrequency',
        'tax_number' => 'setTaxNumber',
        'general_tax_number' => 'setGeneralTaxNumber',
        'tax_office' => 'setTaxOffice',
        'default_irpf_rate' => 'setDefaultIrpfRate',
        'flat_rate_tax_percentage' => 'setFlatRateTaxPercentage',
        'recoverable_percentage' => 'setRecoverablePercentage',
        'sales_tax_calculation' => 'setSalesTaxCalculation',
        'purchase_tax_calculation' => 'setPurchaseTaxCalculation',
        'updated_at' => 'setUpdatedAt',
        'postponed_accounting' => 'setPostponedAccounting',
        'destination_vat' => 'setDestinationVat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'year_end_date' => 'getYearEndDate',
        'year_end_lockdown_date' => 'getYearEndLockdownDate',
        'accounting_type' => 'getAccountingType',
        'accounts_start_date' => 'getAccountsStartDate',
        'base_currency' => 'getBaseCurrency',
        'multi_currency_enabled' => 'getMultiCurrencyEnabled',
        'use_live_exchange_rates' => 'getUseLiveExchangeRates',
        'mtd_activation_status' => 'getMtdActivationStatus',
        'mtd_connected' => 'getMtdConnected',
        'mtd_authenticated_date' => 'getMtdAuthenticatedDate',
        'tax_scheme' => 'getTaxScheme',
        'tax_return_frequency' => 'getTaxReturnFrequency',
        'tax_number' => 'getTaxNumber',
        'general_tax_number' => 'getGeneralTaxNumber',
        'tax_office' => 'getTaxOffice',
        'default_irpf_rate' => 'getDefaultIrpfRate',
        'flat_rate_tax_percentage' => 'getFlatRateTaxPercentage',
        'recoverable_percentage' => 'getRecoverablePercentage',
        'sales_tax_calculation' => 'getSalesTaxCalculation',
        'purchase_tax_calculation' => 'getPurchaseTaxCalculation',
        'updated_at' => 'getUpdatedAt',
        'postponed_accounting' => 'getPostponedAccounting',
        'destination_vat' => 'getDestinationVat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['year_end_date'] = isset($data['year_end_date']) ? $data['year_end_date'] : null;
        $this->container['year_end_lockdown_date'] = isset($data['year_end_lockdown_date']) ? $data['year_end_lockdown_date'] : null;
        $this->container['accounting_type'] = isset($data['accounting_type']) ? $data['accounting_type'] : null;
        $this->container['accounts_start_date'] = isset($data['accounts_start_date']) ? $data['accounts_start_date'] : null;
        $this->container['base_currency'] = isset($data['base_currency']) ? $data['base_currency'] : null;
        $this->container['multi_currency_enabled'] = isset($data['multi_currency_enabled']) ? $data['multi_currency_enabled'] : null;
        $this->container['use_live_exchange_rates'] = isset($data['use_live_exchange_rates']) ? $data['use_live_exchange_rates'] : null;
        $this->container['mtd_activation_status'] = isset($data['mtd_activation_status']) ? $data['mtd_activation_status'] : null;
        $this->container['mtd_connected'] = isset($data['mtd_connected']) ? $data['mtd_connected'] : null;
        $this->container['mtd_authenticated_date'] = isset($data['mtd_authenticated_date']) ? $data['mtd_authenticated_date'] : null;
        $this->container['tax_scheme'] = isset($data['tax_scheme']) ? $data['tax_scheme'] : null;
        $this->container['tax_return_frequency'] = isset($data['tax_return_frequency']) ? $data['tax_return_frequency'] : null;
        $this->container['tax_number'] = isset($data['tax_number']) ? $data['tax_number'] : null;
        $this->container['general_tax_number'] = isset($data['general_tax_number']) ? $data['general_tax_number'] : null;
        $this->container['tax_office'] = isset($data['tax_office']) ? $data['tax_office'] : null;
        $this->container['default_irpf_rate'] = isset($data['default_irpf_rate']) ? $data['default_irpf_rate'] : null;
        $this->container['flat_rate_tax_percentage'] = isset($data['flat_rate_tax_percentage']) ? $data['flat_rate_tax_percentage'] : null;
        $this->container['recoverable_percentage'] = isset($data['recoverable_percentage']) ? $data['recoverable_percentage'] : null;
        $this->container['sales_tax_calculation'] = isset($data['sales_tax_calculation']) ? $data['sales_tax_calculation'] : null;
        $this->container['purchase_tax_calculation'] = isset($data['purchase_tax_calculation']) ? $data['purchase_tax_calculation'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['postponed_accounting'] = isset($data['postponed_accounting']) ? $data['postponed_accounting'] : null;
        $this->container['destination_vat'] = isset($data['destination_vat']) ? $data['destination_vat'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['accounting_type']) && (mb_strlen($this->container['accounting_type']) > 255)) {
            $invalidProperties[] = "invalid value for 'accounting_type', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['tax_number']) && (mb_strlen($this->container['tax_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'tax_number', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The api path for this item
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets year_end_date
     *
     * @return \DateTime
     */
    public function getYearEndDate()
    {
        return $this->container['year_end_date'];
    }

    /**
     * Sets year_end_date
     *
     * @param \DateTime $year_end_date The financial year end date of the business
     *
     * @return $this
     */
    public function setYearEndDate($year_end_date)
    {
        $this->container['year_end_date'] = $year_end_date;

        return $this;
    }

    /**
     * Gets year_end_lockdown_date
     *
     * @return \DateTime
     */
    public function getYearEndLockdownDate()
    {
        return $this->container['year_end_lockdown_date'];
    }

    /**
     * Sets year_end_lockdown_date
     *
     * @param \DateTime $year_end_lockdown_date The year end lockdown date of the business
     *
     * @return $this
     */
    public function setYearEndLockdownDate($year_end_lockdown_date)
    {
        $this->container['year_end_lockdown_date'] = $year_end_lockdown_date;

        return $this;
    }

    /**
     * Gets accounting_type
     *
     * @return string
     */
    public function getAccountingType()
    {
        return $this->container['accounting_type'];
    }

    /**
     * Sets accounting_type
     *
     * @param string $accounting_type Indicates the accounting type of a business, it can be accrual or cash based
     *
     * @return $this
     */
    public function setAccountingType($accounting_type)
    {
        if (!is_null($accounting_type) && (mb_strlen($accounting_type) > 255)) {
            throw new \InvalidArgumentException('invalid length for $accounting_type when calling FinancialSettings., must be smaller than or equal to 255.');
        }

        $this->container['accounting_type'] = $accounting_type;

        return $this;
    }

    /**
     * Gets accounts_start_date
     *
     * @return \DateTime
     */
    public function getAccountsStartDate()
    {
        return $this->container['accounts_start_date'];
    }

    /**
     * Sets accounts_start_date
     *
     * @param \DateTime $accounts_start_date The accounts start date of the business
     *
     * @return $this
     */
    public function setAccountsStartDate($accounts_start_date)
    {
        $this->container['accounts_start_date'] = $accounts_start_date;

        return $this;
    }

    /**
     * Gets base_currency
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getBaseCurrency()
    {
        return $this->container['base_currency'];
    }

    /**
     * Sets base_currency
     *
     * @param \Swagger\Client\Model\Base $base_currency The base currency of the business
     *
     * @return $this
     */
    public function setBaseCurrency($base_currency)
    {
        $this->container['base_currency'] = $base_currency;

        return $this;
    }

    /**
     * Gets multi_currency_enabled
     *
     * @return bool
     */
    public function getMultiCurrencyEnabled()
    {
        return $this->container['multi_currency_enabled'];
    }

    /**
     * Sets multi_currency_enabled
     *
     * @param bool $multi_currency_enabled Indicates whether multi-currency is enabled for the business
     *
     * @return $this
     */
    public function setMultiCurrencyEnabled($multi_currency_enabled)
    {
        $this->container['multi_currency_enabled'] = $multi_currency_enabled;

        return $this;
    }

    /**
     * Gets use_live_exchange_rates
     *
     * @return bool
     */
    public function getUseLiveExchangeRates()
    {
        return $this->container['use_live_exchange_rates'];
    }

    /**
     * Sets use_live_exchange_rates
     *
     * @param bool $use_live_exchange_rates Indicates whether to use live or business defined exchange rates
     *
     * @return $this
     */
    public function setUseLiveExchangeRates($use_live_exchange_rates)
    {
        $this->container['use_live_exchange_rates'] = $use_live_exchange_rates;

        return $this;
    }

    /**
     * Gets mtd_activation_status
     *
     * @return string
     */
    public function getMtdActivationStatus()
    {
        return $this->container['mtd_activation_status'];
    }

    /**
     * Sets mtd_activation_status
     *
     * @param string $mtd_activation_status Indicates the UK Making Tax Digital for VAT activation status
     *
     * @return $this
     */
    public function setMtdActivationStatus($mtd_activation_status)
    {
        $this->container['mtd_activation_status'] = $mtd_activation_status;

        return $this;
    }

    /**
     * Gets mtd_connected
     *
     * @return bool
     */
    public function getMtdConnected()
    {
        return $this->container['mtd_connected'];
    }

    /**
     * Sets mtd_connected
     *
     * @param bool $mtd_connected Indicates whether UK Making Tax Digital for VAT is currently connected
     *
     * @return $this
     */
    public function setMtdConnected($mtd_connected)
    {
        $this->container['mtd_connected'] = $mtd_connected;

        return $this;
    }

    /**
     * Gets mtd_authenticated_date
     *
     * @return \DateTime
     */
    public function getMtdAuthenticatedDate()
    {
        return $this->container['mtd_authenticated_date'];
    }

    /**
     * Sets mtd_authenticated_date
     *
     * @param \DateTime $mtd_authenticated_date Indicates when a UK business enabled UK Making Tax Digital for VAT, nil if not enabled or non-uk
     *
     * @return $this
     */
    public function setMtdAuthenticatedDate($mtd_authenticated_date)
    {
        $this->container['mtd_authenticated_date'] = $mtd_authenticated_date;

        return $this;
    }

    /**
     * Gets tax_scheme
     *
     * @return \Swagger\Client\Model\TaxScheme
     */
    public function getTaxScheme()
    {
        return $this->container['tax_scheme'];
    }

    /**
     * Sets tax_scheme
     *
     * @param \Swagger\Client\Model\TaxScheme $tax_scheme The tax scheme of the business
     *
     * @return $this
     */
    public function setTaxScheme($tax_scheme)
    {
        $this->container['tax_scheme'] = $tax_scheme;

        return $this;
    }

    /**
     * Gets tax_return_frequency
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getTaxReturnFrequency()
    {
        return $this->container['tax_return_frequency'];
    }

    /**
     * Sets tax_return_frequency
     *
     * @param \Swagger\Client\Model\Base $tax_return_frequency The tax return frequency
     *
     * @return $this
     */
    public function setTaxReturnFrequency($tax_return_frequency)
    {
        $this->container['tax_return_frequency'] = $tax_return_frequency;

        return $this;
    }

    /**
     * Gets tax_number
     *
     * @return string
     */
    public function getTaxNumber()
    {
        return $this->container['tax_number'];
    }

    /**
     * Sets tax_number
     *
     * @param string $tax_number The tax number
     *
     * @return $this
     */
    public function setTaxNumber($tax_number)
    {
        if (!is_null($tax_number) && (mb_strlen($tax_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $tax_number when calling FinancialSettings., must be smaller than or equal to 255.');
        }

        $this->container['tax_number'] = $tax_number;

        return $this;
    }

    /**
     * Gets general_tax_number
     *
     * @return string
     */
    public function getGeneralTaxNumber()
    {
        return $this->container['general_tax_number'];
    }

    /**
     * Sets general_tax_number
     *
     * @param string $general_tax_number The number for various tax report submissions
     *
     * @return $this
     */
    public function setGeneralTaxNumber($general_tax_number)
    {
        $this->container['general_tax_number'] = $general_tax_number;

        return $this;
    }

    /**
     * Gets tax_office
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getTaxOffice()
    {
        return $this->container['tax_office'];
    }

    /**
     * Sets tax_office
     *
     * @param \Swagger\Client\Model\Base $tax_office The tax office details
     *
     * @return $this
     */
    public function setTaxOffice($tax_office)
    {
        $this->container['tax_office'] = $tax_office;

        return $this;
    }

    /**
     * Gets default_irpf_rate
     *
     * @return double
     */
    public function getDefaultIrpfRate()
    {
        return $this->container['default_irpf_rate'];
    }

    /**
     * Sets default_irpf_rate
     *
     * @param double $default_irpf_rate The default IRPF rate
     *
     * @return $this
     */
    public function setDefaultIrpfRate($default_irpf_rate)
    {
        $this->container['default_irpf_rate'] = $default_irpf_rate;

        return $this;
    }

    /**
     * Gets flat_rate_tax_percentage
     *
     * @return double
     */
    public function getFlatRateTaxPercentage()
    {
        return $this->container['flat_rate_tax_percentage'];
    }

    /**
     * Sets flat_rate_tax_percentage
     *
     * @param double $flat_rate_tax_percentage The tax percentage that applies to flat rate tax schemes.
     *
     * @return $this
     */
    public function setFlatRateTaxPercentage($flat_rate_tax_percentage)
    {
        $this->container['flat_rate_tax_percentage'] = $flat_rate_tax_percentage;

        return $this;
    }

    /**
     * Gets recoverable_percentage
     *
     * @return double
     */
    public function getRecoverablePercentage()
    {
        return $this->container['recoverable_percentage'];
    }

    /**
     * Sets recoverable_percentage
     *
     * @param double $recoverable_percentage The partial recoverable tax rate (Canada only)
     *
     * @return $this
     */
    public function setRecoverablePercentage($recoverable_percentage)
    {
        $this->container['recoverable_percentage'] = $recoverable_percentage;

        return $this;
    }

    /**
     * Gets sales_tax_calculation
     *
     * @return string
     */
    public function getSalesTaxCalculation()
    {
        return $this->container['sales_tax_calculation'];
    }

    /**
     * Sets sales_tax_calculation
     *
     * @param string $sales_tax_calculation The method of collection for tax on sales. Allowed values - \"invoice\", \"cash\".
     *
     * @return $this
     */
    public function setSalesTaxCalculation($sales_tax_calculation)
    {
        $this->container['sales_tax_calculation'] = $sales_tax_calculation;

        return $this;
    }

    /**
     * Gets purchase_tax_calculation
     *
     * @return string
     */
    public function getPurchaseTaxCalculation()
    {
        return $this->container['purchase_tax_calculation'];
    }

    /**
     * Sets purchase_tax_calculation
     *
     * @param string $purchase_tax_calculation The method of collection for tax on purchases. Allowed values - \"invoice\", \"cash\".
     *
     * @return $this
     */
    public function setPurchaseTaxCalculation($purchase_tax_calculation)
    {
        $this->container['purchase_tax_calculation'] = $purchase_tax_calculation;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets postponed_accounting
     *
     * @return bool
     */
    public function getPostponedAccounting()
    {
        return $this->container['postponed_accounting'];
    }

    /**
     * Sets postponed_accounting
     *
     * @param bool $postponed_accounting Indicates whether to use postponed accounting or not
     *
     * @return $this
     */
    public function setPostponedAccounting($postponed_accounting)
    {
        $this->container['postponed_accounting'] = $postponed_accounting;

        return $this;
    }

    /**
     * Gets destination_vat
     *
     * @return bool
     */
    public function getDestinationVat()
    {
        return $this->container['destination_vat'];
    }

    /**
     * Sets destination_vat
     *
     * @param bool $destination_vat Indicates whether to use destination vat or not
     *
     * @return $this
     */
    public function setDestinationVat($destination_vat)
    {
        $this->container['destination_vat'] = $destination_vat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


