<?php
/**
 * PostBankReconciliationsBankReconciliation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PostBankReconciliationsBankReconciliation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostBankReconciliationsBankReconciliation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'postBankReconciliations_bank_reconciliation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bank_account_id' => 'string',
        'statement_date' => '\DateTime',
        'statement_end_balance' => 'double',
        'reference' => 'string',
        'total_received' => 'double',
        'total_paid' => 'double',
        'starting_balance' => 'double',
        'closing_balance' => 'double',
        'reconciled_balance' => 'double',
        'balance_difference' => 'double',
        'status_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bank_account_id' => null,
        'statement_date' => 'date',
        'statement_end_balance' => 'double',
        'reference' => null,
        'total_received' => 'double',
        'total_paid' => 'double',
        'starting_balance' => 'double',
        'closing_balance' => 'double',
        'reconciled_balance' => 'double',
        'balance_difference' => 'double',
        'status_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bank_account_id' => 'bank_account_id',
        'statement_date' => 'statement_date',
        'statement_end_balance' => 'statement_end_balance',
        'reference' => 'reference',
        'total_received' => 'total_received',
        'total_paid' => 'total_paid',
        'starting_balance' => 'starting_balance',
        'closing_balance' => 'closing_balance',
        'reconciled_balance' => 'reconciled_balance',
        'balance_difference' => 'balance_difference',
        'status_id' => 'status_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bank_account_id' => 'setBankAccountId',
        'statement_date' => 'setStatementDate',
        'statement_end_balance' => 'setStatementEndBalance',
        'reference' => 'setReference',
        'total_received' => 'setTotalReceived',
        'total_paid' => 'setTotalPaid',
        'starting_balance' => 'setStartingBalance',
        'closing_balance' => 'setClosingBalance',
        'reconciled_balance' => 'setReconciledBalance',
        'balance_difference' => 'setBalanceDifference',
        'status_id' => 'setStatusId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bank_account_id' => 'getBankAccountId',
        'statement_date' => 'getStatementDate',
        'statement_end_balance' => 'getStatementEndBalance',
        'reference' => 'getReference',
        'total_received' => 'getTotalReceived',
        'total_paid' => 'getTotalPaid',
        'starting_balance' => 'getStartingBalance',
        'closing_balance' => 'getClosingBalance',
        'reconciled_balance' => 'getReconciledBalance',
        'balance_difference' => 'getBalanceDifference',
        'status_id' => 'getStatusId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bank_account_id'] = isset($data['bank_account_id']) ? $data['bank_account_id'] : null;
        $this->container['statement_date'] = isset($data['statement_date']) ? $data['statement_date'] : null;
        $this->container['statement_end_balance'] = isset($data['statement_end_balance']) ? $data['statement_end_balance'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['total_received'] = isset($data['total_received']) ? $data['total_received'] : null;
        $this->container['total_paid'] = isset($data['total_paid']) ? $data['total_paid'] : null;
        $this->container['starting_balance'] = isset($data['starting_balance']) ? $data['starting_balance'] : null;
        $this->container['closing_balance'] = isset($data['closing_balance']) ? $data['closing_balance'] : null;
        $this->container['reconciled_balance'] = isset($data['reconciled_balance']) ? $data['reconciled_balance'] : null;
        $this->container['balance_difference'] = isset($data['balance_difference']) ? $data['balance_difference'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bank_account_id'] === null) {
            $invalidProperties[] = "'bank_account_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bank_account_id
     *
     * @return string
     */
    public function getBankAccountId()
    {
        return $this->container['bank_account_id'];
    }

    /**
     * Sets bank_account_id
     *
     * @param string $bank_account_id The bank account the reconciliation relates to
     *
     * @return $this
     */
    public function setBankAccountId($bank_account_id)
    {
        $this->container['bank_account_id'] = $bank_account_id;

        return $this;
    }

    /**
     * Gets statement_date
     *
     * @return \DateTime
     */
    public function getStatementDate()
    {
        return $this->container['statement_date'];
    }

    /**
     * Sets statement_date
     *
     * @param \DateTime $statement_date The date of the bank reconciliation
     *
     * @return $this
     */
    public function setStatementDate($statement_date)
    {
        $this->container['statement_date'] = $statement_date;

        return $this;
    }

    /**
     * Gets statement_end_balance
     *
     * @return double
     */
    public function getStatementEndBalance()
    {
        return $this->container['statement_end_balance'];
    }

    /**
     * Sets statement_end_balance
     *
     * @param double $statement_end_balance The statement end balance for the reconciliation
     *
     * @return $this
     */
    public function setStatementEndBalance($statement_end_balance)
    {
        $this->container['statement_end_balance'] = $statement_end_balance;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference A reference for the bank reconciliation
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets total_received
     *
     * @return double
     */
    public function getTotalReceived()
    {
        return $this->container['total_received'];
    }

    /**
     * Sets total_received
     *
     * @param double $total_received The total amount received
     *
     * @return $this
     */
    public function setTotalReceived($total_received)
    {
        $this->container['total_received'] = $total_received;

        return $this;
    }

    /**
     * Gets total_paid
     *
     * @return double
     */
    public function getTotalPaid()
    {
        return $this->container['total_paid'];
    }

    /**
     * Sets total_paid
     *
     * @param double $total_paid The total amount paid
     *
     * @return $this
     */
    public function setTotalPaid($total_paid)
    {
        $this->container['total_paid'] = $total_paid;

        return $this;
    }

    /**
     * Gets starting_balance
     *
     * @return double
     */
    public function getStartingBalance()
    {
        return $this->container['starting_balance'];
    }

    /**
     * Sets starting_balance
     *
     * @param double $starting_balance The starting balance of the bank reconciliation
     *
     * @return $this
     */
    public function setStartingBalance($starting_balance)
    {
        $this->container['starting_balance'] = $starting_balance;

        return $this;
    }

    /**
     * Gets closing_balance
     *
     * @return double
     */
    public function getClosingBalance()
    {
        return $this->container['closing_balance'];
    }

    /**
     * Sets closing_balance
     *
     * @param double $closing_balance The closing balance of the bank reconciliation
     *
     * @return $this
     */
    public function setClosingBalance($closing_balance)
    {
        $this->container['closing_balance'] = $closing_balance;

        return $this;
    }

    /**
     * Gets reconciled_balance
     *
     * @return double
     */
    public function getReconciledBalance()
    {
        return $this->container['reconciled_balance'];
    }

    /**
     * Sets reconciled_balance
     *
     * @param double $reconciled_balance The reconciled balance of the bank reconciliation
     *
     * @return $this
     */
    public function setReconciledBalance($reconciled_balance)
    {
        $this->container['reconciled_balance'] = $reconciled_balance;

        return $this;
    }

    /**
     * Gets balance_difference
     *
     * @return double
     */
    public function getBalanceDifference()
    {
        return $this->container['balance_difference'];
    }

    /**
     * Sets balance_difference
     *
     * @param double $balance_difference The difference between the statement end balance and the reconciled balance
     *
     * @return $this
     */
    public function setBalanceDifference($balance_difference)
    {
        $this->container['balance_difference'] = $balance_difference;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return string
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param string $status_id The ID of the Status.
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


