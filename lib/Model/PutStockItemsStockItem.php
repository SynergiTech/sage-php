<?php
/**
 * PutStockItemsStockItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PutStockItemsStockItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PutStockItemsStockItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'putStockItems_stock_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_code' => 'string',
        'description' => 'string',
        'sales_ledger_account_id' => 'string',
        'purchase_ledger_account_id' => 'string',
        'notes' => 'string',
        'sales_tax_rate_id' => 'string',
        'usual_supplier_id' => 'string',
        'purchase_tax_rate_id' => 'string',
        'cost_price' => 'double',
        'source_guid' => 'string',
        'purchase_description' => 'string',
        'reorder_level' => 'double',
        'reorder_quantity' => 'double',
        'location' => 'string',
        'barcode' => 'string',
        'supplier_part_number' => 'string',
        'weight' => 'double',
        'measurement_unit' => 'string',
        'weight_converted' => 'double',
        'active' => 'bool',
        'quantity_in_stock' => 'double',
        'last_cost_price' => 'double',
        'last_cost_price_stock_value' => 'double',
        'average_cost_price' => 'double',
        'average_cost_price_stock_value' => 'double',
        'cost_price_last_updated' => '\DateTime',
        'sales_prices' => '\Swagger\Client\Model\PostProductsProductSalesPrices[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_code' => null,
        'description' => null,
        'sales_ledger_account_id' => null,
        'purchase_ledger_account_id' => null,
        'notes' => null,
        'sales_tax_rate_id' => null,
        'usual_supplier_id' => null,
        'purchase_tax_rate_id' => null,
        'cost_price' => 'double',
        'source_guid' => null,
        'purchase_description' => null,
        'reorder_level' => 'double',
        'reorder_quantity' => 'double',
        'location' => null,
        'barcode' => null,
        'supplier_part_number' => null,
        'weight' => 'double',
        'measurement_unit' => null,
        'weight_converted' => 'double',
        'active' => null,
        'quantity_in_stock' => 'double',
        'last_cost_price' => 'double',
        'last_cost_price_stock_value' => 'double',
        'average_cost_price' => 'double',
        'average_cost_price_stock_value' => 'double',
        'cost_price_last_updated' => 'date',
        'sales_prices' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_code' => 'item_code',
        'description' => 'description',
        'sales_ledger_account_id' => 'sales_ledger_account_id',
        'purchase_ledger_account_id' => 'purchase_ledger_account_id',
        'notes' => 'notes',
        'sales_tax_rate_id' => 'sales_tax_rate_id',
        'usual_supplier_id' => 'usual_supplier_id',
        'purchase_tax_rate_id' => 'purchase_tax_rate_id',
        'cost_price' => 'cost_price',
        'source_guid' => 'source_guid',
        'purchase_description' => 'purchase_description',
        'reorder_level' => 'reorder_level',
        'reorder_quantity' => 'reorder_quantity',
        'location' => 'location',
        'barcode' => 'barcode',
        'supplier_part_number' => 'supplier_part_number',
        'weight' => 'weight',
        'measurement_unit' => 'measurement_unit',
        'weight_converted' => 'weight_converted',
        'active' => 'active',
        'quantity_in_stock' => 'quantity_in_stock',
        'last_cost_price' => 'last_cost_price',
        'last_cost_price_stock_value' => 'last_cost_price_stock_value',
        'average_cost_price' => 'average_cost_price',
        'average_cost_price_stock_value' => 'average_cost_price_stock_value',
        'cost_price_last_updated' => 'cost_price_last_updated',
        'sales_prices' => 'sales_prices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_code' => 'setItemCode',
        'description' => 'setDescription',
        'sales_ledger_account_id' => 'setSalesLedgerAccountId',
        'purchase_ledger_account_id' => 'setPurchaseLedgerAccountId',
        'notes' => 'setNotes',
        'sales_tax_rate_id' => 'setSalesTaxRateId',
        'usual_supplier_id' => 'setUsualSupplierId',
        'purchase_tax_rate_id' => 'setPurchaseTaxRateId',
        'cost_price' => 'setCostPrice',
        'source_guid' => 'setSourceGuid',
        'purchase_description' => 'setPurchaseDescription',
        'reorder_level' => 'setReorderLevel',
        'reorder_quantity' => 'setReorderQuantity',
        'location' => 'setLocation',
        'barcode' => 'setBarcode',
        'supplier_part_number' => 'setSupplierPartNumber',
        'weight' => 'setWeight',
        'measurement_unit' => 'setMeasurementUnit',
        'weight_converted' => 'setWeightConverted',
        'active' => 'setActive',
        'quantity_in_stock' => 'setQuantityInStock',
        'last_cost_price' => 'setLastCostPrice',
        'last_cost_price_stock_value' => 'setLastCostPriceStockValue',
        'average_cost_price' => 'setAverageCostPrice',
        'average_cost_price_stock_value' => 'setAverageCostPriceStockValue',
        'cost_price_last_updated' => 'setCostPriceLastUpdated',
        'sales_prices' => 'setSalesPrices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_code' => 'getItemCode',
        'description' => 'getDescription',
        'sales_ledger_account_id' => 'getSalesLedgerAccountId',
        'purchase_ledger_account_id' => 'getPurchaseLedgerAccountId',
        'notes' => 'getNotes',
        'sales_tax_rate_id' => 'getSalesTaxRateId',
        'usual_supplier_id' => 'getUsualSupplierId',
        'purchase_tax_rate_id' => 'getPurchaseTaxRateId',
        'cost_price' => 'getCostPrice',
        'source_guid' => 'getSourceGuid',
        'purchase_description' => 'getPurchaseDescription',
        'reorder_level' => 'getReorderLevel',
        'reorder_quantity' => 'getReorderQuantity',
        'location' => 'getLocation',
        'barcode' => 'getBarcode',
        'supplier_part_number' => 'getSupplierPartNumber',
        'weight' => 'getWeight',
        'measurement_unit' => 'getMeasurementUnit',
        'weight_converted' => 'getWeightConverted',
        'active' => 'getActive',
        'quantity_in_stock' => 'getQuantityInStock',
        'last_cost_price' => 'getLastCostPrice',
        'last_cost_price_stock_value' => 'getLastCostPriceStockValue',
        'average_cost_price' => 'getAverageCostPrice',
        'average_cost_price_stock_value' => 'getAverageCostPriceStockValue',
        'cost_price_last_updated' => 'getCostPriceLastUpdated',
        'sales_prices' => 'getSalesPrices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_code'] = isset($data['item_code']) ? $data['item_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['sales_ledger_account_id'] = isset($data['sales_ledger_account_id']) ? $data['sales_ledger_account_id'] : null;
        $this->container['purchase_ledger_account_id'] = isset($data['purchase_ledger_account_id']) ? $data['purchase_ledger_account_id'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['sales_tax_rate_id'] = isset($data['sales_tax_rate_id']) ? $data['sales_tax_rate_id'] : null;
        $this->container['usual_supplier_id'] = isset($data['usual_supplier_id']) ? $data['usual_supplier_id'] : null;
        $this->container['purchase_tax_rate_id'] = isset($data['purchase_tax_rate_id']) ? $data['purchase_tax_rate_id'] : null;
        $this->container['cost_price'] = isset($data['cost_price']) ? $data['cost_price'] : null;
        $this->container['source_guid'] = isset($data['source_guid']) ? $data['source_guid'] : null;
        $this->container['purchase_description'] = isset($data['purchase_description']) ? $data['purchase_description'] : null;
        $this->container['reorder_level'] = isset($data['reorder_level']) ? $data['reorder_level'] : null;
        $this->container['reorder_quantity'] = isset($data['reorder_quantity']) ? $data['reorder_quantity'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['supplier_part_number'] = isset($data['supplier_part_number']) ? $data['supplier_part_number'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['measurement_unit'] = isset($data['measurement_unit']) ? $data['measurement_unit'] : null;
        $this->container['weight_converted'] = isset($data['weight_converted']) ? $data['weight_converted'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['quantity_in_stock'] = isset($data['quantity_in_stock']) ? $data['quantity_in_stock'] : null;
        $this->container['last_cost_price'] = isset($data['last_cost_price']) ? $data['last_cost_price'] : null;
        $this->container['last_cost_price_stock_value'] = isset($data['last_cost_price_stock_value']) ? $data['last_cost_price_stock_value'] : null;
        $this->container['average_cost_price'] = isset($data['average_cost_price']) ? $data['average_cost_price'] : null;
        $this->container['average_cost_price_stock_value'] = isset($data['average_cost_price_stock_value']) ? $data['average_cost_price_stock_value'] : null;
        $this->container['cost_price_last_updated'] = isset($data['cost_price_last_updated']) ? $data['cost_price_last_updated'] : null;
        $this->container['sales_prices'] = isset($data['sales_prices']) ? $data['sales_prices'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_code
     *
     * @return string
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     *
     * @param string $item_code The item code for the stock item
     *
     * @return $this
     */
    public function setItemCode($item_code)
    {
        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The stock item description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets sales_ledger_account_id
     *
     * @return string
     */
    public function getSalesLedgerAccountId()
    {
        return $this->container['sales_ledger_account_id'];
    }

    /**
     * Sets sales_ledger_account_id
     *
     * @param string $sales_ledger_account_id The sales ledger account for the stock item
     *
     * @return $this
     */
    public function setSalesLedgerAccountId($sales_ledger_account_id)
    {
        $this->container['sales_ledger_account_id'] = $sales_ledger_account_id;

        return $this;
    }

    /**
     * Gets purchase_ledger_account_id
     *
     * @return string
     */
    public function getPurchaseLedgerAccountId()
    {
        return $this->container['purchase_ledger_account_id'];
    }

    /**
     * Sets purchase_ledger_account_id
     *
     * @param string $purchase_ledger_account_id The purchase ledger account for the stock item
     *
     * @return $this
     */
    public function setPurchaseLedgerAccountId($purchase_ledger_account_id)
    {
        $this->container['purchase_ledger_account_id'] = $purchase_ledger_account_id;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes The notes for the stock item
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets sales_tax_rate_id
     *
     * @return string
     */
    public function getSalesTaxRateId()
    {
        return $this->container['sales_tax_rate_id'];
    }

    /**
     * Sets sales_tax_rate_id
     *
     * @param string $sales_tax_rate_id The ID of the Sales Tax Rate.
     *
     * @return $this
     */
    public function setSalesTaxRateId($sales_tax_rate_id)
    {
        $this->container['sales_tax_rate_id'] = $sales_tax_rate_id;

        return $this;
    }

    /**
     * Gets usual_supplier_id
     *
     * @return string
     */
    public function getUsualSupplierId()
    {
        return $this->container['usual_supplier_id'];
    }

    /**
     * Sets usual_supplier_id
     *
     * @param string $usual_supplier_id The ID of the Usual Supplier.
     *
     * @return $this
     */
    public function setUsualSupplierId($usual_supplier_id)
    {
        $this->container['usual_supplier_id'] = $usual_supplier_id;

        return $this;
    }

    /**
     * Gets purchase_tax_rate_id
     *
     * @return string
     */
    public function getPurchaseTaxRateId()
    {
        return $this->container['purchase_tax_rate_id'];
    }

    /**
     * Sets purchase_tax_rate_id
     *
     * @param string $purchase_tax_rate_id The ID of the Purchase Tax Rate.
     *
     * @return $this
     */
    public function setPurchaseTaxRateId($purchase_tax_rate_id)
    {
        $this->container['purchase_tax_rate_id'] = $purchase_tax_rate_id;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return double
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param double $cost_price The cost price of the stock item
     *
     * @return $this
     */
    public function setCostPrice($cost_price)
    {
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets source_guid
     *
     * @return string
     */
    public function getSourceGuid()
    {
        return $this->container['source_guid'];
    }

    /**
     * Sets source_guid
     *
     * @param string $source_guid Used when importing stock items from external sources
     *
     * @return $this
     */
    public function setSourceGuid($source_guid)
    {
        $this->container['source_guid'] = $source_guid;

        return $this;
    }

    /**
     * Gets purchase_description
     *
     * @return string
     */
    public function getPurchaseDescription()
    {
        return $this->container['purchase_description'];
    }

    /**
     * Sets purchase_description
     *
     * @param string $purchase_description The stock item purchase description
     *
     * @return $this
     */
    public function setPurchaseDescription($purchase_description)
    {
        $this->container['purchase_description'] = $purchase_description;

        return $this;
    }

    /**
     * Gets reorder_level
     *
     * @return double
     */
    public function getReorderLevel()
    {
        return $this->container['reorder_level'];
    }

    /**
     * Sets reorder_level
     *
     * @param double $reorder_level The reorder level for the stock item
     *
     * @return $this
     */
    public function setReorderLevel($reorder_level)
    {
        $this->container['reorder_level'] = $reorder_level;

        return $this;
    }

    /**
     * Gets reorder_quantity
     *
     * @return double
     */
    public function getReorderQuantity()
    {
        return $this->container['reorder_quantity'];
    }

    /**
     * Sets reorder_quantity
     *
     * @param double $reorder_quantity The reorder quantity for the stock item
     *
     * @return $this
     */
    public function setReorderQuantity($reorder_quantity)
    {
        $this->container['reorder_quantity'] = $reorder_quantity;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location The location for the stock item
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode The barcode for the stock item
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets supplier_part_number
     *
     * @return string
     */
    public function getSupplierPartNumber()
    {
        return $this->container['supplier_part_number'];
    }

    /**
     * Sets supplier_part_number
     *
     * @param string $supplier_part_number The supplier part number for stock item
     *
     * @return $this
     */
    public function setSupplierPartNumber($supplier_part_number)
    {
        $this->container['supplier_part_number'] = $supplier_part_number;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight The weight of stock item
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets measurement_unit
     *
     * @return string
     */
    public function getMeasurementUnit()
    {
        return $this->container['measurement_unit'];
    }

    /**
     * Sets measurement_unit
     *
     * @param string $measurement_unit The unit of measure of weight for stock item
     *
     * @return $this
     */
    public function setMeasurementUnit($measurement_unit)
    {
        $this->container['measurement_unit'] = $measurement_unit;

        return $this;
    }

    /**
     * Gets weight_converted
     *
     * @return double
     */
    public function getWeightConverted()
    {
        return $this->container['weight_converted'];
    }

    /**
     * Sets weight_converted
     *
     * @param double $weight_converted The weight of stock item converted to the lowest unit of measurement
     *
     * @return $this
     */
    public function setWeightConverted($weight_converted)
    {
        $this->container['weight_converted'] = $weight_converted;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Indicates whether the stock item is active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets quantity_in_stock
     *
     * @return double
     */
    public function getQuantityInStock()
    {
        return $this->container['quantity_in_stock'];
    }

    /**
     * Sets quantity_in_stock
     *
     * @param double $quantity_in_stock The current quantity of the stock item held by the business
     *
     * @return $this
     */
    public function setQuantityInStock($quantity_in_stock)
    {
        $this->container['quantity_in_stock'] = $quantity_in_stock;

        return $this;
    }

    /**
     * Gets last_cost_price
     *
     * @return double
     */
    public function getLastCostPrice()
    {
        return $this->container['last_cost_price'];
    }

    /**
     * Sets last_cost_price
     *
     * @param double $last_cost_price The most recent 'purchase invoice' or 'adjustment in' price
     *
     * @return $this
     */
    public function setLastCostPrice($last_cost_price)
    {
        $this->container['last_cost_price'] = $last_cost_price;

        return $this;
    }

    /**
     * Gets last_cost_price_stock_value
     *
     * @return double
     */
    public function getLastCostPriceStockValue()
    {
        return $this->container['last_cost_price_stock_value'];
    }

    /**
     * Sets last_cost_price_stock_value
     *
     * @param double $last_cost_price_stock_value The value of the current stock in terms of the last cost price
     *
     * @return $this
     */
    public function setLastCostPriceStockValue($last_cost_price_stock_value)
    {
        $this->container['last_cost_price_stock_value'] = $last_cost_price_stock_value;

        return $this;
    }

    /**
     * Gets average_cost_price
     *
     * @return double
     */
    public function getAverageCostPrice()
    {
        return $this->container['average_cost_price'];
    }

    /**
     * Sets average_cost_price
     *
     * @param double $average_cost_price The average price across all purchases of this stock item
     *
     * @return $this
     */
    public function setAverageCostPrice($average_cost_price)
    {
        $this->container['average_cost_price'] = $average_cost_price;

        return $this;
    }

    /**
     * Gets average_cost_price_stock_value
     *
     * @return double
     */
    public function getAverageCostPriceStockValue()
    {
        return $this->container['average_cost_price_stock_value'];
    }

    /**
     * Sets average_cost_price_stock_value
     *
     * @param double $average_cost_price_stock_value The value of the current stock in terms of the average cost price
     *
     * @return $this
     */
    public function setAverageCostPriceStockValue($average_cost_price_stock_value)
    {
        $this->container['average_cost_price_stock_value'] = $average_cost_price_stock_value;

        return $this;
    }

    /**
     * Gets cost_price_last_updated
     *
     * @return \DateTime
     */
    public function getCostPriceLastUpdated()
    {
        return $this->container['cost_price_last_updated'];
    }

    /**
     * Sets cost_price_last_updated
     *
     * @param \DateTime $cost_price_last_updated The date on which the last cost price was last updated
     *
     * @return $this
     */
    public function setCostPriceLastUpdated($cost_price_last_updated)
    {
        $this->container['cost_price_last_updated'] = $cost_price_last_updated;

        return $this;
    }

    /**
     * Gets sales_prices
     *
     * @return \Swagger\Client\Model\PostProductsProductSalesPrices[]
     */
    public function getSalesPrices()
    {
        return $this->container['sales_prices'];
    }

    /**
     * Sets sales_prices
     *
     * @param \Swagger\Client\Model\PostProductsProductSalesPrices[] $sales_prices sales_prices
     *
     * @return $this
     */
    public function setSalesPrices($sales_prices)
    {
        $this->container['sales_prices'] = $sales_prices;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


