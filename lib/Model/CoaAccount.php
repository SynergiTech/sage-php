<?php
/**
 * CoaAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CoaAccount Class Doc Comment
 *
 * @category Class
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Standard: ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª * Accounting Start: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CoaAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CoaAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'legacy_id' => 'int',
        'id' => 'string',
        'displayed_as' => 'string',
        'path' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'ledger_account_group' => '\Swagger\Client\Model\CoaGroupType',
        'name' => 'string',
        'control_name' => 'string',
        'nominal_code' => 'int',
        'ledger_account_type' => '\Swagger\Client\Model\Base',
        'ledger_account_classification' => '\Swagger\Client\Model\Base',
        'tax_rate' => '\Swagger\Client\Model\Base',
        'fixed_tax_rate' => 'bool',
        'cis_materials' => 'bool',
        'cis_labour' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'legacy_id' => 'int32',
        'id' => null,
        'displayed_as' => null,
        'path' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'ledger_account_group' => null,
        'name' => null,
        'control_name' => null,
        'nominal_code' => 'int32',
        'ledger_account_type' => null,
        'ledger_account_classification' => null,
        'tax_rate' => null,
        'fixed_tax_rate' => null,
        'cis_materials' => null,
        'cis_labour' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legacy_id' => 'legacy_id',
        'id' => 'id',
        'displayed_as' => 'displayed_as',
        'path' => '$path',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'ledger_account_group' => 'ledger_account_group',
        'name' => 'name',
        'control_name' => 'control_name',
        'nominal_code' => 'nominal_code',
        'ledger_account_type' => 'ledger_account_type',
        'ledger_account_classification' => 'ledger_account_classification',
        'tax_rate' => 'tax_rate',
        'fixed_tax_rate' => 'fixed_tax_rate',
        'cis_materials' => 'cis_materials',
        'cis_labour' => 'cis_labour'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legacy_id' => 'setLegacyId',
        'id' => 'setId',
        'displayed_as' => 'setDisplayedAs',
        'path' => 'setPath',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'ledger_account_group' => 'setLedgerAccountGroup',
        'name' => 'setName',
        'control_name' => 'setControlName',
        'nominal_code' => 'setNominalCode',
        'ledger_account_type' => 'setLedgerAccountType',
        'ledger_account_classification' => 'setLedgerAccountClassification',
        'tax_rate' => 'setTaxRate',
        'fixed_tax_rate' => 'setFixedTaxRate',
        'cis_materials' => 'setCisMaterials',
        'cis_labour' => 'setCisLabour'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legacy_id' => 'getLegacyId',
        'id' => 'getId',
        'displayed_as' => 'getDisplayedAs',
        'path' => 'getPath',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'ledger_account_group' => 'getLedgerAccountGroup',
        'name' => 'getName',
        'control_name' => 'getControlName',
        'nominal_code' => 'getNominalCode',
        'ledger_account_type' => 'getLedgerAccountType',
        'ledger_account_classification' => 'getLedgerAccountClassification',
        'tax_rate' => 'getTaxRate',
        'fixed_tax_rate' => 'getFixedTaxRate',
        'cis_materials' => 'getCisMaterials',
        'cis_labour' => 'getCisLabour'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['legacy_id'] = isset($data['legacy_id']) ? $data['legacy_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['displayed_as'] = isset($data['displayed_as']) ? $data['displayed_as'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['ledger_account_group'] = isset($data['ledger_account_group']) ? $data['ledger_account_group'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['control_name'] = isset($data['control_name']) ? $data['control_name'] : null;
        $this->container['nominal_code'] = isset($data['nominal_code']) ? $data['nominal_code'] : null;
        $this->container['ledger_account_type'] = isset($data['ledger_account_type']) ? $data['ledger_account_type'] : null;
        $this->container['ledger_account_classification'] = isset($data['ledger_account_classification']) ? $data['ledger_account_classification'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['fixed_tax_rate'] = isset($data['fixed_tax_rate']) ? $data['fixed_tax_rate'] : null;
        $this->container['cis_materials'] = isset($data['cis_materials']) ? $data['cis_materials'] : null;
        $this->container['cis_labour'] = isset($data['cis_labour']) ? $data['cis_labour'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['control_name']) && (mb_strlen($this->container['control_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'control_name', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacy_id
     *
     * @return int
     */
    public function getLegacyId()
    {
        return $this->container['legacy_id'];
    }

    /**
     * Sets legacy_id
     *
     * @param int $legacy_id The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId($legacy_id)
    {
        $this->container['legacy_id'] = $legacy_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayed_as
     *
     * @return string
     */
    public function getDisplayedAs()
    {
        return $this->container['displayed_as'];
    }

    /**
     * Sets displayed_as
     *
     * @param string $displayed_as The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs($displayed_as)
    {
        $this->container['displayed_as'] = $displayed_as;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The API path for the resource
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The datetime when the item was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets ledger_account_group
     *
     * @return \Swagger\Client\Model\CoaGroupType
     */
    public function getLedgerAccountGroup()
    {
        return $this->container['ledger_account_group'];
    }

    /**
     * Sets ledger_account_group
     *
     * @param \Swagger\Client\Model\CoaGroupType $ledger_account_group The ledger account group for the account
     *
     * @return $this
     */
    public function setLedgerAccountGroup($ledger_account_group)
    {
        $this->container['ledger_account_group'] = $ledger_account_group;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name for the COA account
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CoaAccount., must be smaller than or equal to 200.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets control_name
     *
     * @return string
     */
    public function getControlName()
    {
        return $this->container['control_name'];
    }

    /**
     * Sets control_name
     *
     * @param string $control_name The system control name for the COA account.  System control names are used in Accounting to identify the correct ledger account for booking taxes etc.
     *
     * @return $this
     */
    public function setControlName($control_name)
    {
        if (!is_null($control_name) && (mb_strlen($control_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $control_name when calling CoaAccount., must be smaller than or equal to 50.');
        }

        $this->container['control_name'] = $control_name;

        return $this;
    }

    /**
     * Gets nominal_code
     *
     * @return int
     */
    public function getNominalCode()
    {
        return $this->container['nominal_code'];
    }

    /**
     * Sets nominal_code
     *
     * @param int $nominal_code The nominal code of the COA account
     *
     * @return $this
     */
    public function setNominalCode($nominal_code)
    {
        $this->container['nominal_code'] = $nominal_code;

        return $this;
    }

    /**
     * Gets ledger_account_type
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getLedgerAccountType()
    {
        return $this->container['ledger_account_type'];
    }

    /**
     * Sets ledger_account_type
     *
     * @param \Swagger\Client\Model\Base $ledger_account_type The ledger account type for the COA account
     *
     * @return $this
     */
    public function setLedgerAccountType($ledger_account_type)
    {
        $this->container['ledger_account_type'] = $ledger_account_type;

        return $this;
    }

    /**
     * Gets ledger_account_classification
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getLedgerAccountClassification()
    {
        return $this->container['ledger_account_classification'];
    }

    /**
     * Sets ledger_account_classification
     *
     * @param \Swagger\Client\Model\Base $ledger_account_classification The ledger account classification for the COA account
     *
     * @return $this
     */
    public function setLedgerAccountClassification($ledger_account_classification)
    {
        $this->container['ledger_account_classification'] = $ledger_account_classification;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param \Swagger\Client\Model\Base $tax_rate The default tax rate for the COA account
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets fixed_tax_rate
     *
     * @return bool
     */
    public function getFixedTaxRate()
    {
        return $this->container['fixed_tax_rate'];
    }

    /**
     * Sets fixed_tax_rate
     *
     * @param bool $fixed_tax_rate Indicates whether the default tax rate is fixed or may be changed per transaction
     *
     * @return $this
     */
    public function setFixedTaxRate($fixed_tax_rate)
    {
        $this->container['fixed_tax_rate'] = $fixed_tax_rate;

        return $this;
    }

    /**
     * Gets cis_materials
     *
     * @return bool
     */
    public function getCisMaterials()
    {
        return $this->container['cis_materials'];
    }

    /**
     * Sets cis_materials
     *
     * @param bool $cis_materials Indicates whether the COA account is flagged for CIS Materials
     *
     * @return $this
     */
    public function setCisMaterials($cis_materials)
    {
        $this->container['cis_materials'] = $cis_materials;

        return $this;
    }

    /**
     * Gets cis_labour
     *
     * @return bool
     */
    public function getCisLabour()
    {
        return $this->container['cis_labour'];
    }

    /**
     * Sets cis_labour
     *
     * @param bool $cis_labour Indicates whether the COA account is flagged for CIS Labour
     *
     * @return $this
     */
    public function setCisLabour($cis_labour)
    {
        $this->container['cis_labour'] = $cis_labour;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


