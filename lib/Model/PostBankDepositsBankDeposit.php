<?php
/**
 * PostBankDepositsBankDeposit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PostBankDepositsBankDeposit Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostBankDepositsBankDeposit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'postBankDeposits_bank_deposit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from_bank_account_id' => 'string',
        'to_bank_account_id' => 'string',
        'date' => '\DateTime',
        'reference' => 'string',
        'cash_amount' => 'double',
        'cheque_amount' => 'double',
        'total_amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from_bank_account_id' => null,
        'to_bank_account_id' => null,
        'date' => 'date',
        'reference' => null,
        'cash_amount' => 'double',
        'cheque_amount' => 'double',
        'total_amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_bank_account_id' => 'from_bank_account_id',
        'to_bank_account_id' => 'to_bank_account_id',
        'date' => 'date',
        'reference' => 'reference',
        'cash_amount' => 'cash_amount',
        'cheque_amount' => 'cheque_amount',
        'total_amount' => 'total_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_bank_account_id' => 'setFromBankAccountId',
        'to_bank_account_id' => 'setToBankAccountId',
        'date' => 'setDate',
        'reference' => 'setReference',
        'cash_amount' => 'setCashAmount',
        'cheque_amount' => 'setChequeAmount',
        'total_amount' => 'setTotalAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_bank_account_id' => 'getFromBankAccountId',
        'to_bank_account_id' => 'getToBankAccountId',
        'date' => 'getDate',
        'reference' => 'getReference',
        'cash_amount' => 'getCashAmount',
        'cheque_amount' => 'getChequeAmount',
        'total_amount' => 'getTotalAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from_bank_account_id'] = isset($data['from_bank_account_id']) ? $data['from_bank_account_id'] : null;
        $this->container['to_bank_account_id'] = isset($data['to_bank_account_id']) ? $data['to_bank_account_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['cash_amount'] = isset($data['cash_amount']) ? $data['cash_amount'] : null;
        $this->container['cheque_amount'] = isset($data['cheque_amount']) ? $data['cheque_amount'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['from_bank_account_id'] === null) {
            $invalidProperties[] = "'from_bank_account_id' can't be null";
        }
        if ($this->container['to_bank_account_id'] === null) {
            $invalidProperties[] = "'to_bank_account_id' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['cash_amount'] === null) {
            $invalidProperties[] = "'cash_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_bank_account_id
     *
     * @return string
     */
    public function getFromBankAccountId()
    {
        return $this->container['from_bank_account_id'];
    }

    /**
     * Sets from_bank_account_id
     *
     * @param string $from_bank_account_id From bank account - money leaves this account
     *
     * @return $this
     */
    public function setFromBankAccountId($from_bank_account_id)
    {
        $this->container['from_bank_account_id'] = $from_bank_account_id;

        return $this;
    }

    /**
     * Gets to_bank_account_id
     *
     * @return string
     */
    public function getToBankAccountId()
    {
        return $this->container['to_bank_account_id'];
    }

    /**
     * Sets to_bank_account_id
     *
     * @param string $to_bank_account_id To bank account - money goes into this account
     *
     * @return $this
     */
    public function setToBankAccountId($to_bank_account_id)
    {
        $this->container['to_bank_account_id'] = $to_bank_account_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date User generated date of transaction, not necessarily when it was created
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets cash_amount
     *
     * @return double
     */
    public function getCashAmount()
    {
        return $this->container['cash_amount'];
    }

    /**
     * Sets cash_amount
     *
     * @param double $cash_amount Cash total in the deposit
     *
     * @return $this
     */
    public function setCashAmount($cash_amount)
    {
        $this->container['cash_amount'] = $cash_amount;

        return $this;
    }

    /**
     * Gets cheque_amount
     *
     * @return double
     */
    public function getChequeAmount()
    {
        return $this->container['cheque_amount'];
    }

    /**
     * Sets cheque_amount
     *
     * @param double $cheque_amount Cheque total in the deposit
     *
     * @return $this
     */
    public function setChequeAmount($cheque_amount)
    {
        $this->container['cheque_amount'] = $cheque_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount Total of cash and cheques in the deposit
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


