<?php
/**
 * PostMigrationTaxReturnsMigrationTaxReturnIe
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PostMigrationTaxReturnsMigrationTaxReturnIe Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostMigrationTaxReturnsMigrationTaxReturnIe implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'postMigrationTaxReturns_migration_tax_return_ie';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'box_t1' => 'double',
        'box_t2' => 'double',
        'box_t3' => 'double',
        'box_t4' => 'double',
        'box_e1' => 'double',
        'box_e2' => 'double',
        'box_es1' => 'double',
        'box_es2' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'box_t1' => 'double',
        'box_t2' => 'double',
        'box_t3' => 'double',
        'box_t4' => 'double',
        'box_e1' => 'double',
        'box_e2' => 'double',
        'box_es1' => 'double',
        'box_es2' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'box_t1' => 'box_T1',
        'box_t2' => 'box_T2',
        'box_t3' => 'box_T3',
        'box_t4' => 'box_T4',
        'box_e1' => 'box_E1',
        'box_e2' => 'box_E2',
        'box_es1' => 'box_ES1',
        'box_es2' => 'box_ES2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'box_t1' => 'setBoxT1',
        'box_t2' => 'setBoxT2',
        'box_t3' => 'setBoxT3',
        'box_t4' => 'setBoxT4',
        'box_e1' => 'setBoxE1',
        'box_e2' => 'setBoxE2',
        'box_es1' => 'setBoxEs1',
        'box_es2' => 'setBoxEs2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'box_t1' => 'getBoxT1',
        'box_t2' => 'getBoxT2',
        'box_t3' => 'getBoxT3',
        'box_t4' => 'getBoxT4',
        'box_e1' => 'getBoxE1',
        'box_e2' => 'getBoxE2',
        'box_es1' => 'getBoxEs1',
        'box_es2' => 'getBoxEs2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['box_t1'] = isset($data['box_t1']) ? $data['box_t1'] : null;
        $this->container['box_t2'] = isset($data['box_t2']) ? $data['box_t2'] : null;
        $this->container['box_t3'] = isset($data['box_t3']) ? $data['box_t3'] : null;
        $this->container['box_t4'] = isset($data['box_t4']) ? $data['box_t4'] : null;
        $this->container['box_e1'] = isset($data['box_e1']) ? $data['box_e1'] : null;
        $this->container['box_e2'] = isset($data['box_e2']) ? $data['box_e2'] : null;
        $this->container['box_es1'] = isset($data['box_es1']) ? $data['box_es1'] : null;
        $this->container['box_es2'] = isset($data['box_es2']) ? $data['box_es2'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets box_t1
     *
     * @return double
     */
    public function getBoxT1()
    {
        return $this->container['box_t1'];
    }

    /**
     * Sets box_t1
     *
     * @param double $box_t1 The value of box T1
     *
     * @return $this
     */
    public function setBoxT1($box_t1)
    {
        $this->container['box_t1'] = $box_t1;

        return $this;
    }

    /**
     * Gets box_t2
     *
     * @return double
     */
    public function getBoxT2()
    {
        return $this->container['box_t2'];
    }

    /**
     * Sets box_t2
     *
     * @param double $box_t2 The value of box T2
     *
     * @return $this
     */
    public function setBoxT2($box_t2)
    {
        $this->container['box_t2'] = $box_t2;

        return $this;
    }

    /**
     * Gets box_t3
     *
     * @return double
     */
    public function getBoxT3()
    {
        return $this->container['box_t3'];
    }

    /**
     * Sets box_t3
     *
     * @param double $box_t3 The value of box T3
     *
     * @return $this
     */
    public function setBoxT3($box_t3)
    {
        $this->container['box_t3'] = $box_t3;

        return $this;
    }

    /**
     * Gets box_t4
     *
     * @return double
     */
    public function getBoxT4()
    {
        return $this->container['box_t4'];
    }

    /**
     * Sets box_t4
     *
     * @param double $box_t4 The value of box T4
     *
     * @return $this
     */
    public function setBoxT4($box_t4)
    {
        $this->container['box_t4'] = $box_t4;

        return $this;
    }

    /**
     * Gets box_e1
     *
     * @return double
     */
    public function getBoxE1()
    {
        return $this->container['box_e1'];
    }

    /**
     * Sets box_e1
     *
     * @param double $box_e1 The value of box E1
     *
     * @return $this
     */
    public function setBoxE1($box_e1)
    {
        $this->container['box_e1'] = $box_e1;

        return $this;
    }

    /**
     * Gets box_e2
     *
     * @return double
     */
    public function getBoxE2()
    {
        return $this->container['box_e2'];
    }

    /**
     * Sets box_e2
     *
     * @param double $box_e2 The value of box E2
     *
     * @return $this
     */
    public function setBoxE2($box_e2)
    {
        $this->container['box_e2'] = $box_e2;

        return $this;
    }

    /**
     * Gets box_es1
     *
     * @return double
     */
    public function getBoxEs1()
    {
        return $this->container['box_es1'];
    }

    /**
     * Sets box_es1
     *
     * @param double $box_es1 The value of box ES1
     *
     * @return $this
     */
    public function setBoxEs1($box_es1)
    {
        $this->container['box_es1'] = $box_es1;

        return $this;
    }

    /**
     * Gets box_es2
     *
     * @return double
     */
    public function getBoxEs2()
    {
        return $this->container['box_es2'];
    }

    /**
     * Sets box_es2
     *
     * @param double $box_es2 The value of box ES2
     *
     * @return $this
     */
    public function setBoxEs2($box_es2)
    {
        $this->container['box_es2'] = $box_es2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


