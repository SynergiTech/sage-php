<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡¨ðŸ‡¦, ðŸ‡ªðŸ‡¸, ðŸ‡«ðŸ‡·, ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª, ðŸ‡ºðŸ‡¸ * Accounting Standard: ðŸ‡¬ðŸ‡§, ðŸ‡®ðŸ‡ª  ### Access Control Restrictions  Requires the authenticated user to have any mentioned role in one of the listed areas: * Area: &#x60;Products &amp; Services&#x60;: Restricted Access, Full Access
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'legacy_id' => 'int',
        'id' => 'string',
        'displayed_as' => 'string',
        'path' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'deleted_at' => '\DateTime',
        'deletable' => 'bool',
        'deactivatable' => 'bool',
        'used_on_recurring_invoice' => 'bool',
        'item_code' => 'string',
        'description' => 'string',
        'notes' => 'string',
        'sales_ledger_account' => '\Swagger\Client\Model\Base',
        'sales_tax_rate' => '\Swagger\Client\Model\Base',
        'purchase_ledger_account' => '\Swagger\Client\Model\Base',
        'usual_supplier' => '\Swagger\Client\Model\Contact',
        'purchase_tax_rate' => '\Swagger\Client\Model\Base',
        'cost_price' => 'double',
        'sales_prices' => '\Swagger\Client\Model\SalesPrice[]',
        'source_guid' => 'string',
        'purchase_description' => 'string',
        'active' => 'bool',
        'catalog_item_type' => '\Swagger\Client\Model\Base'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'legacy_id' => 'int32',
        'id' => null,
        'displayed_as' => null,
        'path' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'deleted_at' => 'date-time',
        'deletable' => null,
        'deactivatable' => null,
        'used_on_recurring_invoice' => null,
        'item_code' => null,
        'description' => null,
        'notes' => null,
        'sales_ledger_account' => null,
        'sales_tax_rate' => null,
        'purchase_ledger_account' => null,
        'usual_supplier' => null,
        'purchase_tax_rate' => null,
        'cost_price' => 'double',
        'sales_prices' => null,
        'source_guid' => null,
        'purchase_description' => null,
        'active' => null,
        'catalog_item_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legacy_id' => 'legacy_id',
        'id' => 'id',
        'displayed_as' => 'displayed_as',
        'path' => '$path',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'deleted_at' => 'deleted_at',
        'deletable' => 'deletable',
        'deactivatable' => 'deactivatable',
        'used_on_recurring_invoice' => 'used_on_recurring_invoice',
        'item_code' => 'item_code',
        'description' => 'description',
        'notes' => 'notes',
        'sales_ledger_account' => 'sales_ledger_account',
        'sales_tax_rate' => 'sales_tax_rate',
        'purchase_ledger_account' => 'purchase_ledger_account',
        'usual_supplier' => 'usual_supplier',
        'purchase_tax_rate' => 'purchase_tax_rate',
        'cost_price' => 'cost_price',
        'sales_prices' => 'sales_prices',
        'source_guid' => 'source_guid',
        'purchase_description' => 'purchase_description',
        'active' => 'active',
        'catalog_item_type' => 'catalog_item_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legacy_id' => 'setLegacyId',
        'id' => 'setId',
        'displayed_as' => 'setDisplayedAs',
        'path' => 'setPath',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'deleted_at' => 'setDeletedAt',
        'deletable' => 'setDeletable',
        'deactivatable' => 'setDeactivatable',
        'used_on_recurring_invoice' => 'setUsedOnRecurringInvoice',
        'item_code' => 'setItemCode',
        'description' => 'setDescription',
        'notes' => 'setNotes',
        'sales_ledger_account' => 'setSalesLedgerAccount',
        'sales_tax_rate' => 'setSalesTaxRate',
        'purchase_ledger_account' => 'setPurchaseLedgerAccount',
        'usual_supplier' => 'setUsualSupplier',
        'purchase_tax_rate' => 'setPurchaseTaxRate',
        'cost_price' => 'setCostPrice',
        'sales_prices' => 'setSalesPrices',
        'source_guid' => 'setSourceGuid',
        'purchase_description' => 'setPurchaseDescription',
        'active' => 'setActive',
        'catalog_item_type' => 'setCatalogItemType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legacy_id' => 'getLegacyId',
        'id' => 'getId',
        'displayed_as' => 'getDisplayedAs',
        'path' => 'getPath',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'deleted_at' => 'getDeletedAt',
        'deletable' => 'getDeletable',
        'deactivatable' => 'getDeactivatable',
        'used_on_recurring_invoice' => 'getUsedOnRecurringInvoice',
        'item_code' => 'getItemCode',
        'description' => 'getDescription',
        'notes' => 'getNotes',
        'sales_ledger_account' => 'getSalesLedgerAccount',
        'sales_tax_rate' => 'getSalesTaxRate',
        'purchase_ledger_account' => 'getPurchaseLedgerAccount',
        'usual_supplier' => 'getUsualSupplier',
        'purchase_tax_rate' => 'getPurchaseTaxRate',
        'cost_price' => 'getCostPrice',
        'sales_prices' => 'getSalesPrices',
        'source_guid' => 'getSourceGuid',
        'purchase_description' => 'getPurchaseDescription',
        'active' => 'getActive',
        'catalog_item_type' => 'getCatalogItemType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['legacy_id'] = isset($data['legacy_id']) ? $data['legacy_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['displayed_as'] = isset($data['displayed_as']) ? $data['displayed_as'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['deletable'] = isset($data['deletable']) ? $data['deletable'] : null;
        $this->container['deactivatable'] = isset($data['deactivatable']) ? $data['deactivatable'] : null;
        $this->container['used_on_recurring_invoice'] = isset($data['used_on_recurring_invoice']) ? $data['used_on_recurring_invoice'] : null;
        $this->container['item_code'] = isset($data['item_code']) ? $data['item_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['sales_ledger_account'] = isset($data['sales_ledger_account']) ? $data['sales_ledger_account'] : null;
        $this->container['sales_tax_rate'] = isset($data['sales_tax_rate']) ? $data['sales_tax_rate'] : null;
        $this->container['purchase_ledger_account'] = isset($data['purchase_ledger_account']) ? $data['purchase_ledger_account'] : null;
        $this->container['usual_supplier'] = isset($data['usual_supplier']) ? $data['usual_supplier'] : null;
        $this->container['purchase_tax_rate'] = isset($data['purchase_tax_rate']) ? $data['purchase_tax_rate'] : null;
        $this->container['cost_price'] = isset($data['cost_price']) ? $data['cost_price'] : null;
        $this->container['sales_prices'] = isset($data['sales_prices']) ? $data['sales_prices'] : null;
        $this->container['source_guid'] = isset($data['source_guid']) ? $data['source_guid'] : null;
        $this->container['purchase_description'] = isset($data['purchase_description']) ? $data['purchase_description'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['catalog_item_type'] = isset($data['catalog_item_type']) ? $data['catalog_item_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['item_code']) && (mb_strlen($this->container['item_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'item_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) > 500)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['source_guid']) && (mb_strlen($this->container['source_guid']) > 255)) {
            $invalidProperties[] = "invalid value for 'source_guid', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['purchase_description']) && (mb_strlen($this->container['purchase_description']) > 250)) {
            $invalidProperties[] = "invalid value for 'purchase_description', the character length must be smaller than or equal to 250.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacy_id
     *
     * @return int
     */
    public function getLegacyId()
    {
        return $this->container['legacy_id'];
    }

    /**
     * Sets legacy_id
     *
     * @param int $legacy_id The legacy ID for the item
     *
     * @return $this
     */
    public function setLegacyId($legacy_id)
    {
        $this->container['legacy_id'] = $legacy_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier for the item
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayed_as
     *
     * @return string
     */
    public function getDisplayedAs()
    {
        return $this->container['displayed_as'];
    }

    /**
     * Sets displayed_as
     *
     * @param string $displayed_as The name of the resource
     *
     * @return $this
     */
    public function setDisplayedAs($displayed_as)
    {
        $this->container['displayed_as'] = $displayed_as;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The API path for the resource
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The datetime when the item was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at The datetime when the item was deleted
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets deletable
     *
     * @return bool
     */
    public function getDeletable()
    {
        return $this->container['deletable'];
    }

    /**
     * Sets deletable
     *
     * @param bool $deletable Indicates whether the product can be deleted
     *
     * @return $this
     */
    public function setDeletable($deletable)
    {
        $this->container['deletable'] = $deletable;

        return $this;
    }

    /**
     * Gets deactivatable
     *
     * @return bool
     */
    public function getDeactivatable()
    {
        return $this->container['deactivatable'];
    }

    /**
     * Sets deactivatable
     *
     * @param bool $deactivatable Indicates whether the product can be deactivated
     *
     * @return $this
     */
    public function setDeactivatable($deactivatable)
    {
        $this->container['deactivatable'] = $deactivatable;

        return $this;
    }

    /**
     * Gets used_on_recurring_invoice
     *
     * @return bool
     */
    public function getUsedOnRecurringInvoice()
    {
        return $this->container['used_on_recurring_invoice'];
    }

    /**
     * Sets used_on_recurring_invoice
     *
     * @param bool $used_on_recurring_invoice Indicates whether the product has been used on a recurring invoice
     *
     * @return $this
     */
    public function setUsedOnRecurringInvoice($used_on_recurring_invoice)
    {
        $this->container['used_on_recurring_invoice'] = $used_on_recurring_invoice;

        return $this;
    }

    /**
     * Gets item_code
     *
     * @return string
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     *
     * @param string $item_code The item code for the product
     *
     * @return $this
     */
    public function setItemCode($item_code)
    {
        if (!is_null($item_code) && (mb_strlen($item_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $item_code when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The product description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes The notes for the product
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        if (!is_null($notes) && (mb_strlen($notes) > 500)) {
            throw new \InvalidArgumentException('invalid length for $notes when calling Product., must be smaller than or equal to 500.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets sales_ledger_account
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getSalesLedgerAccount()
    {
        return $this->container['sales_ledger_account'];
    }

    /**
     * Sets sales_ledger_account
     *
     * @param \Swagger\Client\Model\Base $sales_ledger_account The sales ledger account for the product
     *
     * @return $this
     */
    public function setSalesLedgerAccount($sales_ledger_account)
    {
        $this->container['sales_ledger_account'] = $sales_ledger_account;

        return $this;
    }

    /**
     * Gets sales_tax_rate
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getSalesTaxRate()
    {
        return $this->container['sales_tax_rate'];
    }

    /**
     * Sets sales_tax_rate
     *
     * @param \Swagger\Client\Model\Base $sales_tax_rate The sales tax rate for the product
     *
     * @return $this
     */
    public function setSalesTaxRate($sales_tax_rate)
    {
        $this->container['sales_tax_rate'] = $sales_tax_rate;

        return $this;
    }

    /**
     * Gets purchase_ledger_account
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getPurchaseLedgerAccount()
    {
        return $this->container['purchase_ledger_account'];
    }

    /**
     * Sets purchase_ledger_account
     *
     * @param \Swagger\Client\Model\Base $purchase_ledger_account The purchase ledger account for the product
     *
     * @return $this
     */
    public function setPurchaseLedgerAccount($purchase_ledger_account)
    {
        $this->container['purchase_ledger_account'] = $purchase_ledger_account;

        return $this;
    }

    /**
     * Gets usual_supplier
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getUsualSupplier()
    {
        return $this->container['usual_supplier'];
    }

    /**
     * Sets usual_supplier
     *
     * @param \Swagger\Client\Model\Contact $usual_supplier The usual supplier for the product
     *
     * @return $this
     */
    public function setUsualSupplier($usual_supplier)
    {
        $this->container['usual_supplier'] = $usual_supplier;

        return $this;
    }

    /**
     * Gets purchase_tax_rate
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getPurchaseTaxRate()
    {
        return $this->container['purchase_tax_rate'];
    }

    /**
     * Sets purchase_tax_rate
     *
     * @param \Swagger\Client\Model\Base $purchase_tax_rate The purchase tax rate for the product
     *
     * @return $this
     */
    public function setPurchaseTaxRate($purchase_tax_rate)
    {
        $this->container['purchase_tax_rate'] = $purchase_tax_rate;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return double
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param double $cost_price The cost price of the product
     *
     * @return $this
     */
    public function setCostPrice($cost_price)
    {
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets sales_prices
     *
     * @return \Swagger\Client\Model\SalesPrice[]
     */
    public function getSalesPrices()
    {
        return $this->container['sales_prices'];
    }

    /**
     * Sets sales_prices
     *
     * @param \Swagger\Client\Model\SalesPrice[] $sales_prices The sales prices for the product
     *
     * @return $this
     */
    public function setSalesPrices($sales_prices)
    {
        $this->container['sales_prices'] = $sales_prices;

        return $this;
    }

    /**
     * Gets source_guid
     *
     * @return string
     */
    public function getSourceGuid()
    {
        return $this->container['source_guid'];
    }

    /**
     * Sets source_guid
     *
     * @param string $source_guid Used when importing products from external sources
     *
     * @return $this
     */
    public function setSourceGuid($source_guid)
    {
        if (!is_null($source_guid) && (mb_strlen($source_guid) > 255)) {
            throw new \InvalidArgumentException('invalid length for $source_guid when calling Product., must be smaller than or equal to 255.');
        }

        $this->container['source_guid'] = $source_guid;

        return $this;
    }

    /**
     * Gets purchase_description
     *
     * @return string
     */
    public function getPurchaseDescription()
    {
        return $this->container['purchase_description'];
    }

    /**
     * Sets purchase_description
     *
     * @param string $purchase_description The product purchase description
     *
     * @return $this
     */
    public function setPurchaseDescription($purchase_description)
    {
        if (!is_null($purchase_description) && (mb_strlen($purchase_description) > 250)) {
            throw new \InvalidArgumentException('invalid length for $purchase_description when calling Product., must be smaller than or equal to 250.');
        }

        $this->container['purchase_description'] = $purchase_description;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Indicates whether the product is active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets catalog_item_type
     *
     * @return \Swagger\Client\Model\Base
     */
    public function getCatalogItemType()
    {
        return $this->container['catalog_item_type'];
    }

    /**
     * Sets catalog_item_type
     *
     * @param \Swagger\Client\Model\Base $catalog_item_type Indicates what the product type is
     *
     * @return $this
     */
    public function setCatalogItemType($catalog_item_type)
    {
        $this->container['catalog_item_type'] = $catalog_item_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


