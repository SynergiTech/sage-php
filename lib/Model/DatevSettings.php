<?php
/**
 * DatevSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sage One - Accounts - v3 UKI
 *
 * Documentation of the Sage Business Cloud Accounting API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DatevSettings Class Doc Comment
 *
 * @category Class
 * @description ### Endpoint Availability  * Accounting Plus: ðŸ‡©ðŸ‡ª * Accounting Standard: ðŸ‡©ðŸ‡ª * Accounting Start: ðŸ‡©ðŸ‡ª  ### Access Control Restrictions  Requires the authenticated user to have any of the following roles in the area &#x60;Settings&#x60;: Full Access
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DatevSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DatevSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'path' => 'string',
        'tax_consultant_number' => 'int',
        'client_number' => 'int',
        'next_customer_number' => 'int',
        'next_supplier_number' => 'int',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'path' => null,
        'tax_consultant_number' => 'int32',
        'client_number' => 'int32',
        'next_customer_number' => 'int32',
        'next_supplier_number' => 'int32',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => '$path',
        'tax_consultant_number' => 'tax_consultant_number',
        'client_number' => 'client_number',
        'next_customer_number' => 'next_customer_number',
        'next_supplier_number' => 'next_supplier_number',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'tax_consultant_number' => 'setTaxConsultantNumber',
        'client_number' => 'setClientNumber',
        'next_customer_number' => 'setNextCustomerNumber',
        'next_supplier_number' => 'setNextSupplierNumber',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'tax_consultant_number' => 'getTaxConsultantNumber',
        'client_number' => 'getClientNumber',
        'next_customer_number' => 'getNextCustomerNumber',
        'next_supplier_number' => 'getNextSupplierNumber',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['tax_consultant_number'] = isset($data['tax_consultant_number']) ? $data['tax_consultant_number'] : null;
        $this->container['client_number'] = isset($data['client_number']) ? $data['client_number'] : null;
        $this->container['next_customer_number'] = isset($data['next_customer_number']) ? $data['next_customer_number'] : null;
        $this->container['next_supplier_number'] = isset($data['next_supplier_number']) ? $data['next_supplier_number'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The api path for this item
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets tax_consultant_number
     *
     * @return int
     */
    public function getTaxConsultantNumber()
    {
        return $this->container['tax_consultant_number'];
    }

    /**
     * Sets tax_consultant_number
     *
     * @param int $tax_consultant_number Registration number of the Accountant
     *
     * @return $this
     */
    public function setTaxConsultantNumber($tax_consultant_number)
    {
        $this->container['tax_consultant_number'] = $tax_consultant_number;

        return $this;
    }

    /**
     * Gets client_number
     *
     * @return int
     */
    public function getClientNumber()
    {
        return $this->container['client_number'];
    }

    /**
     * Sets client_number
     *
     * @param int $client_number The users registration number
     *
     * @return $this
     */
    public function setClientNumber($client_number)
    {
        $this->container['client_number'] = $client_number;

        return $this;
    }

    /**
     * Gets next_customer_number
     *
     * @return int
     */
    public function getNextCustomerNumber()
    {
        return $this->container['next_customer_number'];
    }

    /**
     * Sets next_customer_number
     *
     * @param int $next_customer_number The next unique customer number
     *
     * @return $this
     */
    public function setNextCustomerNumber($next_customer_number)
    {
        $this->container['next_customer_number'] = $next_customer_number;

        return $this;
    }

    /**
     * Gets next_supplier_number
     *
     * @return int
     */
    public function getNextSupplierNumber()
    {
        return $this->container['next_supplier_number'];
    }

    /**
     * Sets next_supplier_number
     *
     * @param int $next_supplier_number The next unique supplier number
     *
     * @return $this
     */
    public function setNextSupplierNumber($next_supplier_number)
    {
        $this->container['next_supplier_number'] = $next_supplier_number;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The datetime when the item was last updated
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


